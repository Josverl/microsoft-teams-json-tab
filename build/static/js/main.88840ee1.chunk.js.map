{"version":3,"sources":["serviceWorker.ts","components/RadioIcons.tsx","api/api.ts","utils/utils.ts","components/SettingsView.tsx","components/SearchBar.tsx","components/Results.tsx","components/Overflow.tsx","components/CustomImage.tsx","components/ListView.tsx","components/CardView.tsx","components/ContentView.tsx","components/LoadIcon.tsx","components/EmptyScreenView.tsx","components/ErrorView.tsx","components/AuthView.tsx","utils/themeUtils.ts","App.tsx","index.tsx","ProviderWrapper.tsx"],"names":["Boolean","window","location","hostname","match","viewType","getResults","request","onResults","onError","microsoftTeams","sendQuery","removeUnsupportedActions","card","SupportedActions","newCard","actions","filter","item","includes","type","submitHandler","err","result","console","log","concat","launchTaskModule","content","taskInfo","height","undefined","width","title","preview","url","completionBotId","botId","startTask","alert","getCommandId","iUrl","queryString","query","commandId","parseQueryResponse","response","attachments","map","botID","previewRawPayload","hasOwnProperty","images","contentType","subTitle","subtitle","text","heroImageSrc","processQueryResponse","stripHTML","html","div","document","createElement","innerHTML","textContent","innerText","processOverflowAction","action","id","enabled","SettingsView","_React$useState","React","_React$useState2","Object","slicedToArray","CommandList","setCommandList","_React$useState3","_React$useState4","ContentUrl","setContentUrl","_React$useState5","_React$useState6","TabName","setTabName","error","onGetCommandResponse","length","onCommandSelection","notifySuccess","command","initialRun","setValidityState","saveHandler","saveEvent","setSettings","entityId","contentUrl","suggestedDisplayName","notifyAppLoaded","registerOnSaveHandler","onBotGetCommandResponse","getSupportedCommands","react","Text","size","Input","fluid","placeholder","onChange","event","target","value","style","marginTop","Dropdown","items","noResultsMessage","onSelectedChange","res","find","RadioIcons","props","handleChange","key","icon","name","outline","aria-label","onClick","e","List","Grid","react_default","a","Flex","styles","vAlign","Menu","defaultActiveIndex","accessibility","menuAsToolbarBehavior","iconOnly","viewOption","SearchBar","useState","Query","setQuery","onChangeHelperDebounced","debounce","onSearch","leading","trailing","gap","className","customClass","Item","push","RadioIcons_RadioIcons","view","newView","onViewChange","margin","input","newQuery","currentTarget","onKeyPress","SearchBarWrapper","createComponent","displayName","render","_ref","stardust","classes","SearchBar_SearchBar","root","Overflow","menuOpen","setMenuOpen","active","indicator","menu","disabled","open","onMenuOpenChange","CustomImage","src","ImageSrc","setImageSrc","borderRadius","ListView","innerHeight","Height","setHeight","updateHeight","useEffect","addEventListener","removeEventListener","keyCount","outList","itemList","fill","CustomImage_CustomImage","shrink","grow","truncated","weight","Overflow_Overflow","selectable","overflow","CardView","calculateColumns","Math","floor","innerWidth","Columns","setColumns","updateColumn","columns","gridBehavior","Segment","data-is-focusable","padding","boxShadow","position","right","top","column","textAlign","display","WebkitBoxOrient","WebkitLineClamp","AppStateEnum","Results","ListView_ListView","results","CardView_CardView","LoadIcon","isLoading","Loader","EmptyScreenView","button","buttonText","Button","primary","message","imageSrc","Image","ErrorView","EmptyScreenView_EmptyScreenView","AuthView","ErrorMessage","setErrorMessage","onAuthSuccess","onAuthenticated","data","ResponseType","onAuthFailure","authParams","currentQuery","authenticate","themeTypes","ContentView","ViewOption","setViewOption","Result","setResult","Render","AppState","setAppState","_React$useState7","_React$useState8","_React$useState9","_React$useState10","AuthData","setAuthData","_React$useState11","href","_React$useState12","Error","Auth","authResponse","resultsResponse","handleIfNoResults","NoResults","onThemeChange","isInitialRun","Results_Results","LoadIcon_LoadIcon","ErrorView_ErrorView","AuthView_AuthView","queryInfo","Loading","ContentViewWrapper","ContentView_ContentView","App","frameContext","SettingsView_SettingsView","getTheme","theme","customTheme","Contrast","componentVariables","backgroundColor","colorScheme","default","background2","_ref2","ListItem","_ref3","background","hoverBackgroundColor","backgroundHover1","hoverTextColor","foregroundFocus","activeBackgroundColor","borderActive","activeTextColor","_ref4","_ref5","inputBackgroundColor","componentStyles","_ref6","variables","_ref7","zIndex","_ref8",":hover","color",":active",":focus","_ref9","_ref10","mergeThemes","themes","teamsHighContrast","Dark","teamsDark","teams","ReactDOM","initialTheme","themeUtils","themeString","Theme","setTheme","Provider","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88840ee1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ninterface Config {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Button, Flex, Menu, menuAsToolbarBehavior } from '@stardust-ui/react';\r\n\r\nenum viewType {\r\n  List = 'List',\r\n  Grid = 'Grid',\r\n}\r\n\r\ninterface IRadioIconsProps {\r\n  onChange: (view: string) => void;\r\n  styles?: object;\r\n}\r\n\r\nexport const RadioIcons: React.FC<IRadioIconsProps> = (props: IRadioIconsProps): JSX.Element => {\r\n  // HANDLERS\r\n  const handleChange = (event: React.SyntheticEvent, items: { value: viewType }): void => {\r\n    props.onChange(items.value);\r\n  };\r\n\r\n  const items = [\r\n    {\r\n      key: 'list',\r\n      icon: {\r\n        name: 'menu',\r\n        outline: true,\r\n      },\r\n      'aria-label': 'List View',\r\n      onClick: (e: React.SyntheticEvent): void => handleChange(e, { value: viewType.List }),\r\n    },\r\n    {\r\n      key: 'card',\r\n      icon: {\r\n        name: 'gallery',\r\n        outline: true,\r\n      },\r\n      'aria-label': 'Card View',\r\n      onClick: (e: React.SyntheticEvent): void => handleChange(e, { value: viewType.Grid }),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Flex styles={props.styles} vAlign=\"center\">\r\n      <Menu items={items} defaultActiveIndex={0} accessibility={menuAsToolbarBehavior} iconOnly />\r\n    </Flex>\r\n  );\r\n};\r\n","import * as microsoftTeams from '@microsoft/teams-js';\r\nimport * as adaptiveCards from 'adaptivecards';\r\nimport { ISubmitAction, IOpenUrlAction, IShowCardAction } from 'adaptivecards/lib/schema';\r\n\r\nexport const getResults = (\r\n  request: microsoftTeams.bot.QueryRequest,\r\n  onResults: (response: microsoftTeams.bot.QueryResponse) => void,\r\n  onError: (error: string) => void,\r\n): void => {\r\n  microsoftTeams.bot.sendQuery(request, onResults, onError);\r\n};\r\n\r\nexport const getSupportedCommands = (\r\n  onBotGetCommandResponse: (response: microsoftTeams.bot.Command[]) => void,\r\n  onError: (error: string) => void,\r\n): void => {\r\n  microsoftTeams.bot.getSupportedCommands(onBotGetCommandResponse, onError);\r\n};\r\n\r\nexport const removeUnsupportedActions = (card: adaptiveCards.IAdaptiveCard): adaptiveCards.IAdaptiveCard => {\r\n  const SupportedActions: string[] = ['Action.OpenUrl', 'Action.Submit', 'Action.ShowCard', 'invoke', 'signin'];\r\n  let newCard = card;\r\n  if (card.actions) {\r\n    newCard.actions = card.actions.filter((item: ISubmitAction | IOpenUrlAction | IShowCardAction): boolean => {\r\n      return SupportedActions.includes(item.type);\r\n    });\r\n  }\r\n  return newCard;\r\n};\r\n","import * as microsoftTeams from '@microsoft/teams-js';\r\nimport { ICard, OverflowAction } from '../api/api.interface';\r\nimport * as queryString from 'query-string';\r\nimport { ISubmitAction, IOpenUrlAction, IShowCardAction } from 'adaptivecards/lib/schema';\r\nimport { removeUnsupportedActions } from '../api/api';\r\n\r\n// gets frame context from url\r\nexport const submitHandler = (err: string, result: string): void => {\r\n  console.log(`Err value: ${err}, result value : ${result}`);\r\n};\r\n\r\nexport const launchTaskModule = (card: ICard): void => {\r\n  // Only open task module if card is an Adaptive Card\r\n  if (card.content.type && card.content.type === 'AdaptiveCard') {\r\n    const taskInfo: microsoftTeams.TaskInfo = {\r\n      height: undefined,\r\n      width: 600,\r\n      title: card.preview.title,\r\n      url: undefined,\r\n      card: card.content,\r\n      completionBotId: card.botId,\r\n    };\r\n    microsoftTeams.tasks.startTask(taskInfo, submitHandler);\r\n  } else {\r\n    alert(`Could not load data, card type is not supported.`);\r\n  }\r\n};\r\n\r\nexport const getCommandId = (iUrl: string): string => {\r\n  const url = queryString.parseUrl(iUrl);\r\n  return url.query.commandId as string;\r\n};\r\n\r\nexport const isInitialRun = (): boolean => {\r\n  const url = queryString.parseUrl(window.location.href);\r\n  return url.query.initialRun != null && url.query.initialRun == 'true';\r\n};\r\n\r\n// gets frame context from url\r\nexport const getFrameContext = (iUrl: string): string => {\r\n  const url = queryString.parseUrl(iUrl);\r\n  return url.query.frameContext as string;\r\n};\r\n\r\nexport const processQueryResponse = (item: microsoftTeams.bot.Attachment, botID: string): ICard => {\r\n  let url = '';\r\n  if (item.previewRawPayload.content.hasOwnProperty('images')) {\r\n    if (\r\n      item.previewRawPayload.content.images &&\r\n      item.previewRawPayload.content.images[0] &&\r\n      item.previewRawPayload.content.images[0].url\r\n    )\r\n      url = item.previewRawPayload.content.images[0].url;\r\n  }\r\n  const out: ICard = {\r\n    contentType: 'AdaptiveCard',\r\n    content: removeUnsupportedActions(item.card.content),\r\n    preview: {\r\n      title: item.previewRawPayload.content.title,\r\n      subTitle: item.previewRawPayload.content.subtitle,\r\n      text: item.previewRawPayload.content.text,\r\n      heroImageSrc: url,\r\n    },\r\n    botId: botID,\r\n  };\r\n  return out;\r\n};\r\n\r\n// converts a bot response to ICard\r\nexport const parseQueryResponse = (response: microsoftTeams.bot.Results): ICard[] => {\r\n  if (response && response.attachments) {\r\n    return response.attachments.map(\r\n      (item: microsoftTeams.bot.Attachment): ICard => processQueryResponse(item, response.botId),\r\n    );\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\n// Function to strip HTML tags from data\r\nexport const stripHTML = (html: string): string => {\r\n  let div = document.createElement('div');\r\n  div.innerHTML = html;\r\n  return div.textContent || div.innerText || '';\r\n};\r\n\r\nexport const processOverflowAction = (action: ISubmitAction | IOpenUrlAction | IShowCardAction): OverflowAction => {\r\n  const supportedOverflowActions: string[] = ['Action.OpenUrl'];\r\n  return {\r\n    id: action.id,\r\n    type: action.type,\r\n    title: action.title,\r\n    enabled: supportedOverflowActions.includes(action.type),\r\n    url: action.type === 'Action.OpenUrl' ? action.url : undefined,\r\n  };\r\n};\r\n\r\nexport const getOverflowActions = (card: ICard): OverflowAction[] => {\r\n  return card.content.actions.map(processOverflowAction);\r\n};\r\n","import * as React from 'react';\r\nimport { Text, Input, Dropdown } from '@stardust-ui/react';\r\nimport * as microsoftTeams from '@microsoft/teams-js';\r\nimport { getSupportedCommands } from '../api/api';\r\n\r\nexport const SettingsView: React.FC = (): JSX.Element => {\r\n  // STATE HOOKS\r\n  const [CommandList, setCommandList] = React.useState([] as microsoftTeams.bot.Command[]);\r\n  const [ContentUrl, setContentUrl] = React.useState('');\r\n  const [TabName, setTabName] = React.useState('JSONTabDefault');\r\n  // HANDLERS\r\n  const onError = (error: string): void => {\r\n    alert(error);\r\n  };\r\n\r\n  const onGetCommandResponse = (response: microsoftTeams.bot.Command[]): void => {\r\n    setCommandList(response);\r\n    if (CommandList.length === 1) {\r\n      onCommandSelection(CommandList[0]);\r\n    }\r\n    microsoftTeams.appInitialization.notifySuccess();\r\n  };\r\n\r\n  const handleNameChange = (event: any): void => {\r\n    setTabName(event.target.value);\r\n  };\r\n\r\n  const handleCommandChange = (event: any, res: any): void => {\r\n    const command = CommandList.find(\r\n      (item: microsoftTeams.bot.Command): boolean => item.title === res.value,\r\n    ) as microsoftTeams.bot.Command;\r\n    if (command) {\r\n      onCommandSelection(command);\r\n    }\r\n  };\r\n\r\n  const onCommandSelection = (command: microsoftTeams.bot.Command): void => {\r\n    if (command.initialRun) {\r\n      setContentUrl(\r\n        `https://microsoft-teams-json-tab.azurewebsites.net?theme={theme}&frameContext=content&commandId=${command.id}&initialRun=${command.initialRun}`,\r\n      );\r\n    } else {\r\n      setContentUrl(\r\n        `https://microsoft-teams-json-tab.azurewebsites.net?theme={theme}&frameContext=content&commandId=${command.id}`,\r\n      );\r\n    }\r\n    microsoftTeams.settings.setValidityState(true);\r\n  };\r\n\r\n  const saveHandler = (saveEvent: microsoftTeams.settings.SaveEvent): void => {\r\n    microsoftTeams.settings.setSettings({\r\n      entityId: 'JSONTab',\r\n      contentUrl: ContentUrl,\r\n      suggestedDisplayName: TabName,\r\n    });\r\n    saveEvent.notifySuccess();\r\n  };\r\n\r\n  // EFFECT HOOKS\r\n  React.useEffect((): void => {\r\n    microsoftTeams.initialize();\r\n    microsoftTeams.appInitialization.notifyAppLoaded();\r\n    microsoftTeams.settings.registerOnSaveHandler(saveHandler);\r\n    getSupportedCommands(onGetCommandResponse, onError);\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Text size={'medium'} content={'Name your tab'} />\r\n      </div>\r\n      <Input fluid placeholder={'Tab name'} onChange={handleNameChange} />\r\n      <div style={{ marginTop: '16px' }}>\r\n        <Text size={'medium'} content={\"Select the command you'd like query your bot with\"} />\r\n      </div>\r\n      <Dropdown\r\n        fluid\r\n        items={CommandList.map((command: microsoftTeams.bot.Command): string => {\r\n          return command.title;\r\n        })}\r\n        noResultsMessage=\"We couldn't find any matches.\"\r\n        onSelectedChange={handleCommandChange}\r\n        placeholder={CommandList.length === 1 ? CommandList[0].title : 'Select the command'}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Input, Button, Icon, Image, Flex, Header, createComponent } from '@stardust-ui/react';\r\nimport { RadioIcons } from './RadioIcons';\r\nimport { debounce } from 'lodash';\r\n\r\nenum viewType {\r\n  List = 'List',\r\n  Grid = 'Grid',\r\n}\r\n\r\ninterface ISearchBarProps {\r\n  onSearch: (query: string) => void;\r\n  onViewChange: (view: viewType) => void;\r\n  customClass?: string;\r\n}\r\n\r\nexport const SearchBar: React.FC<ISearchBarProps> = (props: ISearchBarProps): JSX.Element => {\r\n  // STATE HOOKS\r\n  const [Query, setQuery] = React.useState('');\r\n\r\n  // HELPER\r\n  const onChangeHelper = (query: string) => {\r\n    if (query !== Query) {\r\n      props.onSearch(query);\r\n      setQuery(query);\r\n    }\r\n  };\r\n  // DEBOUNCED HELPER\r\n  const onChangeHelperDebounced = debounce(onChangeHelper, 400, { leading: false, trailing: true });\r\n\r\n  // HANDLERS\r\n  const handleOnChange = (event: React.SyntheticEvent<HTMLElement>): void => {\r\n    const newQuery = (event as React.SyntheticEvent<HTMLInputElement>).currentTarget.value;\r\n    onChangeHelperDebounced(newQuery);\r\n  };\r\n\r\n  const handleRadioButtonChange = (view: string): void => {\r\n    const newView = view === viewType.List ? viewType.List : viewType.Grid;\r\n    props.onViewChange(newView);\r\n  };\r\n\r\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>): void => {\r\n    if (event.key === 'Enter') {\r\n      props.onSearch(Query);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Flex gap=\"gap.small\" vAlign=\"center\" className={props.customClass}>\r\n      <Flex.Item push>\r\n        <Flex>\r\n          <RadioIcons onChange={handleRadioButtonChange} styles={{ margin: '0 0 16px 0' }} />\r\n        </Flex>\r\n      </Flex.Item>\r\n      <Input\r\n        placeholder=\"Search\"\r\n        icon={{\r\n          name: 'search',\r\n          outline: true,\r\n        }}\r\n        input={{\r\n          styles: { width: '250px' },\r\n        }}\r\n        styles={{ margin: '0px 0px 16px 0px' }}\r\n        onChange={handleOnChange}\r\n        onKeyPress={handleKeyPress}\r\n      />\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport const SearchBarWrapper = createComponent({\r\n  displayName: 'SearchBarWrapper',\r\n  render: ({ stardust, onSearch, onViewChange }) => {\r\n    const { classes } = stardust;\r\n    return <SearchBar customClass={classes.root} onViewChange={onViewChange} onSearch={onSearch} />;\r\n  },\r\n});\r\n","import React from 'react';\r\nimport { ListView } from './ListView';\r\nimport { CardView } from './CardView';\r\nimport { ICard } from '../api/api.interface';\r\n\r\nexport interface IResultState {\r\n  results: ICard[];\r\n  viewOption: string;\r\n}\r\nenum viewOption {\r\n  List = 'List',\r\n  Grid = 'Grid',\r\n}\r\nexport const Results: React.FC<IResultState> = (props: IResultState): JSX.Element => {\r\n  return (\r\n    <div>\r\n      {props.viewOption === viewOption.List ? (\r\n        <ListView itemList={props.results} />\r\n      ) : (\r\n        <CardView itemList={props.results} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Menu } from '@stardust-ui/react';\r\nimport { ICard, OverflowAction } from '../api/api.interface';\r\nimport { getOverflowActions } from '../utils/utils';\r\n\r\nexport interface OverflowProps {\r\n  card: ICard;\r\n  styles?: object;\r\n  title?: string;\r\n}\r\n\r\nexport const Overflow: React.FC<OverflowProps> = (props: OverflowProps): JSX.Element => {\r\n  const [menuOpen, setMenuOpen] = React.useState(false);\r\n\r\n  const displayActions = (action: OverflowAction) => ({\r\n    key: action.id,\r\n    content: action.title,\r\n    disabled: !action.enabled,\r\n    onClick: action.url ? () => window.open(action.url) : undefined,\r\n  });\r\n\r\n  const actions = getOverflowActions(props.card);\r\n\r\n  const items = [\r\n    {\r\n      key: 'more',\r\n      icon: {\r\n        name: 'more',\r\n        outline: true,\r\n      },\r\n      menuOpen,\r\n      active: menuOpen,\r\n      indicator: false,\r\n      menu: {\r\n        items: actions.map(displayActions),\r\n      },\r\n      onMenuOpenChange: (e: any, { menuOpen }: any) => {\r\n        setMenuOpen(menuOpen);\r\n      },\r\n    },\r\n  ];\r\n\r\n  return <Menu iconOnly items={items} styles={props.styles} title={props.title} />;\r\n};\r\n","import React from 'react';\r\nimport '../css/App.css';\r\n\r\nexport interface CustomImageProps {\r\n  src?: string;\r\n  className?: string;\r\n  width?: string;\r\n}\r\n\r\nexport const CustomImage: React.FC<CustomImageProps> = (props: CustomImageProps): JSX.Element => {\r\n  const [ImageSrc, setImageSrc] = React.useState(props.src);\r\n\r\n  const handleError = () => {\r\n    setImageSrc('https://stardust-ui.github.io/react/public/images/wireframe/square-image.png');\r\n  };\r\n  return (\r\n    <img\r\n      style={{ width: `${props.width}`, height: '100%', borderRadius: '3px' }}\r\n      className={props.className}\r\n      src={ImageSrc}\r\n      onError={handleError}\r\n    />\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { List, Flex, Text } from '@stardust-ui/react';\r\nimport { ICard } from '../api/api.interface';\r\nimport { launchTaskModule, stripHTML } from '../utils/utils';\r\nimport { Overflow } from './Overflow';\r\nimport { CustomImage } from './CustomImage';\r\n\r\nexport interface IItemListProps {\r\n  itemList: ICard[];\r\n}\r\n\r\nexport interface IProcessedItem {\r\n  key: number;\r\n  content: JSX.Element;\r\n  onClick: () => void;\r\n}\r\n\r\nexport const ListView: React.FC<IItemListProps> = (props: IItemListProps): JSX.Element => {\r\n  const [Height, setHeight] = React.useState(window.innerHeight);\r\n  const updateHeight = () => {\r\n    setHeight(window.innerHeight);\r\n  };\r\n\r\n  // EFFECT HOOKS\r\n  React.useEffect(() => {\r\n    window.addEventListener('resize', updateHeight);\r\n    return () => {\r\n      window.removeEventListener('resize', updateHeight);\r\n    };\r\n  }, [Height]);\r\n\r\n  // Key count to ensure unique keys for every item\r\n  let keyCount = 0;\r\n\r\n  // Function to translate items from IPreviewCard to List.Item format\r\n  const processItem = (item: ICard): IProcessedItem => {\r\n    keyCount++;\r\n    const out = {\r\n      key: keyCount,\r\n      content: (\r\n        <Flex vAlign=\"center\" fill gap=\"gap.small\">\r\n          <Flex.Item>\r\n            <CustomImage width=\"32px\" className=\"listItemImage\" src={item.preview.heroImageSrc} />\r\n          </Flex.Item>\r\n          <Flex.Item size=\"size.small\" shrink={0} grow={1}>\r\n            <Text\r\n              truncated\r\n              size=\"medium\"\r\n              weight=\"semibold\"\r\n              content={stripHTML(item.preview.title)}\r\n              title={stripHTML(item.preview.title)}\r\n            />\r\n          </Flex.Item>\r\n          {item.preview.subTitle ? (\r\n            <Flex.Item size=\"size.medium\" shrink={1} grow={0}>\r\n              <Text\r\n                truncated\r\n                size=\"medium\"\r\n                weight=\"regular\"\r\n                content={stripHTML(item.preview.subTitle)}\r\n                title={stripHTML(item.preview.subTitle)}\r\n              />\r\n            </Flex.Item>\r\n          ) : null}\r\n          {item.preview.text ? (\r\n            <Flex.Item size=\"size.half\" shrink={3} grow={0} aria-label={stripHTML(item.preview.title)}>\r\n              <Text\r\n                truncated\r\n                size=\"medium\"\r\n                weight=\"regular\"\r\n                content={stripHTML(item.preview.text)}\r\n                title={stripHTML(item.preview.text)}\r\n              />\r\n            </Flex.Item>\r\n          ) : null}\r\n          {item.content.actions ? (\r\n            <Flex.Item shrink={0}>\r\n              <Overflow card={item} title=\"More Options\" />\r\n            </Flex.Item>\r\n          ) : null}\r\n        </Flex>\r\n      ),\r\n      styles: { margin: '2px 2px 0 0' },\r\n      onClick: (): void => launchTaskModule(item),\r\n    };\r\n    return out;\r\n  };\r\n\r\n  // Output List for processed data\r\n  // Call processing function on all items\r\n  const outList = props.itemList.map(processItem);\r\n\r\n  // Render selectable list\r\n  return <List selectable items={outList} styles={{ height: `${Height - 48}px`, overflow: 'scroll' }} />;\r\n};\r\n","import React from 'react';\r\nimport { Flex, Grid, Segment, Image, Text, gridBehavior } from '@stardust-ui/react';\r\nimport { IItemListProps } from './ListView';\r\nimport { ICard } from '../api/api.interface';\r\nimport { stripHTML, launchTaskModule } from '../utils/utils';\r\nimport '../css/App.css';\r\nimport { Overflow } from './Overflow';\r\nimport { CustomImage } from './CustomImage';\r\n\r\nexport const CardView: React.FC<IItemListProps> = (props: IItemListProps): JSX.Element => {\r\n  // CONSTANTS\r\n  const minimumCardWidth = 278; //px\r\n\r\n  // HELPER FUNCTION\r\n  const calculateColumns = (width: number) => {\r\n    return Math.floor(width / minimumCardWidth);\r\n  };\r\n\r\n  const [Height, setHeight] = React.useState(window.innerHeight);\r\n  const updateHeight = () => {\r\n    setHeight(window.innerHeight);\r\n  };\r\n\r\n  // EFFECT HOOKS\r\n  React.useEffect(() => {\r\n    window.addEventListener('resize', updateHeight);\r\n    return () => {\r\n      window.removeEventListener('resize', updateHeight);\r\n    };\r\n  }, [Height]);\r\n\r\n  // STATE HOOKS\r\n  const [Columns, setColumns] = React.useState(calculateColumns(window.innerWidth));\r\n\r\n  // HANDLERS\r\n  const updateColumn = () => {\r\n    setColumns(calculateColumns(window.innerWidth));\r\n  };\r\n\r\n  // EFFECT HOOKS\r\n  React.useEffect(() => {\r\n    window.addEventListener('resize', updateColumn);\r\n    return () => {\r\n      window.removeEventListener('resize', updateColumn);\r\n    };\r\n  }, [Columns]);\r\n\r\n  // ICARD PROCESSOR\r\n  const processItem = (item: ICard): JSX.Element => {\r\n    return (\r\n      <Segment\r\n        data-is-focusable=\"true\"\r\n        styles={{\r\n          margin: '0 0 16px 12px',\r\n          height: '146px',\r\n          padding: '20px 20px 20px 20px',\r\n          borderRadius: '3px',\r\n          boxShadow: '0px 2px 4px -0.75px rgba(0,0,0,0.1)',\r\n          position: 'relative',\r\n        }}\r\n        onClick={(): void => launchTaskModule(item)}\r\n        onKeyPress={(e: React.KeyboardEvent<HTMLDivElement>) => {\r\n          if (e.key === 'Enter') {\r\n            launchTaskModule(item);\r\n          }\r\n        }}\r\n      >\r\n        {item.content.actions ? (\r\n          <Overflow card={item} styles={{ position: 'absolute', right: '0', top: '0', margin: '0 8px 0px 0px' }} />\r\n        ) : null}\r\n        <Flex gap=\"gap.small\">\r\n          <Flex.Item>\r\n            <CustomImage width=\"48px\" className=\"listItemImage\" src={item.preview.heroImageSrc} />\r\n          </Flex.Item>\r\n          <Flex.Item size=\"size.half\" grow>\r\n            <Flex column styles={{ textAlign: 'left' }}>\r\n              <Flex.Item\r\n                styles={{ display: '-webkit-box', WebkitBoxOrient: 'vertical', WebkitLineClamp: 1, overflow: 'hidden' }}\r\n              >\r\n                <Text\r\n                  content={stripHTML(item.preview.title)}\r\n                  styles={{ margin: '0 0 2px 0' }}\r\n                  size=\"medium\"\r\n                  weight=\"semibold\"\r\n                  title={stripHTML(item.preview.title)}\r\n                />\r\n              </Flex.Item>\r\n              {item.preview.subTitle ? (\r\n                <Flex.Item\r\n                  styles={{\r\n                    display: '-webkit-box',\r\n                    WebkitBoxOrient: 'vertical',\r\n                    WebkitLineClamp: 1,\r\n                    overflow: 'hidden',\r\n                  }}\r\n                >\r\n                  <Text\r\n                    content={stripHTML(item.preview.subTitle)}\r\n                    styles={{ margin: '0 0 2px 0' }}\r\n                    weight=\"regular\"\r\n                    size=\"medium\"\r\n                    title={stripHTML(item.preview.subTitle)}\r\n                  />\r\n                </Flex.Item>\r\n              ) : null}\r\n              {item.preview.text ? (\r\n                <Flex.Item\r\n                  grow\r\n                  size=\"size.half\"\r\n                  styles={{\r\n                    display: '-webkit-box',\r\n                    WebkitBoxOrient: 'vertical',\r\n                    WebkitLineClamp: 3,\r\n                    overflow: 'hidden',\r\n                  }}\r\n                >\r\n                  <Text\r\n                    content={stripHTML(item.preview.text)}\r\n                    weight=\"regular\"\r\n                    size=\"medium\"\r\n                    title={stripHTML(item.preview.text)}\r\n                  />\r\n                </Flex.Item>\r\n              ) : null}\r\n            </Flex>\r\n          </Flex.Item>\r\n        </Flex>\r\n      </Segment>\r\n    );\r\n  };\r\n\r\n  // RENDER\r\n  return (\r\n    <div style={{ margin: '0 0 0 8px', height: `${Height - 50}px`, overflow: 'scroll' }}>\r\n      <Grid columns={Columns} accessibility={gridBehavior} content={props.itemList.map(processItem)} />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { SearchBarWrapper } from './SearchBar';\r\nimport { Results } from './Results';\r\nimport { LoadIcon } from './LoadIcon';\r\nimport { ErrorView } from './ErrorView';\r\nimport { AuthView } from './AuthView';\r\n\r\nimport { getResults } from '../api/api';\r\n\r\nimport * as microsoftTeams from '@microsoft/teams-js';\r\nimport { ICard } from '../api/api.interface';\r\nimport { isInitialRun, parseQueryResponse, getCommandId } from '../utils/utils';\r\nimport { createComponent } from '@stardust-ui/react';\r\nimport { EmptyScreenView } from './EmptyScreenView';\r\n\r\n// handlers\r\nexport interface IContentViewProps {\r\n  onThemeChange: (theme: string) => void;\r\n  customClass: string;\r\n}\r\n\r\nenum AppStateEnum {\r\n  Loading = 'Loading',\r\n  Error = 'Error',\r\n  Render = 'Render',\r\n  Auth = 'Auth',\r\n  NoResults = 'NoResults',\r\n}\r\n\r\nexport const ContentView: React.FC<IContentViewProps> = (props: IContentViewProps): JSX.Element => {\r\n  // state hooks\r\n  const [ViewOption, setViewOption] = React.useState('List');\r\n  const [Result, setResult] = React.useState([] as ICard[]);\r\n  const [AppState, setAppState] = React.useState(AppStateEnum.Render);\r\n  const [ErrorMessage, setErrorMessage] = React.useState('');\r\n  const [AuthData, setAuthData] = React.useState({ url: '', title: 'Sign in' });\r\n  const [Query, setQuery] = React.useState({ query: '', commandId: getCommandId(window.location.href) });\r\n\r\n  const onError = (error: string): void => {\r\n    setAppState(AppStateEnum.Error);\r\n    setErrorMessage(error);\r\n  };\r\n\r\n  const onResults = (response: microsoftTeams.bot.QueryResponse): void => {\r\n    if (response.type === microsoftTeams.bot.ResponseType.Auth) {\r\n      const authResponse: microsoftTeams.bot.Auth = response.data as microsoftTeams.bot.Auth;\r\n      setAuthData({ url: authResponse.url, title: authResponse.title });\r\n      setAppState(AppStateEnum.Auth);\r\n    } else {\r\n      const resultsResponse: microsoftTeams.bot.Results = response.data as microsoftTeams.bot.Results;\r\n      setResult(parseQueryResponse(resultsResponse));\r\n      handleIfNoResults(resultsResponse.attachments);\r\n      microsoftTeams.appInitialization.notifySuccess();\r\n    }\r\n  };\r\n\r\n  const handleSearch = (query: string): void => {\r\n    if (query !== undefined) {\r\n      const queryInfo = { query: query, commandId: getCommandId(window.location.href) };\r\n      getResults(queryInfo, onResults, onError);\r\n      setAppState(AppStateEnum.Loading);\r\n      setQuery(queryInfo); // keep query in state for auth\r\n    }\r\n  };\r\n\r\n  const handleViewChange = (viewOption: string): void => {\r\n    if (viewOption) {\r\n      setViewOption(viewOption);\r\n    }\r\n  };\r\n\r\n  const handleIfNoResults = (response: microsoftTeams.bot.Attachment[]): void => {\r\n    if (response.length === 0) {\r\n      setAppState(AppStateEnum.NoResults);\r\n    } else {\r\n      setAppState(AppStateEnum.Render);\r\n    }\r\n  };\r\n\r\n  // EFFECT HOOKS\r\n  React.useEffect((): void => {\r\n    microsoftTeams.initialize();\r\n    microsoftTeams.appInitialization.notifyAppLoaded();\r\n    microsoftTeams.registerOnThemeChangeHandler(props.onThemeChange);\r\n    if (isInitialRun()) {\r\n      const request: microsoftTeams.bot.QueryRequest = {\r\n        query: '',\r\n        commandId: getCommandId(window.location.href),\r\n      };\r\n      getResults(request, onResults, onError);\r\n    }\r\n  }, [props.onThemeChange]);\r\n\r\n  let view = <Results results={Result} viewOption={ViewOption} />;\r\n  switch (AppState) {\r\n    case 'Loading':\r\n      view = <LoadIcon isLoading={true} />;\r\n      break;\r\n    case 'Error':\r\n      view = <ErrorView message={ErrorMessage} />;\r\n      break;\r\n    case 'Auth':\r\n      view = <AuthView title={AuthData.title} url={AuthData.url} currentQuery={Query} onAuthenticated={onResults} />;\r\n      break;\r\n    case 'NoResults':\r\n      view = <EmptyScreenView title=\"We couldn't find any results\" subTitle=\"Search, or try refining your query!\" />;\r\n      break;\r\n  }\r\n  return (\r\n    <div className={props.customClass}>\r\n      <SearchBarWrapper onSearch={handleSearch} onViewChange={handleViewChange} />\r\n      {view}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const ContentViewWrapper = createComponent({\r\n  displayName: 'ContentViewWrapper',\r\n  render: ({ stardust, onThemeChange }) => {\r\n    const { classes } = stardust;\r\n    return <ContentView customClass={classes.root} onThemeChange={onThemeChange} />;\r\n  },\r\n});\r\n","import React from 'react';\r\nimport { Loader } from '@stardust-ui/react';\r\nimport '../css/LoadIcon.css';\r\n\r\nexport interface LoadIconProps {\r\n  isLoading: boolean;\r\n}\r\n\r\nexport const LoadIcon: React.FC<LoadIconProps> = (props: LoadIconProps): JSX.Element => {\r\n  return <div className=\"loadIcon\"> {props.isLoading ? <Loader /> : null} </div>;\r\n};\r\n","import React from 'react';\r\nimport { Text, Image, Button } from '@stardust-ui/react';\r\nimport '../css/EmptyScreenView.css';\r\n\r\ninterface IEmptyScreenView {\r\n  title: string;\r\n  subTitle: string;\r\n  imageSrc?: string;\r\n  message?: string;\r\n  buttonText?: string;\r\n  onClick?: any;\r\n}\r\n\r\nexport const EmptyScreenView: React.FC<IEmptyScreenView> = (props: IEmptyScreenView): JSX.Element => {\r\n  let button: any = '';\r\n  if (props.buttonText && props.onClick) {\r\n    button = <Button id=\"button\" content={props.buttonText} onClick={props.onClick} primary />;\r\n  }\r\n  let message = '';\r\n  if (props.message) {\r\n    message = props.message;\r\n  }\r\n  let imageSrc = 'error.svg';\r\n  if (props.imageSrc) {\r\n    imageSrc = props.imageSrc;\r\n  }\r\n\r\n  return (\r\n    <div className=\"EmptyScreenView\">\r\n      <Image id=\"image\" src={imageSrc} />\r\n      <div id=\"textblock\">\r\n        <Text id=\"title\" size={'large'} weight=\"bold\" content={props.title} />\r\n        <Text styles={{ marginTop: '8px' }} size={'medium'} content={<p>{props.subTitle}</p>} />\r\n        <Text id=\"error\" size=\"small\" content={message} />\r\n      </div>\r\n      {button}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { EmptyScreenView } from './EmptyScreenView';\r\ninterface IErrorViewProps {\r\n  message: string;\r\n}\r\n\r\nexport const ErrorView: React.FC<IErrorViewProps> = (props: IErrorViewProps): JSX.Element => {\r\n  return (\r\n    <EmptyScreenView\r\n      title=\"There was a problem communicating with the bot\"\r\n      subTitle=\"You may not be able to use this feature\"\r\n      message={props.message}\r\n    />\r\n  );\r\n};\r\n","import React from 'react';\r\nimport * as microsoftTeams from '@microsoft/teams-js';\r\nimport { EmptyScreenView } from './EmptyScreenView';\r\n\r\ninterface IAuthViewProps {\r\n  title: string;\r\n  url: string;\r\n  currentQuery: microsoftTeams.bot.QueryRequest;\r\n  onAuthenticated: (results: microsoftTeams.bot.QueryResponse) => void;\r\n}\r\n\r\nexport const AuthView: React.FC<IAuthViewProps> = (props: IAuthViewProps): JSX.Element => {\r\n  const [ErrorMessage, setErrorMessage] = React.useState('');\r\n\r\n  const onAuthSuccess = (results: microsoftTeams.bot.Results): void => {\r\n    props.onAuthenticated({ data: results, type: microsoftTeams.bot.ResponseType.Results });\r\n  };\r\n\r\n  const onAuthFailure = (error: string): void => {\r\n    setErrorMessage('Something went wrong, please try again');\r\n  };\r\n\r\n  const handleAuthentication = () => {\r\n    const authParams: microsoftTeams.bot.AuthQueryRequest = {\r\n      query: props.currentQuery.query,\r\n      commandId: props.currentQuery.commandId,\r\n      url: props.url,\r\n    };\r\n\r\n    microsoftTeams.bot.authenticate(authParams, onAuthSuccess, onAuthFailure);\r\n  };\r\n\r\n  return (\r\n    <EmptyScreenView\r\n      buttonText=\"Sign In\"\r\n      title={props.title}\r\n      subTitle={\"You'll need to sign in to use this app.\"}\r\n      message={ErrorMessage}\r\n      onClick={handleAuthentication}\r\n    />\r\n  );\r\n};\r\n","import { themes, ThemeInput, mergeThemes } from '@stardust-ui/react';\r\nimport * as queryString from 'query-string';\r\n\r\nenum themeTypes {\r\n  Dark = 'dark',\r\n  Default = 'default',\r\n  Contrast = 'contrast',\r\n}\r\n\r\n// gets theme name from url params\r\nexport const getThemeFromURL = (iUrl: string): string => {\r\n  const url = queryString.parseUrl(iUrl);\r\n\r\n  const themeString: string = url.query.theme as string;\r\n\r\n  if (!themeString) {\r\n    return 'default';\r\n  }\r\n  return themeString;\r\n};\r\n\r\nconst getCustomTheme = () => ({\r\n  componentVariables: {\r\n    ContentViewWrapper: ({ colorScheme }: any) => ({\r\n      backgroundColor: colorScheme.default.background2,\r\n    }),\r\n    SearchBarWrapper: ({ colorScheme }: any) => ({\r\n      backgroundColor: colorScheme.default.background2,\r\n    }),\r\n    ListItem: ({ colorScheme }: any) => ({\r\n      backgroundColor: colorScheme.default.background,\r\n      hoverBackgroundColor: colorScheme.default.backgroundHover1,\r\n      hoverTextColor: colorScheme.default.foregroundFocus,\r\n      activeBackgroundColor: colorScheme.default.borderActive,\r\n      activeTextColor: colorScheme.default.foregroundFocus,\r\n    }),\r\n    Segment: ({ colorScheme }: any) => ({\r\n      backgroundColor: colorScheme.default.background,\r\n      hoverBackgroundColor: colorScheme.default.backgroundHover1,\r\n      hoverTextColor: colorScheme.default.foregroundFocus,\r\n      activeBackgroundColor: colorScheme.default.borderActive,\r\n      activeTextColor: colorScheme.default.foregroundFocus,\r\n    }),\r\n    Input: ({ colorScheme }: any) => ({\r\n      inputBackgroundColor: colorScheme.default.background,\r\n    }),\r\n  },\r\n  componentStyles: {\r\n    ContentViewWrapper: {\r\n      root: ({ variables }: any) => ({\r\n        backgroundColor: variables.backgroundColor,\r\n      }),\r\n    },\r\n    SearchBarWrapper: {\r\n      root: ({ variables }: any) => ({\r\n        backgroundColor: variables.backgroundColor,\r\n        position: 'sticky',\r\n        top: '0px',\r\n        zIndex: 1,\r\n      }),\r\n    },\r\n    ListItem: {\r\n      root: ({ variables }: any) => ({\r\n        backgroundColor: variables.backgroundColor,\r\n        ':hover': {\r\n          backgroundColor: variables.hoverBackgroundColor,\r\n          color: variables.hoverTextColor,\r\n        },\r\n        ':active': {\r\n          backgroundColor: variables.activeBackgroundColor,\r\n          color: variables.activeTextColor,\r\n        },\r\n        ':focus': {\r\n          backgroundColor: variables.hoverBackgroundColor,\r\n          color: variables.hoverTextColor,\r\n        },\r\n      }),\r\n    },\r\n    Input: {\r\n      input: ({ variables }: any) => ({\r\n        backgroundColor: variables.inputBackgroundColor,\r\n      }),\r\n    },\r\n    Segment: {\r\n      root: ({ variables }: any) => ({\r\n        ':hover': {\r\n          backgroundColor: variables.hoverBackgroundColor,\r\n          color: variables.hoverTextColor,\r\n        },\r\n        ':active': {\r\n          backgroundColor: variables.activeBackgroundColor,\r\n          color: variables.activeTextColor,\r\n        },\r\n        ':focus': {\r\n          backgroundColor: variables.hoverBackgroundColor,\r\n          color: variables.hoverTextColor,\r\n        },\r\n      }),\r\n    },\r\n  },\r\n});\r\n\r\n// gets theme type from string\r\nexport const getTheme = (theme: string): ThemeInput => {\r\n  let customTheme: ThemeInput;\r\n  switch (theme) {\r\n    case themeTypes.Contrast:\r\n      customTheme = getCustomTheme();\r\n      return mergeThemes(themes.teamsHighContrast, customTheme);\r\n    case themeTypes.Dark:\r\n      customTheme = getCustomTheme();\r\n      return mergeThemes(themes.teamsDark, customTheme);\r\n    default:\r\n      customTheme = getCustomTheme();\r\n      return mergeThemes(themes.teams, customTheme);\r\n  }\r\n};\r\n","import React from 'react';\r\nimport './css/App.css';\r\n\r\nimport { getFrameContext } from './utils/utils';\r\nimport { SettingsView } from './components/SettingsView';\r\nimport { ContentViewWrapper } from './components/ContentView';\r\n\r\ninterface IAppProps {\r\n  onThemeChange: (theme: string) => void;\r\n}\r\n\r\nexport const App: React.FC<IAppProps> = (props: IAppProps): JSX.Element => {\r\n  // CONSTANTS\r\n  const url: string = window.location.href;\r\n  const frameContext = getFrameContext(url);\r\n  if (frameContext === 'settings') {\r\n    return (\r\n      <div>\r\n        <SettingsView />\r\n      </div>\r\n    );\r\n  } else {\r\n    return <ContentViewWrapper onThemeChange={props.onThemeChange} />;\r\n  }\r\n};\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { ProviderWrapper } from './ProviderWrapper';\r\n\r\nReactDOM.render(<ProviderWrapper />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport { Provider } from '@stardust-ui/react';\r\nimport App from './App';\r\nimport * as themeUtils from './utils/themeUtils';\r\n\r\nexport const ProviderWrapper: React.FC = (): JSX.Element => {\r\n  // CONSTANT\r\n  const initialTheme = themeUtils.getTheme(themeUtils.getThemeFromURL(window.location.href));\r\n  // HOOKS\r\n  const [Theme, setTheme] = React.useState(initialTheme);\r\n\r\n  // HANDLERS\r\n  const handleThemeChange = (theme: string): void => {\r\n    setTheme(themeUtils.getTheme(theme));\r\n  };\r\n\r\n  return (\r\n    <Provider theme={Theme}>\r\n      <App onThemeChange={handleThemeChange} />\r\n    </Provider>\r\n  );\r\n};\r\n"],"sourceRoot":""}