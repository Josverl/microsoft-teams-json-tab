{"version":3,"sources":["serviceWorker.ts","components/RadioIcons.tsx","utils/utils.ts","api/api.ts","components/SettingsView.tsx","components/SearchBar.tsx","components/Results.tsx","components/ListView.tsx","components/FlexItem.tsx","components/CardView.tsx","components/ContentView.tsx","components/LoadIcon.tsx","components/ErrorView.tsx","utils/themeUtils.ts","App.tsx","index.tsx","ProviderWrapper.tsx"],"names":["Boolean","window","location","hostname","match","viewType","submitHandler","err","result","console","log","concat","launchTaskModule","card","content","type","taskInfo","height","undefined","width","title","preview","url","completionBotId","botId","microsoftTeams","startTask","alert","getCommandId","iUrl","queryString","query","commandId","isInitialRun","href","initialRun","getResults","request","onResults","onError","sendQuery","SettingsView","_React$useState","React","_React$useState2","Object","slicedToArray","CommandList","setCommandList","_React$useState3","_React$useState4","CommandSelected","setCommandSelected","_React$useState5","_React$useState6","TabName","setTabName","error","onGetCommandResponse","response","notifySuccess","notifyAppLoaded","contentUrl","registerOnSaveHandler","saveEvent","setSettings","entityId","suggestedDisplayName","onBotGetCommandResponse","getSupportedCommands","react","Text","size","Input","fluid","placeholder","onChange","event","target","value","Dropdown","items","map","command","noResultsMessage","onSelectedChange","res","find","item","id","setValidityState","RadioIcons","_React$Component","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","setState","highlighted","state","stop","_x","_x2","apply","arguments","List","inherits","createClass","key","_this2","styles","border","box-shadow","react_default","createElement","className","Button","icon","iconOnly","onClick","e","Grid","Component","viewOption","SearchBar","useState","Query","setQuery","handleOnChange","handleOnClick","_ref2","_callee2","_context2","onSearch","RadioIcons_RadioIcons","view","newView","onViewChange","Icon","name","color","primary","backgroundColor","border-radius","input","onKeyPress","ListView","keyCount","outList","itemList","Flex","vAlign","Item","Image","src","heroImageSrc","dangerouslySetInnerHTML","__html","subTitle","selectable","FlexItem","tabIndex","onKeyDown","document","getElementById","focus","Layout","vertical","start","circular","Header","as","main","gap","CardView","tempSubTitle","tempTitle","i","length","replace","newTitle","substring","newItem","Box","push","AppStateEnum","Results","ListView_ListView","results","CardView_CardView","LoadIcon","isLoading","Loader","ErrorView","maxWidth","margin","display","textAlign","marginBottom","themeTypes","ContentView","ViewOption","setViewOption","Result","setResult","Render","AppState","setAppState","_React$useState7","_React$useState8","ErrorMessage","setErrorMessage","Error","attachments","botID","previewRawPayload","hasOwnProperty","images","contentType","text","processQueryResponse","parseQueryResponse","useEffect","onThemeChange","Results_Results","Loading","LoadIcon_LoadIcon","ErrorView_ErrorView","message","SearchBar_SearchBar","App","frameContext","SettingsView_SettingsView","ContentView_ContentView","getTheme","theme","newTheme","themes","teams","Contrast","teamsHighContrast","Dark","teamsDark","ReactDOM","render","initialTheme","themeUtils","themeString","Theme","setTheme","Provider","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4c8c0c3b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ninterface Config {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Button } from '@stardust-ui/react';\r\nimport '../css/SearchBar.css';\r\n\r\nenum viewType {\r\n  List = 'List',\r\n  Grid = 'Grid',\r\n}\r\n\r\ninterface IRadioIconsProps {\r\n  onChange: any;\r\n}\r\n\r\ninterface IRadioIconsState {\r\n  highlighted: viewType;\r\n}\r\n\r\nexport class RadioIcons extends React.Component<IRadioIconsProps, IRadioIconsState> {\r\n  constructor(props: IRadioIconsProps) {\r\n    super(props);\r\n    this.state = {\r\n      highlighted: viewType.List,\r\n    };\r\n  }\r\n\r\n  // broadcast state\r\n  public handleChange = async (event: any, items: any) => {\r\n    await this.setState({ highlighted: items.value });\r\n    this.props.onChange(this.state.highlighted);\r\n  };\r\n\r\n  public render() {\r\n    const styles = {\r\n      border: 'none',\r\n      'box-shadow': 'none',\r\n    };\r\n    return (\r\n      <div className=\"SearchBar\" id=\"buttons\">\r\n        <Button icon=\"menu\" iconOnly onClick={e => this.handleChange(e, { value: viewType.List })} styles={styles} />\r\n        <Button icon=\"table\" iconOnly onClick={e => this.handleChange(e, { value: viewType.Grid })} styles={styles} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as microsoftTeams from '@microsoft/teams-js';\r\nimport { ICard } from '../api/api.interface';\r\nimport * as queryString from 'query-string';\r\nimport { removeUnsupportedActions } from '../api/api';\r\n\r\n// gets frame context from url\r\nexport const submitHandler = (err: string, result: string): void => {\r\n  console.log(`Err value: ${err}, result value : ${result}`);\r\n};\r\n\r\nexport const launchTaskModule = (card: ICard): void => {\r\n  // Only open task module if card is an Adaptive Card\r\n  if (card.content.type && card.content.type === 'AdaptiveCard') {\r\n    const taskInfo: microsoftTeams.TaskInfo = {\r\n      height: undefined,\r\n      width: undefined,\r\n      title: card.preview.title,\r\n      url: undefined,\r\n      card: card.content,\r\n      completionBotId: card.botId,\r\n    };\r\n    microsoftTeams.tasks.startTask(taskInfo, submitHandler);\r\n  } else {\r\n    alert(`Could not load data, ${card.content.type} is not supported.`);\r\n  }\r\n};\r\n\r\nexport const getCommandId = (iUrl: string): string => {\r\n  const url = queryString.parseUrl(iUrl);\r\n  return url.query.commandId as string;\r\n};\r\n\r\nexport const isInitialRun = (): boolean => {\r\n  const url = queryString.parseUrl(window.location.href);\r\n  return url.query.initialRun != null && url.query.initialRun == 'true';\r\n};\r\n\r\n// gets frame context from url\r\nexport const getFrameContext = (iUrl: string): string => {\r\n  const url = queryString.parseUrl(iUrl);\r\n  return url.query.frameContext as string;\r\n};\r\n\r\nexport const processQueryResponse = (item: microsoftTeams.bot.IAttachment, botID: string): ICard => {\r\n  let url = '';\r\n  if (item.previewRawPayload.content.hasOwnProperty('images')) {\r\n    if (\r\n      item.previewRawPayload.content.images &&\r\n      item.previewRawPayload.content.images[0] &&\r\n      item.previewRawPayload.content.images[0].url\r\n    )\r\n      url = item.previewRawPayload.content.images[0].url;\r\n  }\r\n  const out: ICard = {\r\n    contentType: 'AdaptiveCard',\r\n    content: item.card.content,\r\n    preview: {\r\n      title: item.previewRawPayload.content.title,\r\n      subTitle: item.previewRawPayload.content.text,\r\n      heroImageSrc: url,\r\n    },\r\n    botId: botID,\r\n  };\r\n  return out;\r\n};\r\n\r\n// converts a bot response to ICard\r\nexport const parseQueryResponse = (response: microsoftTeams.bot.QueryResponse): ICard[] => {\r\n  if (response && response.attachments) {\r\n    return response.attachments.map((item: microsoftTeams.bot.IAttachment) =>\r\n      processQueryResponse(item, response.botId),\r\n    );\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n","import * as microsoftTeams from '@microsoft/teams-js';\r\nimport * as adaptiveCards from 'adaptivecards';\r\nimport { request } from 'http';\r\n\r\nexport const getResults = (\r\n  request: microsoftTeams.bot.QueryRequest,\r\n  onResults: (response: microsoftTeams.bot.QueryResponse) => void,\r\n  onError: (error: string) => void,\r\n): void => {\r\n  microsoftTeams.bot.sendQuery(request, onResults, onError);\r\n};\r\n\r\nexport const getSupportedCommands = (\r\n  onBotGetCommandResponse: (response: microsoftTeams.bot.ICommand[]) => void,\r\n  onError: (error: string) => void,\r\n): void => {\r\n  microsoftTeams.bot.getSupportedCommands(onBotGetCommandResponse, onError);\r\n};\r\n\r\nexport const removeUnsupportedActions = (card: adaptiveCards.IAdaptiveCard) => {\r\n  const SupportedActions: string[] = ['Action.OpenUrl', 'Action.Submit', 'Action.ShowCard', 'invoke', 'signin'];\r\n  let newCard = card;\r\n  if (card.actions) {\r\n    newCard.actions = card.actions.filter((item: any) => {\r\n      return SupportedActions.includes(item.type);\r\n    });\r\n  }\r\n  return newCard;\r\n};\r\n","import * as React from 'react';\r\nimport { Text, Input, Dropdown, InputProps } from '@stardust-ui/react';\r\nimport * as microsoftTeams from '@microsoft/teams-js';\r\nimport { getSupportedCommands } from '../api/api';\r\nimport { HtmlInputEvents } from '@stardust-ui/react/dist/es/lib/htmlPropsUtils';\r\nimport { isInitialRun } from '../utils/utils';\r\n\r\nexport const SettingsView: React.FC = (): JSX.Element => {\r\n  // STATE HOOKS\r\n  const [CommandList, setCommandList] = React.useState([] as microsoftTeams.bot.ICommand[]);\r\n  const [CommandSelected, setCommandSelected] = React.useState('');\r\n  const [TabName, setTabName] = React.useState('JSONTabDefault');\r\n  // HANDLERS\r\n  const onError = (error: string): void => {\r\n    alert(error);\r\n  };\r\n\r\n  const onGetCommandResponse = (response: microsoftTeams.bot.ICommand[]): void => {\r\n    setCommandList(response);\r\n    microsoftTeams.appInitialization.notifySuccess();\r\n  };\r\n\r\n  const handleNameChange = (event: any): void => {\r\n    setTabName(event.target.value);\r\n  };\r\n\r\n  const handleCommandChange = (event: any, res: any): void => {\r\n    const command = CommandList.find(\r\n      (item: microsoftTeams.bot.ICommand) => item.title === res.value,\r\n    ) as microsoftTeams.bot.ICommand;\r\n    setCommandSelected(command.id);\r\n    microsoftTeams.settings.setValidityState(true);\r\n  };\r\n\r\n  // EFFECT HOOKS\r\n  React.useEffect((): void => {\r\n    microsoftTeams.initialize();\r\n    microsoftTeams.appInitialization.notifyAppLoaded();\r\n    let contentUrl = isInitialRun()\r\n      ? `https://microsoft-teams-json-tab.azurewebsites.net?theme={theme}&frameContext=content&commandId=${CommandSelected}`\r\n      : `https://microsoft-teams-json-tab.azurewebsites.net?theme={theme}&frameContext=content&commandId=${CommandSelected}&initialRun=true`;\r\n    microsoftTeams.settings.registerOnSaveHandler((saveEvent: microsoftTeams.settings.SaveEvent): void => {\r\n      microsoftTeams.settings.setSettings({\r\n        entityId: 'JSONTab',\r\n        contentUrl: contentUrl,\r\n        suggestedDisplayName: TabName,\r\n      });\r\n      saveEvent.notifySuccess();\r\n    });\r\n    getSupportedCommands(onGetCommandResponse, onError);\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Text size={'medium'} content={'Name your tab'} />\r\n      </div>\r\n      <Input fluid placeholder={'Tab name'} onChange={handleNameChange} />\r\n      <div>\r\n        <Text size={'medium'} content={\"Select the command you'd like query your bot with\"} />\r\n      </div>\r\n      <Dropdown\r\n        fluid\r\n        items={CommandList.map((command: microsoftTeams.bot.ICommand): string => {\r\n          return command.title;\r\n        })}\r\n        noResultsMessage=\"We couldn't find any matches.\"\r\n        onSelectedChange={handleCommandChange}\r\n        placeholder=\"Select the command\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Input, Button, Icon } from '@stardust-ui/react';\r\nimport '../css/SearchBar.css';\r\nimport { RadioIcons } from './RadioIcons';\r\n\r\nenum viewType {\r\n  List = 'List',\r\n  Grid = 'Grid',\r\n}\r\n\r\ninterface ISearchBarProps {\r\n  onSearch: any;\r\n  onViewChange: any;\r\n}\r\n\r\nexport const SearchBar = (props: ISearchBarProps) => {\r\n  // HOOKS\r\n  const [Query, setQuery] = React.useState('');\r\n\r\n  // HANDLERS\r\n  const handleOnChange = async (event: any) => {\r\n    setQuery(event.target.value);\r\n  };\r\n\r\n  const handleOnClick = async (event: any) => {\r\n    props.onSearch(Query);\r\n  };\r\n\r\n  const handleRadioButtonChange = (view: string) => {\r\n    const newView = view === viewType.List ? viewType.List : viewType.Grid;\r\n    props.onViewChange(newView);\r\n  };\r\n\r\n  const handleKeyPress = (event: any) => {\r\n    if (event.key === 'Enter') {\r\n      props.onSearch(Query);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"SearchBar\">\r\n      <RadioIcons onChange={handleRadioButtonChange} />\r\n      <Input\r\n        placeholder=\"Search...\"\r\n        icon={() => (\r\n          <Button\r\n            iconOnly\r\n            icon={() => <Icon name=\"search\" styles={{ color: 'black' }} />}\r\n            primary\r\n            onClick={e => handleOnClick(e)}\r\n            styles={{ backgroundColor: 'none', border: 'none', 'box-shadow': 'none', 'border-radius': 'none' }}\r\n          />\r\n        )}\r\n        input={{\r\n          styles: { backgroundColor: 'white' },\r\n        }}\r\n        onChange={e => handleOnChange(e)}\r\n        onKeyPress={handleKeyPress}\r\n      />\r\n      <br />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { ListView } from './ListView';\r\nimport { CardView } from './CardView';\r\nimport { ICard } from '../api/api.interface';\r\n\r\nexport interface IResultState {\r\n  results: ICard[];\r\n  viewOption: string;\r\n}\r\nenum viewOption {\r\n  List = 'List',\r\n  Grid = 'Grid',\r\n}\r\nexport const Results = (props: IResultState) => {\r\n  return (\r\n    <div>\r\n      {props.viewOption === viewOption.List ? (\r\n        <ListView itemList={props.results} />\r\n      ) : (\r\n        <CardView itemList={props.results} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { List, Image, Flex, Text } from '@stardust-ui/react';\r\nimport { ICard } from '../api/api.interface';\r\nimport { launchTaskModule } from '../utils/utils';\r\n\r\nexport interface IItemListProps {\r\n  itemList: ICard[];\r\n}\r\n\r\nexport interface IProcessedItem {\r\n  key: number;\r\n  content: JSX.Element;\r\n  className: string;\r\n  onClick: () => void;\r\n}\r\n\r\nexport const ListView: React.FC<IItemListProps> = (props: IItemListProps): JSX.Element => {\r\n  // Key count to ensure unique keys for every item\r\n  let keyCount = 0;\r\n\r\n  // Function to translate items from IPreviewCard to List.Item format\r\n  const processItem = (item: ICard): IProcessedItem => {\r\n    keyCount++;\r\n    const out = {\r\n      key: keyCount,\r\n      content: (\r\n        <Flex vAlign=\"center\">\r\n          <Flex.Item styles={{ width: '32px', height: '32px' }}>\r\n            <Image src={item.preview.heroImageSrc} className=\"listItemImage\" />\r\n          </Flex.Item>\r\n          <Flex.Item>\r\n            <span dangerouslySetInnerHTML={{ __html: item.preview.title }} className=\"listItemTitle\" />\r\n          </Flex.Item>\r\n          {item.preview.subTitle ? (\r\n            <Flex.Item>\r\n              <span dangerouslySetInnerHTML={{ __html: item.preview.subTitle }} className=\"listItemDescription\" />\r\n            </Flex.Item>\r\n          ) : null}\r\n        </Flex>\r\n      ),\r\n      className: 'listItem',\r\n      onClick: (): void => launchTaskModule(item),\r\n    };\r\n    return out;\r\n  };\r\n\r\n  // Output List for processed data\r\n  // Call processing function on all items\r\n  const outList = props.itemList.map(processItem);\r\n\r\n  // Render selectable list\r\n  return (\r\n    <div>\r\n      <List selectable items={outList} />\r\n    </div>\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport { Image, Text, Header, Layout } from '@stardust-ui/react';\r\nimport { launchTaskModule } from '../utils/utils';\r\nimport { ICard } from '../api/api.interface';\r\n\r\nexport const FlexItem: React.FC<ICard> = (props: ICard): JSX.Element => {\r\n  const item = props.preview;\r\n\r\n  const keyDown = (e: React.KeyboardEvent): void => {\r\n    // Use Enter key to launch task module\r\n    if (e.key === 'Enter') {\r\n      launchTaskModule(props);\r\n    }\r\n    // Use Escape key to exit Card View container and tab to Search Bar and toggle button\r\n    else if (e.key === 'Escape') {\r\n      const element = document.getElementById('CardsContainer')!;\r\n      element.focus();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div tabIndex={0} className=\"CardBox\" onClick={(): void => launchTaskModule(props)} onKeyDown={keyDown}>\r\n      <Layout\r\n        vertical\r\n        start={\r\n          <div id=\"parent\">\r\n            <Image className=\"heroImage\" src={item.heroImageSrc} circular styles={{ width: '75px', height: '75px' }} />\r\n            <Header className=\"Title\" as=\"h4\" content={item.title} />\r\n          </div>\r\n        }\r\n        main={\r\n          <span className=\"Subtitle\">\r\n            <Text content={item.subTitle} />\r\n          </span>\r\n        }\r\n        gap=\"2px\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Box } from '@stardust-ui/react';\r\nimport { FlexItem } from './FlexItem';\r\nimport '../css/CardView.css';\r\nimport { IItemListProps } from './ListView';\r\n\r\nexport const CardView = (props: IItemListProps) => {\r\n  const itemList = [];\r\n\r\n  let tempSubTitle: string | undefined;\r\n  let tempTitle: string;\r\n\r\n  const maxTitleLength = 21;\r\n  const maxSubtitleLength = 170;\r\n\r\n  for (let i = 0; i < props.itemList.length; i++) {\r\n    const item = props.itemList[i];\r\n    item.preview.title = item.preview.title\r\n      .replace(/<[^>]*>?/gm, '')\r\n      .replace(/&nbsp;/gm, '')\r\n      .replace(/&quot;/gm, ''); // !!!!! REGEX HACK REMOVE !!!!!;\r\n\r\n    if (item.preview.subTitle) {\r\n      item.preview.subTitle = item.preview.subTitle\r\n        .replace(/<[^>]*>?/gm, '')\r\n        .replace(/&nbsp;/gm, '')\r\n        .replace(/&quot;/gm, ''); // !!!!! REGEX HACK REMOVE !!!!!;\r\n    }\r\n\r\n    tempSubTitle = item.preview.subTitle;\r\n    tempTitle = item.preview.title;\r\n\r\n    // Limiting title length to maintain consistent box sizes\r\n    if (tempTitle.length > maxTitleLength) {\r\n      const newTitle = tempTitle.substring(0, maxTitleLength).concat('...');\r\n      item.preview.title = newTitle;\r\n    }\r\n    // Also limiting subtitle length to maintain box sizes, if length of subtitle is greater than a certain value, make a substring and concat \"...\"\r\n    if (tempSubTitle && tempSubTitle.length > maxSubtitleLength) {\r\n      item.preview.subTitle = tempSubTitle.substring(0, maxSubtitleLength).concat('...');\r\n    }\r\n\r\n    // Pass new Item to FlexItem function to handle format of each box, then push each item to itemList array, a unique key is needed\r\n    const newItem = <Box key={i} content={FlexItem(item)} />;\r\n    itemList.push(newItem);\r\n  }\r\n\r\n  return (\r\n    <div className=\"CardsContainer\" id=\"CardsContainer\" tabIndex={1}>\r\n      {itemList}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { SearchBar } from './SearchBar';\r\nimport { Results } from './Results';\r\nimport { LoadIcon } from './LoadIcon';\r\nimport { ErrorView } from './ErrorView';\r\n\r\nimport { getResults } from '../api/api';\r\n\r\nimport * as microsoftTeams from '@microsoft/teams-js';\r\nimport { ICard } from '../api/api.interface';\r\nimport { isInitialRun, parseQueryResponse, getCommandId } from '../utils/utils';\r\n\r\n// handlers\r\ninterface IContentViewProps {\r\n  onThemeChange: any;\r\n}\r\n\r\nenum AppStateEnum {\r\n  Loading = 'Loading',\r\n  Error = 'Error',\r\n  Render = 'Render',\r\n}\r\n\r\nexport const ContentView = (props: IContentViewProps) => {\r\n  // state hooks\r\n  const [ViewOption, setViewOption] = React.useState('List');\r\n  const [Result, setResult] = React.useState([] as ICard[]);\r\n  const [AppState, setAppState] = React.useState(AppStateEnum.Render);\r\n  const [ErrorMessage, setErrorMessage] = React.useState('Hmm... Something went wrong...');\r\n\r\n  const onError = (error: string): any => {\r\n    setAppState(AppStateEnum.Error);\r\n    setErrorMessage(error);\r\n  };\r\n\r\n  const onResults = (response: microsoftTeams.bot.QueryResponse) => {\r\n    setResult(parseQueryResponse(response));\r\n    setAppState(AppStateEnum.Render);\r\n    microsoftTeams.appInitialization.notifySuccess();\r\n  };\r\n\r\n  const handleSearch = (query: string, viewOption: string) => {\r\n    if (query !== undefined) {\r\n      const request: microsoftTeams.bot.QueryRequest = {\r\n        query: query,\r\n        commandId: getCommandId(window.location.href),\r\n      };\r\n      getResults(request, onResults, onError);\r\n      setAppState(AppStateEnum.Loading);\r\n    }\r\n  };\r\n\r\n  const handleViewChange = (viewOption: string) => {\r\n    if (viewOption) {\r\n      setViewOption(viewOption);\r\n    }\r\n  };\r\n\r\n  // EFFECT HOOKS\r\n  React.useEffect(() => {\r\n    microsoftTeams.initialize();\r\n    microsoftTeams.appInitialization.notifyAppLoaded();\r\n    microsoftTeams.registerOnThemeChangeHandler(props.onThemeChange);\r\n    if (isInitialRun()) {\r\n      const request: microsoftTeams.bot.QueryRequest = {\r\n        query: '',\r\n        commandId: getCommandId(window.location.href),\r\n      };\r\n      getResults(request, onResults, onError);\r\n    }\r\n  }, [props.onThemeChange]);\r\n\r\n  let view = <Results results={Result} viewOption={ViewOption} />;\r\n  if (AppState === AppStateEnum.Loading) {\r\n    view = <LoadIcon isLoading={true} />;\r\n  } else if (AppState === AppStateEnum.Error) {\r\n    view = <ErrorView message={ErrorMessage} />;\r\n  }\r\n  return (\r\n    <div>\r\n      <SearchBar onSearch={handleSearch} onViewChange={handleViewChange} />\r\n      {view}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Loader } from '@stardust-ui/react';\r\nimport '../css/LoadIcon.css';\r\n\r\nexport const LoadIcon = (props: any) => {\r\n  return <div className=\"loadIcon\"> {props.isLoading ? <Loader /> : null} </div>;\r\n};\r\n","import React from 'react';\r\nimport { Image, Text } from '@stardust-ui/react';\r\nimport '../css/ErrorView.css';\r\ninterface IErrorViewProps {\r\n  message: string;\r\n}\r\n\r\nexport const ErrorView = (props: IErrorViewProps) => {\r\n  return (\r\n    <div className=\"ErrorView\">\r\n      <Image\r\n        styles={{\r\n          maxWidth: '37%',\r\n          margin: '0 auto',\r\n          display: 'block',\r\n          textAlign: 'center',\r\n          marginBottom: '10px',\r\n        }}\r\n        src=\"error.svg\"\r\n      />\r\n      <Text size=\"larger\" content={'Hmm... Something went wrong...'} />\r\n    </div>\r\n  );\r\n};\r\n","import { themes, ThemeInput } from '@stardust-ui/react';\r\nimport * as queryString from 'query-string';\r\n\r\nenum themeTypes {\r\n  Dark = 'dark',\r\n  Default = 'default',\r\n  Contrast = 'contrast',\r\n}\r\n\r\n// gets theme name from url params\r\nexport const getThemeFromURL = (iUrl: string): string => {\r\n  const url = queryString.parseUrl(iUrl);\r\n\r\n  const themeString: any = url.query.theme;\r\n\r\n  if (!themeString) {\r\n    return 'default';\r\n  }\r\n  return themeString;\r\n};\r\n\r\n// gets theme type from string\r\nexport const getTheme = (theme: string): ThemeInput => {\r\n  const newTheme: ThemeInput = themes.teams;\r\n\r\n  switch (theme) {\r\n    case themeTypes.Contrast:\r\n      return themes.teamsHighContrast;\r\n    case themeTypes.Dark:\r\n      return themes.teamsDark;\r\n  }\r\n\r\n  return newTheme;\r\n};\r\n","import React from 'react';\r\nimport './css/App.css';\r\n\r\nimport { getFrameContext } from './utils/utils';\r\nimport { SettingsView } from './components/SettingsView';\r\nimport { ContentView } from './components/ContentView';\r\n\r\ninterface IAppProps {\r\n  onThemeChange: (theme: string) => void;\r\n}\r\n\r\nexport const App = (props: IAppProps) => {\r\n  // CONSTANTS\r\n  const url: string = window.location.href;\r\n  const frameContext = getFrameContext(url);\r\n  if (frameContext === 'settings') {\r\n    return (\r\n      <div>\r\n        <SettingsView />\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <ContentView onThemeChange={props.onThemeChange} />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { ProviderWrapper } from './ProviderWrapper';\r\n\r\nReactDOM.render(<ProviderWrapper />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport { Provider } from '@stardust-ui/react';\r\nimport App from './App';\r\nimport * as themeUtils from './utils/themeUtils';\r\n\r\nexport const ProviderWrapper: React.FC = (): JSX.Element => {\r\n  // CONSTANT\r\n  const initialTheme = themeUtils.getTheme(themeUtils.getThemeFromURL(window.location.href));\r\n  // HOOKS\r\n  const [Theme, setTheme] = React.useState(initialTheme);\r\n\r\n  // HANDLERS\r\n  const handleThemeChange = (theme: string): void => {\r\n    setTheme(themeUtils.getTheme(theme));\r\n  };\r\n\r\n  return (\r\n    <Provider theme={Theme}>\r\n      <App onThemeChange={handleThemeChange} />\r\n    </Provider>\r\n  );\r\n};\r\n"],"sourceRoot":""}