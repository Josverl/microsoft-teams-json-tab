{"version":3,"sources":["serviceWorker.ts","components/RadioIcons.tsx","utils/utils.ts","api/api.ts","components/SettingsView.tsx","components/SearchBar.tsx","components/Results.tsx","components/Overflow.tsx","components/ListView.tsx","components/CardView.tsx","components/ContentView.tsx","components/LoadIcon.tsx","components/EmptyScreenView.tsx","components/ErrorView.tsx","components/AuthView.tsx","utils/themeUtils.ts","App.tsx","index.tsx","ProviderWrapper.tsx"],"names":["Boolean","window","location","hostname","match","viewType","submitHandler","err","result","console","log","concat","launchTaskModule","card","content","type","taskInfo","height","undefined","width","title","preview","url","completionBotId","botId","microsoftTeams","startTask","alert","getCommandId","iUrl","queryString","query","commandId","stripHTML","html","div","document","createElement","innerHTML","textContent","innerText","processOverflowAction","action","id","enabled","includes","getResults","request","onResults","onError","sendQuery","SettingsView","_React$useState","React","_React$useState2","Object","slicedToArray","CommandList","setCommandList","_React$useState3","_React$useState4","setCommandSelected","_React$useState5","_React$useState6","ContentUrl","setContentUrl","_React$useState7","_React$useState8","TabName","setTabName","error","onGetCommandResponse","response","notifySuccess","onCommandSelection","command","initialRun","setValidityState","saveHandler","saveEvent","setSettings","entityId","contentUrl","suggestedDisplayName","notifyAppLoaded","registerOnSaveHandler","onBotGetCommandResponse","getSupportedCommands","react","Text","size","Input","fluid","placeholder","onChange","event","target","value","style","marginTop","Dropdown","items","map","noResultsMessage","onSelectedChange","res","find","item","RadioIcons","props","handleChange","key","icon","name","outline","aria-label","onClick","e","List","Grid","react_default","a","Flex","styles","vAlign","Menu","defaultActiveIndex","accessibility","menuAsToolbarBehavior","iconOnly","viewOption","SearchBar","useState","Query","setQuery","onSearchDebounced","debounce","onSearch","gap","Item","push","RadioIcons_RadioIcons","view","newView","onViewChange","margin","input","newQuery","currentTarget","length","onKeyPress","Overflow","indicator","menu","actions","disabled","open","ListView","keyCount","outList","itemList","fill","Image","src","heroImageSrc","className","shrink","grow","truncated","weight","subTitle","text","Overflow_Overflow","selectable","CardView","calculateColumns","Math","floor","innerWidth","Columns","setColumns","updateColumn","useEffect","addEventListener","removeEventListener","columns","gridBehavior","Segment","data-is-focusable","padding","borderRadius","boxShadow","position","right","top","column","textAlign","display","WebkitBoxOrient","WebkitLineClamp","overflow","AppStateEnum","Results","ListView_ListView","results","CardView_CardView","LoadIcon","isLoading","Loader","EmptyScreenView","button","buttonText","Button","primary","message","imageSrc","ErrorView","EmptyScreenView_EmptyScreenView","AuthView","ErrorMessage","setErrorMessage","onAuthSuccess","onAuthenticated","data","ResponseType","onAuthFailure","authParams","currentQuery","authenticate","themeTypes","ContentView","ViewOption","setViewOption","Result","setResult","Render","AppState","setAppState","_React$useState9","_React$useState10","AuthData","setAuthData","_React$useState11","href","_React$useState12","Error","Auth","authResponse","resultsResponse","attachments","botID","previewRawPayload","hasOwnProperty","images","contentType","subtitle","processQueryResponse","parseQueryResponse","handleIfNoResults","NoResults","onThemeChange","isInitialRun","Results_Results","LoadIcon_LoadIcon","ErrorView_ErrorView","AuthView_AuthView","customClass","SearchBar_SearchBar","Loading","ContentViewWrapper","createComponent","displayName","render","_ref","stardust","classes","ContentView_ContentView","root","App","frameContext","SettingsView_SettingsView","getTheme","theme","customTheme","Contrast","componentVariables","backgroundColor","colorScheme","default","background2","ListItem","_ref2","background","hoverBackgroundColor","backgroundHover1","hoverTextColor","foregroundFocus","activeBackgroundColor","borderActive","activeTextColor","_ref3","_ref4","inputBackgroundColor","componentStyles","_ref5","variables","_ref6",":hover","color",":active",":focus","_ref7","_ref8","mergeThemes","themes","teamsHighContrast","Dark","teamsDark","teams","ReactDOM","initialTheme","themeUtils","themeString","Theme","setTheme","Provider","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45cfd317.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ninterface Config {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Button, Flex, Menu, menuAsToolbarBehavior } from '@stardust-ui/react';\r\n\r\nenum viewType {\r\n  List = 'List',\r\n  Grid = 'Grid',\r\n}\r\n\r\ninterface IRadioIconsProps {\r\n  onChange: (view: string) => void;\r\n  styles?: object;\r\n}\r\n\r\nexport const RadioIcons: React.FC<IRadioIconsProps> = (props: IRadioIconsProps): JSX.Element => {\r\n  // HANDLERS\r\n  const handleChange = (event: React.SyntheticEvent, items: { value: viewType }): void => {\r\n    props.onChange(items.value);\r\n  };\r\n\r\n  const items = [\r\n    {\r\n      key: 'list',\r\n      icon: {\r\n        name: 'menu',\r\n        outline: true,\r\n      },\r\n      'aria-label': 'List View',\r\n      onClick: (e: React.SyntheticEvent): void => handleChange(e, { value: viewType.List }),\r\n    },\r\n    {\r\n      key: 'card',\r\n      icon: {\r\n        name: 'gallery',\r\n        outline: true,\r\n      },\r\n      'aria-label': 'Card View',\r\n      onClick: (e: React.SyntheticEvent): void => handleChange(e, { value: viewType.Grid }),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Flex styles={props.styles} vAlign=\"center\">\r\n      <Menu items={items} defaultActiveIndex={0} accessibility={menuAsToolbarBehavior} iconOnly />\r\n    </Flex>\r\n  );\r\n};\r\n","import * as microsoftTeams from '@microsoft/teams-js';\r\nimport { ICard, OverflowAction } from '../api/api.interface';\r\nimport * as queryString from 'query-string';\r\nimport { ISubmitAction, IOpenUrlAction, IShowCardAction } from 'adaptivecards/lib/schema';\r\n\r\n// gets frame context from url\r\nexport const submitHandler = (err: string, result: string): void => {\r\n  console.log(`Err value: ${err}, result value : ${result}`);\r\n};\r\n\r\nexport const launchTaskModule = (card: ICard): void => {\r\n  // Only open task module if card is an Adaptive Card\r\n  if (card.content.type && card.content.type === 'AdaptiveCard') {\r\n    const taskInfo: microsoftTeams.TaskInfo = {\r\n      height: undefined,\r\n      width: 600,\r\n      title: card.preview.title,\r\n      url: undefined,\r\n      card: card.content,\r\n      completionBotId: card.botId,\r\n    };\r\n    microsoftTeams.tasks.startTask(taskInfo, submitHandler);\r\n  } else {\r\n    alert(`Could not load data, card type is not supported.`);\r\n  }\r\n};\r\n\r\nexport const getCommandId = (iUrl: string): string => {\r\n  const url = queryString.parseUrl(iUrl);\r\n  return url.query.commandId as string;\r\n};\r\n\r\nexport const isInitialRun = (): boolean => {\r\n  const url = queryString.parseUrl(window.location.href);\r\n  return url.query.initialRun != null && url.query.initialRun == 'true';\r\n};\r\n\r\n// gets frame context from url\r\nexport const getFrameContext = (iUrl: string): string => {\r\n  const url = queryString.parseUrl(iUrl);\r\n  return url.query.frameContext as string;\r\n};\r\n\r\nexport const processQueryResponse = (item: microsoftTeams.bot.Attachment, botID: string): ICard => {\r\n  let url = '';\r\n  if (item.previewRawPayload.content.hasOwnProperty('images')) {\r\n    if (\r\n      item.previewRawPayload.content.images &&\r\n      item.previewRawPayload.content.images[0] &&\r\n      item.previewRawPayload.content.images[0].url\r\n    )\r\n      url = item.previewRawPayload.content.images[0].url;\r\n  }\r\n  const out: ICard = {\r\n    contentType: 'AdaptiveCard',\r\n    content: item.card.content,\r\n    preview: {\r\n      title: item.previewRawPayload.content.title,\r\n      subTitle: item.previewRawPayload.content.subtitle,\r\n      text: item.previewRawPayload.content.text,\r\n      heroImageSrc: url,\r\n    },\r\n    botId: botID,\r\n  };\r\n  return out;\r\n};\r\n\r\n// converts a bot response to ICard\r\nexport const parseQueryResponse = (response: microsoftTeams.bot.Results): ICard[] => {\r\n  if (response && response.attachments) {\r\n    return response.attachments.map(\r\n      (item: microsoftTeams.bot.Attachment): ICard => processQueryResponse(item, response.botId),\r\n    );\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\n// Function to strip HTML tags from data\r\nexport const stripHTML = (html: string): string => {\r\n  let div = document.createElement('div');\r\n  div.innerHTML = html;\r\n  return div.textContent || div.innerText || '';\r\n};\r\n\r\nexport const processOverflowAction = (action: ISubmitAction | IOpenUrlAction | IShowCardAction): OverflowAction => {\r\n  const supportedOverflowActions: string[] = ['Action.OpenUrl'];\r\n  return {\r\n    id: action.id,\r\n    type: action.type,\r\n    title: action.title,\r\n    enabled: supportedOverflowActions.includes(action.type),\r\n    url: action.type === 'Action.OpenUrl' ? action.url : undefined,\r\n  };\r\n};\r\n\r\nexport const getOverflowActions = (card: ICard): OverflowAction[] => {\r\n  return card.content.actions.map(processOverflowAction);\r\n};\r\n","import * as microsoftTeams from '@microsoft/teams-js';\r\nimport * as adaptiveCards from 'adaptivecards';\r\nimport { ISubmitAction, IOpenUrlAction, IShowCardAction } from 'adaptivecards/lib/schema';\r\n\r\nexport const getResults = (\r\n  request: microsoftTeams.bot.QueryRequest,\r\n  onResults: (response: microsoftTeams.bot.QueryResponse) => void,\r\n  onError: (error: string) => void,\r\n): void => {\r\n  microsoftTeams.bot.sendQuery(request, onResults, onError);\r\n};\r\n\r\nexport const getSupportedCommands = (\r\n  onBotGetCommandResponse: (response: microsoftTeams.bot.Command[]) => void,\r\n  onError: (error: string) => void,\r\n): void => {\r\n  microsoftTeams.bot.getSupportedCommands(onBotGetCommandResponse, onError);\r\n};\r\n\r\nexport const removeUnsupportedActions = (card: adaptiveCards.IAdaptiveCard): adaptiveCards.IAdaptiveCard => {\r\n  const SupportedActions: string[] = ['Action.OpenUrl', 'Action.Submit', 'Action.ShowCard', 'invoke', 'signin'];\r\n  let newCard = card;\r\n  if (card.actions) {\r\n    newCard.actions = card.actions.filter((item: ISubmitAction | IOpenUrlAction | IShowCardAction): boolean => {\r\n      return SupportedActions.includes(item.type);\r\n    });\r\n  }\r\n  return newCard;\r\n};\r\n","import * as React from 'react';\r\nimport { Text, Input, Dropdown } from '@stardust-ui/react';\r\nimport * as microsoftTeams from '@microsoft/teams-js';\r\nimport { getSupportedCommands } from '../api/api';\r\n\r\nexport const SettingsView: React.FC = (): JSX.Element => {\r\n  // STATE HOOKS\r\n  const [CommandList, setCommandList] = React.useState([] as microsoftTeams.bot.Command[]);\r\n  const [CommandSelected, setCommandSelected] = React.useState('');\r\n  const [ContentUrl, setContentUrl] = React.useState('');\r\n  const [TabName, setTabName] = React.useState('JSONTabDefault');\r\n  // HANDLERS\r\n  const onError = (error: string): void => {\r\n    alert(error);\r\n  };\r\n\r\n  const onGetCommandResponse = (response: microsoftTeams.bot.Command[]): void => {\r\n    setCommandList(response);\r\n    microsoftTeams.appInitialization.notifySuccess();\r\n  };\r\n\r\n  const handleNameChange = (event: any): void => {\r\n    setTabName(event.target.value);\r\n  };\r\n\r\n  const handleCommandChange = (event: any, res: any): void => {\r\n    const command = CommandList.find(\r\n      (item: microsoftTeams.bot.Command): boolean => item.title === res.value,\r\n    ) as microsoftTeams.bot.Command;\r\n    if (command) {\r\n      onCommandSelection(command);\r\n    }\r\n  };\r\n\r\n  const onCommandSelection = (command: any): void => {\r\n    setCommandSelected(command.id);\r\n    if (command.initialRun) {\r\n      setContentUrl(\r\n        `https://microsoft-teams-json-tab.azurewebsites.net?theme={theme}&frameContext=content&commandId=${command.id}&initialRun=${command.initialRun}`,\r\n      );\r\n    } else {\r\n      setContentUrl(\r\n        `https://microsoft-teams-json-tab.azurewebsites.net?theme={theme}&frameContext=content&commandId=${command.id}`,\r\n      );\r\n    }\r\n    microsoftTeams.settings.setValidityState(true);\r\n  };\r\n\r\n  const saveHandler = (saveEvent: microsoftTeams.settings.SaveEvent): void => {\r\n    microsoftTeams.settings.setSettings({\r\n      entityId: 'JSONTab',\r\n      contentUrl: ContentUrl,\r\n      suggestedDisplayName: TabName,\r\n    });\r\n    saveEvent.notifySuccess();\r\n  };\r\n\r\n  // EFFECT HOOKS\r\n  React.useEffect((): void => {\r\n    microsoftTeams.initialize();\r\n    microsoftTeams.appInitialization.notifyAppLoaded();\r\n    microsoftTeams.settings.registerOnSaveHandler(saveHandler);\r\n    getSupportedCommands(onGetCommandResponse, onError);\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Text size={'medium'} content={'Name your tab'} />\r\n      </div>\r\n      <Input fluid placeholder={'Tab name'} onChange={handleNameChange} />\r\n      <div style={{ marginTop: '16px' }}>\r\n        <Text size={'medium'} content={\"Select the command you'd like query your bot with\"} />\r\n      </div>\r\n      <Dropdown\r\n        fluid\r\n        items={CommandList.map((command: microsoftTeams.bot.Command): string => {\r\n          return command.title;\r\n        })}\r\n        noResultsMessage=\"We couldn't find any matches.\"\r\n        onSelectedChange={handleCommandChange}\r\n        placeholder=\"Select the command\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Input, Button, Icon, Image, Flex, Header } from '@stardust-ui/react';\r\nimport { RadioIcons } from './RadioIcons';\r\nimport { debounce } from 'lodash';\r\n\r\nenum viewType {\r\n  List = 'List',\r\n  Grid = 'Grid',\r\n}\r\n\r\ninterface ISearchBarProps {\r\n  onSearch: (query: string) => void;\r\n  onViewChange: (view: viewType) => void;\r\n}\r\n\r\nexport const SearchBar: React.FC<ISearchBarProps> = (props: ISearchBarProps): JSX.Element => {\r\n  // STATE HOOKS\r\n  const [Query, setQuery] = React.useState('');\r\n\r\n  //DEBOUNCED QUERY\r\n  const onSearchDebounced = debounce(props.onSearch, 300);\r\n\r\n  // HANDLERS\r\n  const handleOnChange = (event: React.SyntheticEvent<HTMLElement>): void => {\r\n    const newQuery = (event as React.SyntheticEvent<HTMLInputElement>).currentTarget.value;\r\n    if ((event as React.SyntheticEvent<HTMLInputElement>).currentTarget.value.length >= 1) {\r\n      onSearchDebounced(newQuery);\r\n    } else {\r\n      onSearchDebounced('');\r\n    }\r\n    setQuery(newQuery);\r\n  };\r\n\r\n  const handleRadioButtonChange = (view: string): void => {\r\n    const newView = view === viewType.List ? viewType.List : viewType.Grid;\r\n    props.onViewChange(newView);\r\n  };\r\n\r\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>): void => {\r\n    if (event.key === 'Enter') {\r\n      props.onSearch(Query);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Flex gap=\"gap.small\" vAlign=\"center\">\r\n      <Flex.Item push>\r\n        <Flex>\r\n          <RadioIcons onChange={handleRadioButtonChange} styles={{ margin: '0 0 16px 0' }} />\r\n        </Flex>\r\n      </Flex.Item>\r\n      <Input\r\n        placeholder=\"Search\"\r\n        icon={{\r\n          name: 'search',\r\n          outline: true,\r\n        }}\r\n        input={{\r\n          styles: { width: '250px' },\r\n        }}\r\n        styles={{ margin: '0px 0px 16px 0px' }}\r\n        onChange={handleOnChange}\r\n        onKeyPress={handleKeyPress}\r\n      />\r\n    </Flex>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { ListView } from './ListView';\r\nimport { CardView } from './CardView';\r\nimport { ICard } from '../api/api.interface';\r\n\r\nexport interface IResultState {\r\n  results: ICard[];\r\n  viewOption: string;\r\n}\r\nenum viewOption {\r\n  List = 'List',\r\n  Grid = 'Grid',\r\n}\r\nexport const Results: React.FC<IResultState> = (props: IResultState): JSX.Element => {\r\n  return (\r\n    <div>\r\n      {props.viewOption === viewOption.List ? (\r\n        <ListView itemList={props.results} />\r\n      ) : (\r\n        <CardView itemList={props.results} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Menu } from '@stardust-ui/react';\r\nimport { ICard, OverflowAction } from '../api/api.interface';\r\nimport { getOverflowActions } from '../utils/utils';\r\n\r\nexport interface OverflowProps {\r\n  card: ICard;\r\n  styles?: object;\r\n  title?: string;\r\n}\r\n\r\nexport const Overflow: React.FC<OverflowProps> = (props: OverflowProps): JSX.Element => {\r\n  const displayActions = (action: OverflowAction) => ({\r\n    key: action.id,\r\n    content: action.title,\r\n    disabled: !action.enabled,\r\n    onClick: action.url ? () => window.open(action.url) : undefined,\r\n  });\r\n\r\n  const actions = getOverflowActions(props.card);\r\n\r\n  const items = [\r\n    {\r\n      key: 'more',\r\n      icon: {\r\n        name: 'more',\r\n        outline: true,\r\n      },\r\n      indicator: false,\r\n      menu: {\r\n        items: actions.map(displayActions),\r\n      },\r\n    },\r\n  ];\r\n\r\n  return <Menu iconOnly items={items} styles={props.styles} title={props.title} />;\r\n};\r\n","import React from 'react';\r\nimport { List, Image, Flex, Text, Icon, Menu, menuAsToolbarBehavior } from '@stardust-ui/react';\r\nimport { ICard } from '../api/api.interface';\r\nimport { launchTaskModule, stripHTML } from '../utils/utils';\r\nimport { Overflow } from './Overflow';\r\n\r\nexport interface IItemListProps {\r\n  itemList: ICard[];\r\n}\r\n\r\nexport interface IProcessedItem {\r\n  key: number;\r\n  content: JSX.Element;\r\n  onClick: () => void;\r\n}\r\n\r\nexport const ListView: React.FC<IItemListProps> = (props: IItemListProps): JSX.Element => {\r\n  // Key count to ensure unique keys for every item\r\n  let keyCount = 0;\r\n\r\n  // Function to translate items from IPreviewCard to List.Item format\r\n  const processItem = (item: ICard): IProcessedItem => {\r\n    keyCount++;\r\n    const out = {\r\n      key: keyCount,\r\n      content: (\r\n        <Flex vAlign=\"center\" fill gap=\"gap.small\">\r\n          <Flex.Item styles={{ width: '32px', height: '100%' }}>\r\n            <Image src={item.preview.heroImageSrc} className=\"listItemImage\" />\r\n          </Flex.Item>\r\n          <Flex.Item size=\"size.small\" shrink={0} grow={1}>\r\n            <Text\r\n              truncated\r\n              size=\"medium\"\r\n              weight=\"semibold\"\r\n              content={stripHTML(item.preview.title)}\r\n              title={stripHTML(item.preview.title)}\r\n            />\r\n          </Flex.Item>\r\n          {item.preview.subTitle ? (\r\n            <Flex.Item size=\"size.medium\" shrink={1} grow={0}>\r\n              <Text\r\n                truncated\r\n                size=\"medium\"\r\n                weight=\"regular\"\r\n                content={stripHTML(item.preview.subTitle)}\r\n                title={stripHTML(item.preview.subTitle)}\r\n              />\r\n            </Flex.Item>\r\n          ) : null}\r\n          {item.preview.text ? (\r\n            <Flex.Item size=\"size.half\" shrink={3} grow={0} aria-label={stripHTML(item.preview.title)}>\r\n              <Text\r\n                truncated\r\n                size=\"medium\"\r\n                weight=\"regular\"\r\n                content={stripHTML(item.preview.text)}\r\n                title={stripHTML(item.preview.text)}\r\n              />\r\n            </Flex.Item>\r\n          ) : null}\r\n          <Flex.Item shrink={0}>\r\n            <Overflow card={item} title=\"More Options\" />\r\n          </Flex.Item>\r\n        </Flex>\r\n      ),\r\n      styles: { margin: '2px 2px 0 0' },\r\n      onClick: (): void => launchTaskModule(item),\r\n    };\r\n    return out;\r\n  };\r\n\r\n  // Output List for processed data\r\n  // Call processing function on all items\r\n  const outList = props.itemList.map(processItem);\r\n\r\n  // Render selectable list\r\n  return (\r\n    <div>\r\n      <List selectable items={outList} />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Flex, Grid, Segment, Image, Text, gridBehavior } from '@stardust-ui/react';\r\nimport { IItemListProps } from './ListView';\r\nimport { ICard } from '../api/api.interface';\r\nimport { stripHTML, launchTaskModule } from '../utils/utils';\r\nimport '../css/App.css';\r\nimport { Overflow } from './Overflow';\r\n\r\nexport const CardView: React.FC<IItemListProps> = (props: IItemListProps): JSX.Element => {\r\n  // CONSTANTS\r\n  const minimumCardWidth = 278; //px\r\n\r\n  // HELPER FUNCTION\r\n  const calculateColumns = (width: number) => {\r\n    return Math.floor(width / minimumCardWidth);\r\n  };\r\n\r\n  // STATE HOOKS\r\n  const [Columns, setColumns] = React.useState(calculateColumns(window.innerWidth));\r\n\r\n  // HANDLERS\r\n  const updateColumn = () => {\r\n    setColumns(calculateColumns(window.innerWidth));\r\n  };\r\n\r\n  // EFFECT HOOKS\r\n  React.useEffect(() => {\r\n    window.addEventListener('resize', updateColumn);\r\n    return () => {\r\n      window.removeEventListener('resize', updateColumn);\r\n    };\r\n  }, [Columns]);\r\n\r\n  // ICARD PROCESSOR\r\n  const processItem = (item: ICard): JSX.Element => {\r\n    return (\r\n      <Segment\r\n        data-is-focusable=\"true\"\r\n        styles={{\r\n          margin: '0 0 16px 12px',\r\n          height: '146px',\r\n          padding: '20px 20px 20px 20px',\r\n          borderRadius: '3px',\r\n          boxShadow: '0px 2px 4px -0.75px rgba(0,0,0,0.1)',\r\n          position: 'relative',\r\n        }}\r\n        onClick={(): void => launchTaskModule(item)}\r\n        onKeyPress={(e: React.KeyboardEvent<HTMLDivElement>) => {\r\n          if (e.key === 'Enter') {\r\n            launchTaskModule(item);\r\n          }\r\n        }}\r\n      >\r\n        <Overflow card={item} styles={{ position: 'absolute', right: '0', top: '0', margin: '0 8px 0px 0px' }} />\r\n        <Flex gap=\"gap.small\">\r\n          <Flex.Item>\r\n            <Image\r\n              styles={{ width: '48px', height: '100%' }}\r\n              src={item.preview.heroImageSrc}\r\n              className=\"listItemImage\"\r\n            />\r\n          </Flex.Item>\r\n          <Flex.Item size=\"size.half\" grow>\r\n            <Flex column styles={{ textAlign: 'left' }}>\r\n              <Flex.Item\r\n                styles={{ display: '-webkit-box', WebkitBoxOrient: 'vertical', WebkitLineClamp: 1, overflow: 'hidden' }}\r\n              >\r\n                <Text\r\n                  content={stripHTML(item.preview.title)}\r\n                  styles={{ margin: '0 0 2px 0' }}\r\n                  size=\"medium\"\r\n                  weight=\"semibold\"\r\n                  title={stripHTML(item.preview.title)}\r\n                />\r\n              </Flex.Item>\r\n              {item.preview.subTitle ? (\r\n                <Flex.Item\r\n                  styles={{\r\n                    display: '-webkit-box',\r\n                    WebkitBoxOrient: 'vertical',\r\n                    WebkitLineClamp: 1,\r\n                    overflow: 'hidden',\r\n                  }}\r\n                >\r\n                  <Text\r\n                    content={stripHTML(item.preview.subTitle)}\r\n                    styles={{ margin: '0 0 2px 0' }}\r\n                    weight=\"regular\"\r\n                    size=\"medium\"\r\n                    title={stripHTML(item.preview.subTitle)}\r\n                  />\r\n                </Flex.Item>\r\n              ) : null}\r\n              {item.preview.text ? (\r\n                <Flex.Item\r\n                  grow\r\n                  size=\"size.half\"\r\n                  styles={{\r\n                    display: '-webkit-box',\r\n                    WebkitBoxOrient: 'vertical',\r\n                    WebkitLineClamp: 3,\r\n                    overflow: 'hidden',\r\n                  }}\r\n                >\r\n                  <Text\r\n                    content={stripHTML(item.preview.text)}\r\n                    weight=\"regular\"\r\n                    size=\"medium\"\r\n                    title={stripHTML(item.preview.text)}\r\n                  />\r\n                </Flex.Item>\r\n              ) : null}\r\n            </Flex>\r\n          </Flex.Item>\r\n        </Flex>\r\n      </Segment>\r\n    );\r\n  };\r\n\r\n  // RENDER\r\n  return (\r\n    <div style={{ margin: '0 0 0 8px' }}>\r\n      <Grid columns={Columns} accessibility={gridBehavior} content={props.itemList.map(processItem)} />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { SearchBar } from './SearchBar';\r\nimport { Results } from './Results';\r\nimport { LoadIcon } from './LoadIcon';\r\nimport { ErrorView } from './ErrorView';\r\nimport { AuthView } from './AuthView';\r\n\r\nimport { getResults } from '../api/api';\r\n\r\nimport * as microsoftTeams from '@microsoft/teams-js';\r\nimport { ICard } from '../api/api.interface';\r\nimport { isInitialRun, parseQueryResponse, getCommandId } from '../utils/utils';\r\nimport { createComponent } from '@stardust-ui/react';\r\nimport { EmptyScreenView } from './EmptyScreenView';\r\n\r\n// handlers\r\nexport interface IContentViewProps {\r\n  onThemeChange: (theme: string) => void;\r\n  customClass: string;\r\n}\r\n\r\nenum AppStateEnum {\r\n  Loading = 'Loading',\r\n  Error = 'Error',\r\n  Render = 'Render',\r\n  Auth = 'Auth',\r\n  NoResults = 'NoResults',\r\n}\r\n\r\nexport const ContentView: React.FC<IContentViewProps> = (props: IContentViewProps): JSX.Element => {\r\n  // state hooks\r\n  const [ViewOption, setViewOption] = React.useState('List');\r\n  const [Result, setResult] = React.useState([] as ICard[]);\r\n  const [AppState, setAppState] = React.useState(AppStateEnum.Render);\r\n  const [ErrorMessage, setErrorMessage] = React.useState('');\r\n  const [AuthData, setAuthData] = React.useState({ url: '', title: 'Sign in' });\r\n  const [Query, setQuery] = React.useState({ query: '', commandId: getCommandId(window.location.href) });\r\n\r\n  const onError = (error: string): void => {\r\n    setAppState(AppStateEnum.Error);\r\n    setErrorMessage(error);\r\n  };\r\n\r\n  const onResults = (response: microsoftTeams.bot.QueryResponse): void => {\r\n    if (response.type === microsoftTeams.bot.ResponseType.Auth) {\r\n      const authResponse: microsoftTeams.bot.Auth = response.data as microsoftTeams.bot.Auth;\r\n      setAuthData({ url: authResponse.url, title: authResponse.title });\r\n      setAppState(AppStateEnum.Auth);\r\n    } else {\r\n      const resultsResponse: microsoftTeams.bot.Results = response.data as microsoftTeams.bot.Results;\r\n      setResult(parseQueryResponse(resultsResponse));\r\n      handleIfNoResults(resultsResponse.attachments);\r\n      microsoftTeams.appInitialization.notifySuccess();\r\n    }\r\n  };\r\n\r\n  const handleSearch = (query: string): void => {\r\n    if (query !== undefined) {\r\n      setQuery({ query: query, commandId: getCommandId(window.location.href) }); // keep query in state for auth\r\n      getResults(Query, onResults, onError);\r\n      setAppState(AppStateEnum.Loading);\r\n    }\r\n  };\r\n\r\n  const handleViewChange = (viewOption: string): void => {\r\n    if (viewOption) {\r\n      setViewOption(viewOption);\r\n    }\r\n  };\r\n\r\n  const handleIfNoResults = (response: microsoftTeams.bot.Attachment[]): void => {\r\n    if (response.length === 0) {\r\n      setAppState(AppStateEnum.NoResults);\r\n    } else {\r\n      setAppState(AppStateEnum.Render);\r\n    }\r\n  };\r\n\r\n  // EFFECT HOOKS\r\n  React.useEffect((): void => {\r\n    microsoftTeams.initialize();\r\n    microsoftTeams.appInitialization.notifyAppLoaded();\r\n    microsoftTeams.registerOnThemeChangeHandler(props.onThemeChange);\r\n    if (isInitialRun()) {\r\n      const request: microsoftTeams.bot.QueryRequest = {\r\n        query: '',\r\n        commandId: getCommandId(window.location.href),\r\n      };\r\n      getResults(request, onResults, onError);\r\n    }\r\n  }, [props.onThemeChange]);\r\n\r\n  let view = <Results results={Result} viewOption={ViewOption} />;\r\n  switch (AppState) {\r\n    case 'Loading':\r\n      view = <LoadIcon isLoading={true} />;\r\n      break;\r\n    case 'Error':\r\n      view = <ErrorView message={ErrorMessage} />;\r\n      break;\r\n    case 'Auth':\r\n      view = <AuthView title={AuthData.title} url={AuthData.url} currentQuery={Query} onAuthenticated={onResults} />;\r\n      break;\r\n    case 'NoResults':\r\n      view = <EmptyScreenView title=\"We couldn't find any results\" subTitle=\"Search, or try refining your query!\" />;\r\n      break;\r\n  }\r\n  return (\r\n    <div className={props.customClass}>\r\n      <SearchBar onSearch={handleSearch} onViewChange={handleViewChange} />\r\n      {view}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const ContentViewWrapper = createComponent({\r\n  displayName: 'ContentViewWrapper',\r\n  render: ({ stardust, onThemeChange }) => {\r\n    const { classes } = stardust;\r\n    return <ContentView customClass={classes.root} onThemeChange={onThemeChange} />;\r\n  },\r\n});\r\n","import React from 'react';\r\nimport { Loader } from '@stardust-ui/react';\r\nimport '../css/LoadIcon.css';\r\n\r\nexport interface LoadIconProps {\r\n  isLoading: boolean;\r\n}\r\n\r\nexport const LoadIcon: React.FC<LoadIconProps> = (props: LoadIconProps): JSX.Element => {\r\n  return <div className=\"loadIcon\"> {props.isLoading ? <Loader /> : null} </div>;\r\n};\r\n","import React from 'react';\r\nimport { Text, Image, Button } from '@stardust-ui/react';\r\nimport '../css/EmptyScreenView.css';\r\n\r\ninterface IEmptyScreenView {\r\n  title: string;\r\n  subTitle: string;\r\n  imageSrc?: string;\r\n  message?: string;\r\n  buttonText?: string;\r\n  onClick?: any;\r\n}\r\n\r\nexport const EmptyScreenView: React.FC<IEmptyScreenView> = (props: IEmptyScreenView): JSX.Element => {\r\n  let button: any = '';\r\n  if (props.buttonText && props.onClick) {\r\n    button = <Button id=\"button\" content={props.buttonText} onClick={props.onClick} primary />;\r\n  }\r\n  let message = '';\r\n  if (props.message) {\r\n    message = props.message;\r\n  }\r\n  let imageSrc = 'error.svg';\r\n  if (props.imageSrc) {\r\n    imageSrc = props.imageSrc;\r\n  }\r\n\r\n  return (\r\n    <div className=\"EmptyScreenView\">\r\n      <Image id=\"image\" src={imageSrc} />\r\n      <div id=\"textblock\">\r\n        <Text id=\"title\" size={'large'} weight=\"bold\" content={props.title} />\r\n        <Text styles={{ marginTop: '8px' }} size={'medium'} content={<p>{props.subTitle}</p>} />\r\n        <Text id=\"error\" size=\"small\" content={message} />\r\n      </div>\r\n      {button}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { EmptyScreenView } from './EmptyScreenView';\r\ninterface IErrorViewProps {\r\n  message: string;\r\n}\r\n\r\nexport const ErrorView: React.FC<IErrorViewProps> = (props: IErrorViewProps): JSX.Element => {\r\n  return (\r\n    <EmptyScreenView\r\n      title=\"There was a problem communicating with the bot\"\r\n      subTitle=\"You may not be able to use this feature\"\r\n      message={props.message}\r\n    />\r\n  );\r\n};\r\n","import React from 'react';\r\nimport * as microsoftTeams from '@microsoft/teams-js';\r\nimport { EmptyScreenView } from './EmptyScreenView';\r\n\r\ninterface IAuthViewProps {\r\n  title: string;\r\n  url: string;\r\n  currentQuery: microsoftTeams.bot.QueryRequest;\r\n  onAuthenticated: (results: microsoftTeams.bot.QueryResponse) => void;\r\n}\r\n\r\nexport const AuthView: React.FC<IAuthViewProps> = (props: IAuthViewProps): JSX.Element => {\r\n  const [ErrorMessage, setErrorMessage] = React.useState('');\r\n\r\n  const onAuthSuccess = (results: microsoftTeams.bot.Results): void => {\r\n    props.onAuthenticated({ data: results, type: microsoftTeams.bot.ResponseType.Results });\r\n  };\r\n\r\n  const onAuthFailure = (error: string): void => {\r\n    setErrorMessage('Something went wrong, please try again');\r\n  };\r\n\r\n  const handleAuthentication = () => {\r\n    const authParams: microsoftTeams.bot.AuthQueryRequest = {\r\n      query: props.currentQuery.query,\r\n      commandId: props.currentQuery.commandId,\r\n      url: props.url,\r\n    };\r\n\r\n    microsoftTeams.bot.authenticate(authParams, onAuthSuccess, onAuthFailure);\r\n  };\r\n\r\n  return (\r\n    <EmptyScreenView\r\n      buttonText=\"Sign In\"\r\n      title={props.title}\r\n      subTitle={\"You'll need to sign in to use this app.\"}\r\n      message={ErrorMessage}\r\n      onClick={handleAuthentication}\r\n    />\r\n  );\r\n};\r\n","import { themes, ThemeInput, mergeThemes } from '@stardust-ui/react';\r\nimport * as queryString from 'query-string';\r\n\r\nenum themeTypes {\r\n  Dark = 'dark',\r\n  Default = 'default',\r\n  Contrast = 'contrast',\r\n}\r\n\r\n// gets theme name from url params\r\nexport const getThemeFromURL = (iUrl: string): string => {\r\n  const url = queryString.parseUrl(iUrl);\r\n\r\n  const themeString: string = url.query.theme as string;\r\n\r\n  if (!themeString) {\r\n    return 'default';\r\n  }\r\n  return themeString;\r\n};\r\n\r\nconst getCustomTheme = () => ({\r\n  componentVariables: {\r\n    ContentViewWrapper: ({ colorScheme }: any) => ({\r\n      backgroundColor: colorScheme.default.background2,\r\n    }),\r\n    ListItem: ({ colorScheme }: any) => ({\r\n      backgroundColor: colorScheme.default.background,\r\n      hoverBackgroundColor: colorScheme.default.backgroundHover1,\r\n      hoverTextColor: colorScheme.default.foregroundFocus,\r\n      activeBackgroundColor: colorScheme.default.borderActive,\r\n      activeTextColor: colorScheme.default.foregroundFocus,\r\n    }),\r\n    Segment: ({ colorScheme }: any) => ({\r\n      backgroundColor: colorScheme.default.background,\r\n      hoverBackgroundColor: colorScheme.default.backgroundHover1,\r\n      hoverTextColor: colorScheme.default.foregroundFocus,\r\n      activeBackgroundColor: colorScheme.default.borderActive,\r\n      activeTextColor: colorScheme.default.foregroundFocus,\r\n    }),\r\n    Input: ({ colorScheme }: any) => ({\r\n      inputBackgroundColor: colorScheme.default.background,\r\n    }),\r\n  },\r\n  componentStyles: {\r\n    ContentViewWrapper: {\r\n      root: ({ variables }: any) => ({\r\n        backgroundColor: variables.backgroundColor,\r\n      }),\r\n    },\r\n    ListItem: {\r\n      root: ({ variables }: any) => ({\r\n        backgroundColor: variables.backgroundColor,\r\n        ':hover': {\r\n          backgroundColor: variables.hoverBackgroundColor,\r\n          color: variables.hoverTextColor,\r\n        },\r\n        ':active': {\r\n          backgroundColor: variables.activeBackgroundColor,\r\n          color: variables.activeTextColor,\r\n        },\r\n        ':focus': {\r\n          backgroundColor: variables.hoverBackgroundColor,\r\n          color: variables.hoverTextColor,\r\n        },\r\n      }),\r\n    },\r\n    Input: {\r\n      input: ({ variables }: any) => ({\r\n        backgroundColor: variables.inputBackgroundColor,\r\n      }),\r\n    },\r\n    Segment: {\r\n      root: ({ variables }: any) => ({\r\n        ':hover': {\r\n          backgroundColor: variables.hoverBackgroundColor,\r\n          color: variables.hoverTextColor,\r\n        },\r\n        ':active': {\r\n          backgroundColor: variables.activeBackgroundColor,\r\n          color: variables.activeTextColor,\r\n        },\r\n        ':focus': {\r\n          backgroundColor: variables.hoverBackgroundColor,\r\n          color: variables.hoverTextColor,\r\n        },\r\n      }),\r\n    },\r\n  },\r\n});\r\n\r\n// gets theme type from string\r\nexport const getTheme = (theme: string): ThemeInput => {\r\n  let customTheme: ThemeInput;\r\n  switch (theme) {\r\n    case themeTypes.Contrast:\r\n      customTheme = getCustomTheme();\r\n      return mergeThemes(themes.teamsHighContrast, customTheme);\r\n    case themeTypes.Dark:\r\n      customTheme = getCustomTheme();\r\n      return mergeThemes(themes.teamsDark, customTheme);\r\n    default:\r\n      customTheme = getCustomTheme();\r\n      return mergeThemes(themes.teams, customTheme);\r\n  }\r\n};\r\n","import React from 'react';\r\nimport './css/App.css';\r\n\r\nimport { getFrameContext } from './utils/utils';\r\nimport { SettingsView } from './components/SettingsView';\r\nimport { ContentViewWrapper } from './components/ContentView';\r\n\r\ninterface IAppProps {\r\n  onThemeChange: (theme: string) => void;\r\n}\r\n\r\nexport const App: React.FC<IAppProps> = (props: IAppProps): JSX.Element => {\r\n  // CONSTANTS\r\n  const url: string = window.location.href;\r\n  const frameContext = getFrameContext(url);\r\n  if (frameContext === 'settings') {\r\n    return (\r\n      <div>\r\n        <SettingsView />\r\n      </div>\r\n    );\r\n  } else {\r\n    return <ContentViewWrapper onThemeChange={props.onThemeChange} />;\r\n  }\r\n};\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { ProviderWrapper } from './ProviderWrapper';\r\n\r\nReactDOM.render(<ProviderWrapper />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport { Provider } from '@stardust-ui/react';\r\nimport App from './App';\r\nimport * as themeUtils from './utils/themeUtils';\r\n\r\nexport const ProviderWrapper: React.FC = (): JSX.Element => {\r\n  // CONSTANT\r\n  const initialTheme = themeUtils.getTheme(themeUtils.getThemeFromURL(window.location.href));\r\n  // HOOKS\r\n  const [Theme, setTheme] = React.useState(initialTheme);\r\n\r\n  // HANDLERS\r\n  const handleThemeChange = (theme: string): void => {\r\n    setTheme(themeUtils.getTheme(theme));\r\n  };\r\n\r\n  return (\r\n    <Provider theme={Theme}>\r\n      <App onThemeChange={handleThemeChange} />\r\n    </Provider>\r\n  );\r\n};\r\n"],"sourceRoot":""}