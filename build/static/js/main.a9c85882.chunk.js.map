{"version":3,"sources":["serviceWorker.ts","components/RadioIcons.tsx","utils/utils.ts","api/api.ts","components/SettingsView.tsx","components/SearchBar.tsx","components/Results.tsx","components/ListView.tsx","components/CardView.tsx","components/ContentView.tsx","components/LoadIcon.tsx","components/EmptyScreenView.tsx","components/ErrorView.tsx","components/AuthView.tsx","utils/themeUtils.ts","App.tsx","index.tsx","ProviderWrapper.tsx"],"names":["Boolean","window","location","hostname","match","viewType","submitHandler","err","result","console","log","concat","launchTaskModule","card","content","type","taskInfo","height","undefined","width","title","preview","url","completionBotId","botId","microsoftTeams","startTask","alert","getCommandId","iUrl","queryString","query","commandId","stripHTML","html","div","document","createElement","innerHTML","textContent","innerText","getResults","request","onResults","onError","sendQuery","SettingsView","_React$useState","React","_React$useState2","Object","slicedToArray","CommandList","setCommandList","_React$useState3","_React$useState4","setCommandSelected","_React$useState5","_React$useState6","ContentUrl","setContentUrl","_React$useState7","_React$useState8","TabName","setTabName","error","onGetCommandResponse","response","notifySuccess","onCommandSelection","command","id","initialRun","setValidityState","saveHandler","saveEvent","setSettings","entityId","contentUrl","suggestedDisplayName","notifyAppLoaded","registerOnSaveHandler","onBotGetCommandResponse","getSupportedCommands","react","Text","size","Input","fluid","placeholder","onChange","event","target","value","style","marginTop","Dropdown","items","map","noResultsMessage","onSelectedChange","res","find","item","RadioIcons","props","handleChange","key","icon","name","outline","aria-label","onClick","e","List","Grid","react_default","a","Flex","styles","vAlign","Menu","defaultActiveIndex","accessibility","menuAsToolbarBehavior","iconOnly","viewOption","SearchBar","useState","Query","setQuery","onSearchDebounced","debounce","onSearch","gap","Item","push","RadioIcons_RadioIcons","view","newView","onViewChange","margin","input","newQuery","currentTarget","length","onKeyPress","ListView","keyCount","outList","itemList","fill","Image","src","heroImageSrc","className","truncated","weight","subTitle","grow","text","selectable","CardView","calculateColumns","Math","floor","innerWidth","Columns","setColumns","updateColumn","useEffect","addEventListener","removeEventListener","columns","gridBehavior","Segment","data-is-focusable","padding","borderRadius","boxShadow","column","textAlign","display","WebkitBoxOrient","WebkitLineClamp","overflow","AppStateEnum","Results","ListView_ListView","results","CardView_CardView","LoadIcon","isLoading","Loader","EmptyScreenView","button","buttonText","Button","primary","message","imageSrc","ErrorView","EmptyScreenView_EmptyScreenView","AuthView","ErrorMessage","setErrorMessage","onAuthSuccess","onAuthenticated","data","ResponseType","onAuthFailure","authParams","currentQuery","authenticate","themeTypes","ContentView","ViewOption","setViewOption","Result","setResult","Render","AppState","setAppState","_React$useState9","_React$useState10","AuthData","setAuthData","_React$useState11","href","_React$useState12","Error","Auth","authResponse","resultsResponse","attachments","botID","previewRawPayload","hasOwnProperty","images","contentType","subtitle","processQueryResponse","parseQueryResponse","handleIfNoResults","NoResults","onThemeChange","isInitialRun","Results_Results","LoadIcon_LoadIcon","ErrorView_ErrorView","AuthView_AuthView","customClass","SearchBar_SearchBar","Loading","ContentViewWrapper","createComponent","displayName","render","_ref","stardust","classes","ContentView_ContentView","root","App","frameContext","SettingsView_SettingsView","getTheme","theme","customTheme","Contrast","componentVariables","backgroundColor","colorScheme","default","background2","ListItem","_ref2","background","_ref3","hoverBackgroundColor","brand","hoverTextColor","foregroundFocus3","activeBackgroundColor","backgroundPressed","activeTextColor","_ref4","inputBackgroundColor","componentStyles","_ref5","variables","_ref6","_ref7","_ref8",":hover","color",":active",":focus","mergeThemes","themes","teamsHighContrast","Dark","teamsDark","teams","ReactDOM","initialTheme","themeUtils","themeString","Theme","setTheme","Provider","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a9c85882.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ninterface Config {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Button, Flex, Menu, menuAsToolbarBehavior } from '@stardust-ui/react';\r\n\r\nenum viewType {\r\n  List = 'List',\r\n  Grid = 'Grid',\r\n}\r\n\r\ninterface IRadioIconsProps {\r\n  onChange: (view: string) => void;\r\n  styles?: object;\r\n}\r\n\r\nexport const RadioIcons: React.FC<IRadioIconsProps> = (props: IRadioIconsProps): JSX.Element => {\r\n  // HANDLERS\r\n  const handleChange = (event: React.SyntheticEvent, items: { value: viewType }): void => {\r\n    props.onChange(items.value);\r\n  };\r\n\r\n  const items = [\r\n    {\r\n      key: 'list',\r\n      icon: {\r\n        name: 'menu',\r\n        outline: true,\r\n      },\r\n      'aria-label': 'List View',\r\n      onClick: (e: React.SyntheticEvent): void => handleChange(e, { value: viewType.List }),\r\n    },\r\n    {\r\n      key: 'card',\r\n      icon: {\r\n        name: 'gallery',\r\n        outline: true,\r\n      },\r\n      'aria-label': 'Card View',\r\n      onClick: (e: React.SyntheticEvent): void => handleChange(e, { value: viewType.Grid }),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Flex styles={props.styles} vAlign=\"center\">\r\n      <Menu items={items} defaultActiveIndex={0} accessibility={menuAsToolbarBehavior} iconOnly />\r\n    </Flex>\r\n  );\r\n};\r\n","import * as microsoftTeams from '@microsoft/teams-js';\r\nimport { ICard } from '../api/api.interface';\r\nimport * as queryString from 'query-string';\r\n\r\n// gets frame context from url\r\nexport const submitHandler = (err: string, result: string): void => {\r\n  console.log(`Err value: ${err}, result value : ${result}`);\r\n};\r\n\r\nexport const launchTaskModule = (card: ICard): void => {\r\n  // Only open task module if card is an Adaptive Card\r\n  if (card.content.type && card.content.type === 'AdaptiveCard') {\r\n    const taskInfo: microsoftTeams.TaskInfo = {\r\n      height: undefined,\r\n      width: 600,\r\n      title: card.preview.title,\r\n      url: undefined,\r\n      card: card.content,\r\n      completionBotId: card.botId,\r\n    };\r\n    microsoftTeams.tasks.startTask(taskInfo, submitHandler);\r\n  } else {\r\n    alert(`Could not load data, card type is not supported.`);\r\n  }\r\n};\r\n\r\nexport const getCommandId = (iUrl: string): string => {\r\n  const url = queryString.parseUrl(iUrl);\r\n  return url.query.commandId as string;\r\n};\r\n\r\nexport const isInitialRun = (): boolean => {\r\n  const url = queryString.parseUrl(window.location.href);\r\n  return url.query.initialRun != null && url.query.initialRun == 'true';\r\n};\r\n\r\n// gets frame context from url\r\nexport const getFrameContext = (iUrl: string): string => {\r\n  const url = queryString.parseUrl(iUrl);\r\n  return url.query.frameContext as string;\r\n};\r\n\r\nexport const processQueryResponse = (item: microsoftTeams.bot.Attachment, botID: string): ICard => {\r\n  let url = '';\r\n  if (item.previewRawPayload.content.hasOwnProperty('images')) {\r\n    if (\r\n      item.previewRawPayload.content.images &&\r\n      item.previewRawPayload.content.images[0] &&\r\n      item.previewRawPayload.content.images[0].url\r\n    )\r\n      url = item.previewRawPayload.content.images[0].url;\r\n  }\r\n  const out: ICard = {\r\n    contentType: 'AdaptiveCard',\r\n    content: item.card.content,\r\n    preview: {\r\n      title: item.previewRawPayload.content.title,\r\n      subTitle: item.previewRawPayload.content.subtitle,\r\n      text: item.previewRawPayload.content.text,\r\n      heroImageSrc: url,\r\n    },\r\n    botId: botID,\r\n  };\r\n  return out;\r\n};\r\n\r\n// converts a bot response to ICard\r\nexport const parseQueryResponse = (response: microsoftTeams.bot.Results): ICard[] => {\r\n  if (response && response.attachments) {\r\n    return response.attachments.map(\r\n      (item: microsoftTeams.bot.Attachment): ICard => processQueryResponse(item, response.botId),\r\n    );\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\n// Function to strip HTML tags from data\r\nexport const stripHTML = (html: string): string => {\r\n  let div = document.createElement('div');\r\n  div.innerHTML = html;\r\n  return div.textContent || div.innerText || '';\r\n};\r\n","import * as microsoftTeams from '@microsoft/teams-js';\r\nimport * as adaptiveCards from 'adaptivecards';\r\nimport { ISubmitAction, IOpenUrlAction, IShowCardAction } from 'adaptivecards/lib/schema';\r\n\r\nexport const getResults = (\r\n  request: microsoftTeams.bot.QueryRequest,\r\n  onResults: (response: microsoftTeams.bot.QueryResponse) => void,\r\n  onError: (error: string) => void,\r\n): void => {\r\n  microsoftTeams.bot.sendQuery(request, onResults, onError);\r\n};\r\n\r\nexport const getSupportedCommands = (\r\n  onBotGetCommandResponse: (response: microsoftTeams.bot.Command[]) => void,\r\n  onError: (error: string) => void,\r\n): void => {\r\n  microsoftTeams.bot.getSupportedCommands(onBotGetCommandResponse, onError);\r\n};\r\n\r\nexport const removeUnsupportedActions = (card: adaptiveCards.IAdaptiveCard): adaptiveCards.IAdaptiveCard => {\r\n  const SupportedActions: string[] = ['Action.OpenUrl', 'Action.Submit', 'Action.ShowCard', 'invoke', 'signin'];\r\n  let newCard = card;\r\n  if (card.actions) {\r\n    newCard.actions = card.actions.filter((item: ISubmitAction | IOpenUrlAction | IShowCardAction): boolean => {\r\n      return SupportedActions.includes(item.type);\r\n    });\r\n  }\r\n  return newCard;\r\n};\r\n","import * as React from 'react';\r\nimport { Text, Input, Dropdown } from '@stardust-ui/react';\r\nimport * as microsoftTeams from '@microsoft/teams-js';\r\nimport { getSupportedCommands } from '../api/api';\r\n\r\nexport const SettingsView: React.FC = (): JSX.Element => {\r\n  // STATE HOOKS\r\n  const [CommandList, setCommandList] = React.useState([] as microsoftTeams.bot.Command[]);\r\n  const [CommandSelected, setCommandSelected] = React.useState('');\r\n  const [ContentUrl, setContentUrl] = React.useState('');\r\n  const [TabName, setTabName] = React.useState('JSONTabDefault');\r\n  // HANDLERS\r\n  const onError = (error: string): void => {\r\n    alert(error);\r\n  };\r\n\r\n  const onGetCommandResponse = (response: microsoftTeams.bot.Command[]): void => {\r\n    setCommandList(response);\r\n    microsoftTeams.appInitialization.notifySuccess();\r\n  };\r\n\r\n  const handleNameChange = (event: any): void => {\r\n    setTabName(event.target.value);\r\n  };\r\n\r\n  const handleCommandChange = (event: any, res: any): void => {\r\n    const command = CommandList.find(\r\n      (item: microsoftTeams.bot.Command): boolean => item.title === res.value,\r\n    ) as microsoftTeams.bot.Command;\r\n    if (command) {\r\n      onCommandSelection(command);\r\n    }\r\n  };\r\n\r\n  const onCommandSelection = (command: any): void => {\r\n    setCommandSelected(command.id);\r\n    if (command.initialRun) {\r\n      setContentUrl(\r\n        `https://microsoft-teams-json-tab.azurewebsites.net?theme={theme}&frameContext=content&commandId=${command.id}&initialRun=${command.initialRun}`,\r\n      );\r\n    } else {\r\n      setContentUrl(\r\n        `https://microsoft-teams-json-tab.azurewebsites.net?theme={theme}&frameContext=content&commandId=${command.id}`,\r\n      );\r\n    }\r\n    microsoftTeams.settings.setValidityState(true);\r\n  };\r\n\r\n  const saveHandler = (saveEvent: microsoftTeams.settings.SaveEvent): void => {\r\n    microsoftTeams.settings.setSettings({\r\n      entityId: 'JSONTab',\r\n      contentUrl: ContentUrl,\r\n      suggestedDisplayName: TabName,\r\n    });\r\n    saveEvent.notifySuccess();\r\n  };\r\n\r\n  // EFFECT HOOKS\r\n  React.useEffect((): void => {\r\n    microsoftTeams.initialize();\r\n    microsoftTeams.appInitialization.notifyAppLoaded();\r\n    microsoftTeams.settings.registerOnSaveHandler(saveHandler);\r\n    getSupportedCommands(onGetCommandResponse, onError);\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Text size={'medium'} content={'Name your tab'} />\r\n      </div>\r\n      <Input fluid placeholder={'Tab name'} onChange={handleNameChange} />\r\n      <div style={{ marginTop: '16px' }}>\r\n        <Text size={'medium'} content={\"Select the command you'd like query your bot with\"} />\r\n      </div>\r\n      <Dropdown\r\n        fluid\r\n        items={CommandList.map((command: microsoftTeams.bot.Command): string => {\r\n          return command.title;\r\n        })}\r\n        noResultsMessage=\"We couldn't find any matches.\"\r\n        onSelectedChange={handleCommandChange}\r\n        placeholder=\"Select the command\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Input, Button, Icon, Image, Flex, Header } from '@stardust-ui/react';\r\nimport { RadioIcons } from './RadioIcons';\r\nimport { debounce } from 'lodash';\r\n\r\nenum viewType {\r\n  List = 'List',\r\n  Grid = 'Grid',\r\n}\r\n\r\ninterface ISearchBarProps {\r\n  onSearch: (query: string) => void;\r\n  onViewChange: (view: viewType) => void;\r\n}\r\n\r\nexport const SearchBar: React.FC<ISearchBarProps> = (props: ISearchBarProps): JSX.Element => {\r\n  // STATE HOOKS\r\n  const [Query, setQuery] = React.useState('');\r\n\r\n  //DEBOUNCED QUERY\r\n  const onSearchDebounced = debounce(props.onSearch, 300);\r\n\r\n  // HANDLERS\r\n  const handleOnChange = (event: React.SyntheticEvent<HTMLElement>): void => {\r\n    const newQuery = (event as React.SyntheticEvent<HTMLInputElement>).currentTarget.value;\r\n    if ((event as React.SyntheticEvent<HTMLInputElement>).currentTarget.value.length >= 1) {\r\n      onSearchDebounced(newQuery);\r\n    } else {\r\n      onSearchDebounced('');\r\n    }\r\n    setQuery(newQuery);\r\n  };\r\n\r\n  const handleRadioButtonChange = (view: string): void => {\r\n    const newView = view === viewType.List ? viewType.List : viewType.Grid;\r\n    props.onViewChange(newView);\r\n  };\r\n\r\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>): void => {\r\n    if (event.key === 'Enter') {\r\n      props.onSearch(Query);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Flex gap=\"gap.small\" vAlign=\"center\">\r\n      <Flex.Item push>\r\n        <Flex>\r\n          <RadioIcons onChange={handleRadioButtonChange} styles={{ margin: '0 0 16px 0' }} />\r\n        </Flex>\r\n      </Flex.Item>\r\n      <Input\r\n        placeholder=\"Search\"\r\n        icon={{\r\n          name: 'search',\r\n          outline: true,\r\n        }}\r\n        input={{\r\n          styles: { width: '250px' },\r\n        }}\r\n        styles={{ margin: '0px 0px 16px 0px' }}\r\n        onChange={handleOnChange}\r\n        onKeyPress={handleKeyPress}\r\n      />\r\n    </Flex>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { ListView } from './ListView';\r\nimport { CardView } from './CardView';\r\nimport { ICard } from '../api/api.interface';\r\n\r\nexport interface IResultState {\r\n  results: ICard[];\r\n  viewOption: string;\r\n}\r\nenum viewOption {\r\n  List = 'List',\r\n  Grid = 'Grid',\r\n}\r\nexport const Results: React.FC<IResultState> = (props: IResultState): JSX.Element => {\r\n  return (\r\n    <div>\r\n      {props.viewOption === viewOption.List ? (\r\n        <ListView itemList={props.results} />\r\n      ) : (\r\n        <CardView itemList={props.results} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { List, Image, Flex, Text, Icon, Menu, menuAsToolbarBehavior } from '@stardust-ui/react';\r\nimport { ICard } from '../api/api.interface';\r\nimport { launchTaskModule, stripHTML } from '../utils/utils';\r\n\r\nexport interface IItemListProps {\r\n  itemList: ICard[];\r\n}\r\n\r\nexport interface IProcessedItem {\r\n  key: number;\r\n  content: JSX.Element;\r\n  onClick: () => void;\r\n}\r\n\r\nexport const ListView: React.FC<IItemListProps> = (props: IItemListProps): JSX.Element => {\r\n  // Key count to ensure unique keys for every item\r\n  let keyCount = 0;\r\n\r\n  // Function to translate items from IPreviewCard to List.Item format\r\n  const processItem = (item: ICard): IProcessedItem => {\r\n    keyCount++;\r\n    const out = {\r\n      key: keyCount,\r\n      content: (\r\n        <Flex vAlign=\"center\" fill gap=\"gap.small\">\r\n          <Flex.Item styles={{ width: '32px', height: '100%' }}>\r\n            <Image src={item.preview.heroImageSrc} className=\"listItemImage\" />\r\n          </Flex.Item>\r\n          <Flex.Item size=\"size.medium\">\r\n            <Text truncated size=\"medium\" weight=\"semibold\" content={stripHTML(item.preview.title)} />\r\n          </Flex.Item>\r\n          {item.preview.subTitle ? (\r\n            <Flex.Item grow size=\"size.medium\">\r\n              <Text truncated size=\"medium\" weight=\"regular\" content={stripHTML(item.preview.subTitle)} />\r\n            </Flex.Item>\r\n          ) : null}\r\n          {item.preview.text ? (\r\n            <Flex.Item grow size=\"size.half\">\r\n              <Text truncated size=\"medium\" weight=\"regular\" content={stripHTML(item.preview.text)} />\r\n            </Flex.Item>\r\n          ) : null}\r\n        </Flex>\r\n      ),\r\n      styles: { margin: '2px 2px 0 0' },\r\n      onClick: (): void => launchTaskModule(item),\r\n    };\r\n    return out;\r\n  };\r\n\r\n  // Output List for processed data\r\n  // Call processing function on all items\r\n  const outList = props.itemList.map(processItem);\r\n\r\n  // Render selectable list\r\n  return (\r\n    <div>\r\n      <List selectable items={outList} />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Flex, Grid, Segment, Image, Text, gridBehavior } from '@stardust-ui/react';\r\nimport { IItemListProps } from './ListView';\r\nimport { ICard } from '../api/api.interface';\r\nimport { stripHTML, launchTaskModule } from '../utils/utils';\r\nimport '../css/App.css';\r\n\r\nexport const CardView: React.FC<IItemListProps> = (props: IItemListProps): JSX.Element => {\r\n  // CONSTANTS\r\n  const minimumCardWidth = 278; //px\r\n\r\n  // HELPER FUNCTION\r\n  const calculateColumns = (width: number) => {\r\n    return Math.floor(width / minimumCardWidth);\r\n  };\r\n\r\n  // STATE HOOKS\r\n  const [Columns, setColumns] = React.useState(calculateColumns(window.innerWidth));\r\n\r\n  // HANDLERS\r\n  const updateColumn = () => {\r\n    setColumns(calculateColumns(window.innerWidth));\r\n  };\r\n\r\n  // EFFECT HOOKS\r\n  React.useEffect(() => {\r\n    window.addEventListener('resize', updateColumn);\r\n    return () => {\r\n      window.removeEventListener('resize', updateColumn);\r\n    };\r\n  }, [Columns]);\r\n\r\n  // ICARD PROCESSOR\r\n  const processItem = (item: ICard): JSX.Element => {\r\n    return (\r\n      <Segment\r\n        data-is-focusable=\"true\"\r\n        styles={{\r\n          margin: '0 0 16px 12px',\r\n          height: '146px',\r\n          padding: '20px 20px 20px 20px',\r\n          borderRadius: '3px',\r\n          boxShadow: '0px 2px 4px -0.75px rgba(0,0,0,0.1)',\r\n        }}\r\n        onClick={(): void => launchTaskModule(item)}\r\n        onKeyPress={(e: React.KeyboardEvent<HTMLDivElement>) => {\r\n          if (e.key === 'Enter') {\r\n            launchTaskModule(item);\r\n          }\r\n        }}\r\n      >\r\n        <Flex gap=\"gap.small\">\r\n          <Flex.Item>\r\n            <Image\r\n              styles={{ width: '48px', height: '100%' }}\r\n              src={item.preview.heroImageSrc}\r\n              className=\"listItemImage\"\r\n            />\r\n          </Flex.Item>\r\n          <Flex.Item size=\"size.half\" grow>\r\n            <Flex column styles={{ textAlign: 'left' }}>\r\n              <Flex.Item\r\n                styles={{ display: '-webkit-box', WebkitBoxOrient: 'vertical', WebkitLineClamp: 1, overflow: 'hidden' }}\r\n              >\r\n                <Text\r\n                  content={stripHTML(item.preview.title)}\r\n                  styles={{ margin: '0 0 2px 0' }}\r\n                  size=\"medium\"\r\n                  weight=\"semibold\"\r\n                />\r\n              </Flex.Item>\r\n              {item.preview.subTitle ? (\r\n                <Flex.Item\r\n                  styles={{\r\n                    display: '-webkit-box',\r\n                    WebkitBoxOrient: 'vertical',\r\n                    WebkitLineClamp: 1,\r\n                    overflow: 'hidden',\r\n                  }}\r\n                >\r\n                  <Text\r\n                    content={stripHTML(item.preview.subTitle)}\r\n                    styles={{ margin: '0 0 2px 0' }}\r\n                    weight=\"regular\"\r\n                    size=\"medium\"\r\n                  />\r\n                </Flex.Item>\r\n              ) : null}\r\n              {item.preview.text ? (\r\n                <Flex.Item\r\n                  grow\r\n                  size=\"size.half\"\r\n                  styles={{\r\n                    display: '-webkit-box',\r\n                    WebkitBoxOrient: 'vertical',\r\n                    WebkitLineClamp: 3,\r\n                    overflow: 'hidden',\r\n                  }}\r\n                >\r\n                  <Text content={stripHTML(item.preview.text)} weight=\"regular\" size=\"medium\" />\r\n                </Flex.Item>\r\n              ) : null}\r\n            </Flex>\r\n          </Flex.Item>\r\n        </Flex>\r\n      </Segment>\r\n    );\r\n  };\r\n\r\n  // RENDER\r\n  return (\r\n    <div style={{ margin: '0 0 0 8px' }}>\r\n      <Grid columns={Columns} accessibility={gridBehavior} content={props.itemList.map(processItem)} />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { SearchBar } from './SearchBar';\r\nimport { Results } from './Results';\r\nimport { LoadIcon } from './LoadIcon';\r\nimport { ErrorView } from './ErrorView';\r\nimport { AuthView } from './AuthView';\r\n\r\nimport { getResults } from '../api/api';\r\n\r\nimport * as microsoftTeams from '@microsoft/teams-js';\r\nimport { ICard } from '../api/api.interface';\r\nimport { isInitialRun, parseQueryResponse, getCommandId } from '../utils/utils';\r\nimport { createComponent } from '@stardust-ui/react';\r\nimport { EmptyScreenView } from './EmptyScreenView';\r\n\r\n// handlers\r\nexport interface IContentViewProps {\r\n  onThemeChange: (theme: string) => void;\r\n  customClass: string;\r\n}\r\n\r\nenum AppStateEnum {\r\n  Loading = 'Loading',\r\n  Error = 'Error',\r\n  Render = 'Render',\r\n  Auth = 'Auth',\r\n  NoResults = 'NoResults',\r\n}\r\n\r\nexport const ContentView: React.FC<IContentViewProps> = (props: IContentViewProps): JSX.Element => {\r\n  // state hooks\r\n  const [ViewOption, setViewOption] = React.useState('List');\r\n  const [Result, setResult] = React.useState([] as ICard[]);\r\n  const [AppState, setAppState] = React.useState(AppStateEnum.Render);\r\n  const [ErrorMessage, setErrorMessage] = React.useState('');\r\n  const [AuthData, setAuthData] = React.useState({ url: '', title: 'Sign in' });\r\n  const [Query, setQuery] = React.useState({ query: '', commandId: getCommandId(window.location.href) });\r\n\r\n  const onError = (error: string): void => {\r\n    setAppState(AppStateEnum.Error);\r\n    setErrorMessage(error);\r\n  };\r\n\r\n  const onResults = (response: microsoftTeams.bot.QueryResponse): void => {\r\n    if (response.type === microsoftTeams.bot.ResponseType.Auth) {\r\n      const authResponse: microsoftTeams.bot.Auth = response.data as microsoftTeams.bot.Auth;\r\n      setAuthData({ url: authResponse.url, title: authResponse.title });\r\n      setAppState(AppStateEnum.Auth);\r\n    } else {\r\n      const resultsResponse: microsoftTeams.bot.Results = response.data as microsoftTeams.bot.Results;\r\n      setResult(parseQueryResponse(resultsResponse));\r\n      handleIfNoResults(resultsResponse.attachments);\r\n      microsoftTeams.appInitialization.notifySuccess();\r\n    }\r\n  };\r\n\r\n  const handleSearch = (query: string): void => {\r\n    if (query !== undefined) {\r\n      setQuery({ query: query, commandId: getCommandId(window.location.href) }); // keep query in state for auth\r\n      getResults(Query, onResults, onError);\r\n      setAppState(AppStateEnum.Loading);\r\n    }\r\n  };\r\n\r\n  const handleViewChange = (viewOption: string): void => {\r\n    if (viewOption) {\r\n      setViewOption(viewOption);\r\n    }\r\n  };\r\n\r\n  const handleIfNoResults = (response: microsoftTeams.bot.Attachment[]): void => {\r\n    if (response.length === 0) {\r\n      setAppState(AppStateEnum.NoResults);\r\n    } else {\r\n      setAppState(AppStateEnum.Render);\r\n    }\r\n  };\r\n\r\n  // EFFECT HOOKS\r\n  React.useEffect((): void => {\r\n    microsoftTeams.initialize();\r\n    microsoftTeams.appInitialization.notifyAppLoaded();\r\n    microsoftTeams.registerOnThemeChangeHandler(props.onThemeChange);\r\n    if (isInitialRun()) {\r\n      const request: microsoftTeams.bot.QueryRequest = {\r\n        query: '',\r\n        commandId: getCommandId(window.location.href),\r\n      };\r\n      getResults(request, onResults, onError);\r\n    }\r\n  }, [props.onThemeChange]);\r\n\r\n  let view = <Results results={Result} viewOption={ViewOption} />;\r\n  switch (AppState) {\r\n    case 'Loading':\r\n      view = <LoadIcon isLoading={true} />;\r\n      break;\r\n    case 'Error':\r\n      view = <ErrorView message={ErrorMessage} />;\r\n      break;\r\n    case 'Auth':\r\n      view = <AuthView title={AuthData.title} url={AuthData.url} currentQuery={Query} onAuthenticated={onResults} />;\r\n      break;\r\n    case 'NoResults':\r\n      view = <EmptyScreenView title=\"We couldn't find any results\" subTitle=\"Search, or try refining your query!\" />;\r\n      break;\r\n  }\r\n  return (\r\n    <div className={props.customClass}>\r\n      <SearchBar onSearch={handleSearch} onViewChange={handleViewChange} />\r\n      {view}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const ContentViewWrapper = createComponent({\r\n  displayName: 'ContentViewWrapper',\r\n  render: ({ stardust, onThemeChange }) => {\r\n    const { classes } = stardust;\r\n    return <ContentView customClass={classes.root} onThemeChange={onThemeChange} />;\r\n  },\r\n});\r\n","import React from 'react';\r\nimport { Loader } from '@stardust-ui/react';\r\nimport '../css/LoadIcon.css';\r\n\r\nexport interface LoadIconProps {\r\n  isLoading: boolean;\r\n}\r\n\r\nexport const LoadIcon: React.FC<LoadIconProps> = (props: LoadIconProps): JSX.Element => {\r\n  return <div className=\"loadIcon\"> {props.isLoading ? <Loader /> : null} </div>;\r\n};\r\n","import React from 'react';\r\nimport { Text, Image, Button } from '@stardust-ui/react';\r\nimport '../css/EmptyScreenView.css';\r\n\r\ninterface IEmptyScreenView {\r\n  title: string;\r\n  subTitle: string;\r\n  imageSrc?: string;\r\n  message?: string;\r\n  buttonText?: string;\r\n  onClick?: any;\r\n}\r\n\r\nexport const EmptyScreenView: React.FC<IEmptyScreenView> = (props: IEmptyScreenView): JSX.Element => {\r\n  let button: any = '';\r\n  if (props.buttonText && props.onClick) {\r\n    button = <Button id=\"button\" content={props.buttonText} onClick={props.onClick} primary />;\r\n  }\r\n  let message = '';\r\n  if (props.message) {\r\n    message = props.message;\r\n  }\r\n  let imageSrc = 'error.svg';\r\n  if (props.imageSrc) {\r\n    imageSrc = props.imageSrc;\r\n  }\r\n\r\n  return (\r\n    <div className=\"EmptyScreenView\">\r\n      <Image id=\"image\" src={imageSrc} />\r\n      <div id=\"textblock\">\r\n        <Text id=\"title\" size={'large'} weight=\"bold\" content={props.title} />\r\n        <Text styles={{ marginTop: '8px' }} size={'medium'} content={<p>{props.subTitle}</p>} />\r\n        <Text id=\"error\" size=\"small\" content={message} />\r\n      </div>\r\n      {button}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { EmptyScreenView } from './EmptyScreenView';\r\ninterface IErrorViewProps {\r\n  message: string;\r\n}\r\n\r\nexport const ErrorView: React.FC<IErrorViewProps> = (props: IErrorViewProps): JSX.Element => {\r\n  return (\r\n    <EmptyScreenView\r\n      title=\"There was a problem communicating with the bot\"\r\n      subTitle=\"You may not be able to use this feature\"\r\n      message={props.message}\r\n    />\r\n  );\r\n};\r\n","import React from 'react';\r\nimport * as microsoftTeams from '@microsoft/teams-js';\r\nimport { EmptyScreenView } from './EmptyScreenView';\r\n\r\ninterface IAuthViewProps {\r\n  title: string;\r\n  url: string;\r\n  currentQuery: microsoftTeams.bot.QueryRequest;\r\n  onAuthenticated: (results: microsoftTeams.bot.QueryResponse) => void;\r\n}\r\n\r\nexport const AuthView: React.FC<IAuthViewProps> = (props: IAuthViewProps): JSX.Element => {\r\n  const [ErrorMessage, setErrorMessage] = React.useState('');\r\n\r\n  const onAuthSuccess = (results: microsoftTeams.bot.Results): void => {\r\n    props.onAuthenticated({ data: results, type: microsoftTeams.bot.ResponseType.Results });\r\n  };\r\n\r\n  const onAuthFailure = (error: string): void => {\r\n    setErrorMessage('Something went wrong, please try again');\r\n  };\r\n\r\n  const handleAuthentication = () => {\r\n    const authParams: microsoftTeams.bot.AuthQueryRequest = {\r\n      query: props.currentQuery.query,\r\n      commandId: props.currentQuery.commandId,\r\n      url: props.url,\r\n    };\r\n\r\n    microsoftTeams.bot.authenticate(authParams, onAuthSuccess, onAuthFailure);\r\n  };\r\n\r\n  return (\r\n    <EmptyScreenView\r\n      buttonText=\"Sign In\"\r\n      title={props.title}\r\n      subTitle={\"You'll need to sign in to use this app.\"}\r\n      message={ErrorMessage}\r\n      onClick={handleAuthentication}\r\n    />\r\n  );\r\n};\r\n","import { themes, ThemeInput, mergeThemes } from '@stardust-ui/react';\r\nimport * as queryString from 'query-string';\r\n\r\nenum themeTypes {\r\n  Dark = 'dark',\r\n  Default = 'default',\r\n  Contrast = 'contrast',\r\n}\r\n\r\n// gets theme name from url params\r\nexport const getThemeFromURL = (iUrl: string): string => {\r\n  const url = queryString.parseUrl(iUrl);\r\n\r\n  const themeString: string = url.query.theme as string;\r\n\r\n  if (!themeString) {\r\n    return 'default';\r\n  }\r\n  return themeString;\r\n};\r\n\r\nconst getCustomTheme = () => ({\r\n  componentVariables: {\r\n    ContentViewWrapper: ({ colorScheme }: any) => ({\r\n      backgroundColor: colorScheme.default.background2,\r\n    }),\r\n    ListItem: ({ colorScheme }: any) => ({\r\n      backgroundColor: colorScheme.default.background,\r\n    }),\r\n    Segment: ({ colorScheme }: any) => ({\r\n      backgroundColor: colorScheme.default.background,\r\n      hoverBackgroundColor: colorScheme.brand.background,\r\n      hoverTextColor: colorScheme.default.foregroundFocus3,\r\n      activeBackgroundColor: colorScheme.brand.backgroundPressed,\r\n      activeTextColor: colorScheme.default.foregroundFocus3,\r\n    }),\r\n    Input: ({ colorScheme }: any) => ({\r\n      inputBackgroundColor: colorScheme.default.background,\r\n    }),\r\n  },\r\n  componentStyles: {\r\n    ContentViewWrapper: {\r\n      root: ({ variables }: any) => ({\r\n        backgroundColor: variables.backgroundColor,\r\n      }),\r\n    },\r\n    ListItem: {\r\n      root: ({ variables }: any) => ({\r\n        backgroundColor: variables.backgroundColor,\r\n      }),\r\n    },\r\n    Input: {\r\n      input: ({ variables }: any) => ({\r\n        backgroundColor: variables.inputBackgroundColor,\r\n      }),\r\n    },\r\n    Segment: {\r\n      root: ({ variables }: any) => ({\r\n        ':hover': {\r\n          backgroundColor: variables.hoverBackgroundColor,\r\n          color: variables.hoverTextColor,\r\n        },\r\n        ':active': {\r\n          backgroundColor: variables.activeBackgroundColor,\r\n          color: variables.activeTextColor,\r\n        },\r\n        ':focus': {\r\n          backgroundColor: variables.hoverBackgroundColor,\r\n          color: variables.hoverTextColor,\r\n        },\r\n      }),\r\n    },\r\n  },\r\n});\r\n\r\n// gets theme type from string\r\nexport const getTheme = (theme: string): ThemeInput => {\r\n  let customTheme: ThemeInput;\r\n  switch (theme) {\r\n    case themeTypes.Contrast:\r\n      customTheme = getCustomTheme();\r\n      return mergeThemes(themes.teamsHighContrast, customTheme);\r\n    case themeTypes.Dark:\r\n      customTheme = getCustomTheme();\r\n      return mergeThemes(themes.teamsDark, customTheme);\r\n    default:\r\n      customTheme = getCustomTheme();\r\n      return mergeThemes(themes.teams, customTheme);\r\n  }\r\n};\r\n","import React from 'react';\r\nimport './css/App.css';\r\n\r\nimport { getFrameContext } from './utils/utils';\r\nimport { SettingsView } from './components/SettingsView';\r\nimport { ContentViewWrapper } from './components/ContentView';\r\n\r\ninterface IAppProps {\r\n  onThemeChange: (theme: string) => void;\r\n}\r\n\r\nexport const App: React.FC<IAppProps> = (props: IAppProps): JSX.Element => {\r\n  // CONSTANTS\r\n  const url: string = window.location.href;\r\n  const frameContext = getFrameContext(url);\r\n  if (frameContext === 'settings') {\r\n    return (\r\n      <div>\r\n        <SettingsView />\r\n      </div>\r\n    );\r\n  } else {\r\n    return <ContentViewWrapper onThemeChange={props.onThemeChange} />;\r\n  }\r\n};\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { ProviderWrapper } from './ProviderWrapper';\r\n\r\nReactDOM.render(<ProviderWrapper />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport { Provider } from '@stardust-ui/react';\r\nimport App from './App';\r\nimport * as themeUtils from './utils/themeUtils';\r\n\r\nexport const ProviderWrapper: React.FC = (): JSX.Element => {\r\n  // CONSTANT\r\n  const initialTheme = themeUtils.getTheme(themeUtils.getThemeFromURL(window.location.href));\r\n  // HOOKS\r\n  const [Theme, setTheme] = React.useState(initialTheme);\r\n\r\n  // HANDLERS\r\n  const handleThemeChange = (theme: string): void => {\r\n    setTheme(themeUtils.getTheme(theme));\r\n  };\r\n\r\n  return (\r\n    <Provider theme={Theme}>\r\n      <App onThemeChange={handleThemeChange} />\r\n    </Provider>\r\n  );\r\n};\r\n"],"sourceRoot":""}