{"version":3,"sources":["serviceWorker.ts","components/RadioIcons.tsx","components/SearchBar.tsx","components/Results.tsx","utils/utils.ts","components/ListView.tsx","components/FlexItem.tsx","components/CardView.tsx","utils/themeUtils.ts","api/api.ts","components/SettingsView.tsx","App.tsx","ProviderWrapper.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","viewType","RadioIcons","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","event","items","wrap","_context","prev","next","setState","highlighted","value","onChange","state","stop","_x","_x2","apply","arguments","List","inherits","createClass","key","_this2","styles","border","box-shadow","react_default","createElement","className","id","Button","icon","iconOnly","onClick","e","Grid","React","Component","viewOption","SearchBar","handleRadioButtonChange","view","getViewOption","onViewChange","_viewOption","handleKeyPress","onSearch","query","bind","assertThisInitialized","target","RadioIcons_RadioIcons","Input","placeholder","Icon","name","color","primary","handleOnClick","backgroundColor","border-radius","input","handleOnChange","onKeyPress","submitHandler","err","result","console","log","concat","launchTaskModule","card","content","type","taskInfo","height","undefined","width","title","preview","heroImageSrc","url","completionBotId","microsoftTeams","startTask","alert","processQueryResponse","item","previewRawPayload","hasOwnProperty","images","contentType","subTitle","text","parseQueryResponse","response","attachments","map","ListView","keyCount","outList","itemList","Flex","vAlign","Item","Image","src","Text","selectable","FlexItem","react","tabIndex","onKeyDown","document","getElementById","focus","Layout","vertical","start","circular","Header","as","main","gap","CardView","tempSubTitle","tempTitle","i","length","newTitle","substring","newSubTitle","newItem","Box","push","themeTypes","Results","ListView_ListView","results","CardView_CardView","listOfSupportedCmds","getResults","onResults","onError","sendQuery","SettingsView","_React$useState","_React$useState2","slicedToArray","Commands","setCommands","_React$useState3","_React$useState4","CommandSelected","setCommandSelected","_React$useState5","_React$useState6","TabName","setTabName","handleNameChange","handleCommandChange","_ref2","_callee2","res","_context2","setValidityState","_x3","registerOnSaveHandler","saveEvent","setSettings","entityId","contentUrl","suggestedDisplayName","notifySuccess","listOfCmds","command","size","fluid","Dropdown","noResultsMessage","onSelectedChange","App","handleSearch","handleViewChange","onThemeChange","notifyAppLoaded","error","notifyFailure","reason","FailedReason","Other","message","iUrl","href","queryString","frameContext","SettingsView_SettingsView","SearchBar_SearchBar","Results_Results","getThemeFromURL","themeString","theme","getTheme","newTheme","themes","teams","Contrast","teamsHighContrast","Dark","teamsDark","ProviderWrapper","handleThemeChange","currentTheme","themeUtils","Provider","src_App","ReactDOM","render","ProviderWrapper_ProviderWrapper","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.678a6cf4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ninterface Config {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Button } from '@stardust-ui/react';\r\nimport '../css/SearchBar.css';\r\n\r\nenum viewType {\r\n  List = 'List',\r\n  Grid = 'Grid',\r\n}\r\n\r\ninterface IRadioIconsProps {\r\n  onChange: any;\r\n}\r\n\r\ninterface IRadioIconsState {\r\n  highlighted: viewType;\r\n}\r\n\r\nexport class RadioIcons extends React.Component<IRadioIconsProps, IRadioIconsState> {\r\n  constructor(props: IRadioIconsProps) {\r\n    super(props);\r\n    this.state = {\r\n      highlighted: viewType.List,\r\n    };\r\n  }\r\n\r\n  // broadcast state\r\n  public handleChange = async (event: any, items: any) => {\r\n    await this.setState({ highlighted: items.value });\r\n    this.props.onChange(this.state.highlighted);\r\n  };\r\n\r\n  public render() {\r\n    const styles = {\r\n      border: 'none',\r\n      'box-shadow': 'none',\r\n    };\r\n    return (\r\n      <div className=\"SearchBar\" id=\"buttons\">\r\n        <Button icon=\"bullets\" iconOnly onClick={e => this.handleChange(e, { value: viewType.List })} styles={styles} />\r\n        <Button\r\n          icon=\"calendar\"\r\n          iconOnly\r\n          onClick={e => this.handleChange(e, { value: viewType.Grid })}\r\n          styles={styles}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Input, Button, Icon } from '@stardust-ui/react';\r\nimport '../css/SearchBar.css';\r\nimport { RadioIcons } from './RadioIcons';\r\n\r\nenum viewType {\r\n  List = 'List',\r\n  Grid = 'Grid',\r\n}\r\n\r\ninterface ISearchBarProps {\r\n  onSearch: any;\r\n  onViewChange: any;\r\n}\r\n\r\ninterface ISearchBarState {\r\n  query: string;\r\n  viewOption: viewType;\r\n}\r\n\r\n// searchbar class contains toggle, search, and search button\r\nexport class SearchBar extends React.Component<ISearchBarProps, ISearchBarState> {\r\n  // constructs search bar with given props\r\n  constructor(props: ISearchBarProps) {\r\n    super(props);\r\n    this.state = {\r\n      query: '',\r\n      viewOption: viewType.List,\r\n    };\r\n    this.getViewOption.bind(this);\r\n    this.handleRadioButtonChange.bind(this);\r\n    this.handleKeyPress.bind(this);\r\n  }\r\n\r\n  // handler for query changed -> updates state\r\n  public handleOnChange(event: any): void {\r\n    this.setState({ query: event.target.value });\r\n  }\r\n\r\n  // on search button click or 'return' pressed\r\n  public handleOnClick(event: any): void {\r\n    this.props.onSearch(this.state.query);\r\n  }\r\n\r\n  // async to await the state change\r\n  handleRadioButtonChange = async (view: string) => {\r\n    await this.setState({ viewOption: this.getViewOption(view) });\r\n    this.props.onViewChange(this.state.viewOption);\r\n  };\r\n\r\n  getViewOption = (view: string): viewType => {\r\n    let _viewOption = viewType.List;\r\n    if (view === viewType.Grid) {\r\n      _viewOption = viewType.Grid;\r\n    }\r\n    return _viewOption;\r\n  };\r\n\r\n  // on enter search\r\n  handleKeyPress = (event: any) => {\r\n    if (event.key === 'Enter') {\r\n      this.props.onSearch(this.state.query);\r\n    }\r\n  };\r\n\r\n  // renders search component\r\n  public render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <RadioIcons onChange={this.handleRadioButtonChange} />\r\n        <Input\r\n          placeholder=\"Search...\"\r\n          icon={() => (\r\n            <Button\r\n              iconOnly\r\n              icon={() => <Icon name=\"search\" styles={{ color: 'black' }} />}\r\n              primary\r\n              onClick={e => this.handleOnClick(e)}\r\n              styles={{ backgroundColor: 'none', border: 'none', 'box-shadow': 'none', 'border-radius': 'none' }}\r\n            />\r\n          )}\r\n          input={{\r\n            styles: { backgroundColor: 'white' },\r\n          }}\r\n          onChange={e => this.handleOnChange(e)}\r\n          onKeyPress={this.handleKeyPress}\r\n        />\r\n        <br />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\nimport { ListView } from './ListView';\r\nimport { CardView } from './CardView';\r\nimport { ICard } from '../api/api.interface';\r\n\r\nexport interface IResultState {\r\n  results: ICard[];\r\n  viewOption: string;\r\n}\r\nenum viewOption {\r\n  List = 'List',\r\n  Grid = 'Grid',\r\n}\r\nexport const Results = (props: IResultState) => {\r\n  return (\r\n    <div>\r\n      {props.viewOption === viewOption.List ? (\r\n        <ListView itemList={props.results} />\r\n      ) : (\r\n        <CardView itemList={props.results} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import * as microsoftTeams from '@microsoft/teams-js';\r\nimport { ICard, QueryResponse, IAttachment } from '../api/api.interface';\r\nimport * as queryString from 'query-string';\r\n\r\n// gets frame context from url\r\nexport const submitHandler = (err: string, result: string) => {\r\n  console.log(`Err value: ${err}, result value : ${result}`);\r\n};\r\n\r\nexport const launchTaskModule = (card: ICard) => {\r\n  // Only open task module if card is an Adaptive Card\r\n  if (card.content.type && card.content.type === 'AdaptiveCard') {\r\n    const taskInfo: microsoftTeams.TaskInfo = {\r\n      height: undefined,\r\n      width: undefined,\r\n      title: card.preview.heroImageSrc,\r\n      url: undefined,\r\n      card: card.content,\r\n      completionBotId: '300639bf-2c0f-41a7-aa2e-7833664c4c76',\r\n    };\r\n    microsoftTeams.tasks.startTask(taskInfo, submitHandler);\r\n  } else {\r\n    alert(`Could not load data, ${card.content.type} is not supported.`);\r\n  }\r\n};\r\n\r\n// gets frame context from url\r\nexport const getFrameContext = (iUrl: string) => {\r\n  const url = queryString.parseUrl(iUrl);\r\n  return url.query.frameContext;\r\n};\r\n\r\nexport const processQueryResponse = (item: IAttachment): ICard => {\r\n  let url = '';\r\n  if (item.previewRawPayload.content.hasOwnProperty('images')) {\r\n    const images = item.previewRawPayload.content.images[0];\r\n    url = images.url;\r\n  }\r\n  const out: ICard = {\r\n    contentType: 'AdaptiveCard',\r\n    content: item.card.content,\r\n    preview: {\r\n      title: item.previewRawPayload.content.title,\r\n      subTitle: item.previewRawPayload.content.text,\r\n      heroImageSrc: url,\r\n    },\r\n  };\r\n  return out;\r\n};\r\n\r\n// converts a bot response to ICard\r\nexport const parseQueryResponse = (response: QueryResponse): ICard[] => {\r\n  return response && response.attachments ? response.attachments.map(processQueryResponse) : [];\r\n};\r\n","import React from 'react';\r\nimport { List, Image, Flex, Text } from '@stardust-ui/react';\r\nimport { ICard } from '../api/api.interface';\r\nimport { launchTaskModule } from '../utils/utils';\r\n\r\nexport interface IItemListProps {\r\n  itemList: ICard[];\r\n}\r\n\r\nexport const ListView = (props: IItemListProps) => {\r\n  // Key count to ensure unique keys for every item\r\n  let keyCount = 0;\r\n\r\n  // Function to translate items from IPreviewCard to List.Item format\r\n  const processItem = (item: ICard) => {\r\n    keyCount++;\r\n    const out = {\r\n      key: keyCount,\r\n      content: (\r\n        <Flex vAlign=\"center\">\r\n          <Flex.Item styles={{ width: '32px', height: '32px' }}>\r\n            <Image src={item.preview.heroImageSrc} className=\"listItemImage\" />\r\n          </Flex.Item>\r\n          <Flex.Item>\r\n            <Text content={item.preview.title} className=\"listItemTitle\" />\r\n          </Flex.Item>\r\n          {item.preview.subTitle ? (\r\n            <Flex.Item>\r\n              <Text content={item.preview.subTitle} className=\"listItemDescription\" />\r\n            </Flex.Item>\r\n          ) : null}\r\n        </Flex>\r\n      ),\r\n      className: 'listItem',\r\n      onClick: () => launchTaskModule(item),\r\n    };\r\n    return out;\r\n  };\r\n\r\n  // Output List for processed data\r\n  // Call processing function on all items\r\n  const outList = props.itemList.map(processItem);\r\n\r\n  // Render selectable list\r\n  return (\r\n    <div>\r\n      <List selectable items={outList} />\r\n    </div>\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport { Image, Text, Header, Layout } from '@stardust-ui/react';\r\nimport { launchTaskModule } from '../utils/utils';\r\nimport { ICard } from '../api/api.interface';\r\n\r\nexport const FlexItem = (props: ICard) => {\r\n  const item = props.preview;\r\n\r\n  const keyDown = (e: any) => {\r\n    // Use Enter key to launch task module\r\n    if (e.key === 'Enter') {\r\n      launchTaskModule(props);\r\n    }\r\n    // Use Escape key to exit Card View container and tab to Search Bar and toggle button\r\n    else if (e.key === 'Escape') {\r\n      const element = document.getElementById('CardsContainer')!;\r\n      element.focus();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div tabIndex={0} className=\"CardBox\" onClick={() => launchTaskModule(props)} onKeyDown={keyDown}>\r\n      <Layout\r\n        vertical\r\n        start={\r\n          <div id=\"parent\">\r\n            <Image className=\"heroImage\" src={item.heroImageSrc} circular styles={{ width: '75px', height: '75px' }} />\r\n            <Header className=\"Title\" as=\"h4\" content={item.title} />\r\n          </div>\r\n        }\r\n        main={\r\n          <span className=\"Subtitle\">\r\n            <Text content={item.subTitle} />\r\n          </span>\r\n        }\r\n        gap=\"2px\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Box } from '@stardust-ui/react';\r\nimport { FlexItem } from './FlexItem';\r\nimport '../css/CardView.css';\r\nimport { IItemListProps } from './ListView';\r\n\r\nexport const CardView = (props: IItemListProps) => {\r\n  const itemList = [];\r\n\r\n  let tempSubTitle: string | undefined;\r\n  let tempTitle: string;\r\n\r\n  const maxTitleLength = 21;\r\n  const maxSubtitleLength = 170;\r\n\r\n  for (let i = 0; i < props.itemList.length; i++) {\r\n    const item = props.itemList[i];\r\n\r\n    tempSubTitle = item.preview.subTitle;\r\n    tempTitle = item.preview.title;\r\n\r\n    // Limiting title length to maintain consistent box sizes\r\n    if (tempTitle.length > maxTitleLength) {\r\n      const newTitle = tempTitle.substring(0, maxTitleLength).concat('...');\r\n      item.preview.title = newTitle;\r\n    }\r\n    // Also limiting subtitle length to maintain box sizes, if length of subtitle is greater than a certain value, make a substring and concat \"...\"\r\n    if (tempSubTitle && tempSubTitle.length > maxSubtitleLength) {\r\n      const newSubTitle = tempSubTitle.substring(0, maxSubtitleLength).concat('...');\r\n      item.preview.subTitle = newSubTitle;\r\n    }\r\n\r\n    // Pass new Item to FlexItem function to handle format of each box, then push each item to itemList array, a unique key is needed\r\n    const newItem = <Box key={i} content={FlexItem(item)} />;\r\n    itemList.push(newItem);\r\n  }\r\n\r\n  return (\r\n    <div className=\"CardsContainer\" id=\"CardsContainer\" tabIndex={1}>\r\n      {itemList}\r\n    </div>\r\n  );\r\n};\r\n","import { themes, ThemeInput } from '@stardust-ui/react';\r\nimport * as queryString from 'query-string';\r\n\r\nenum themeTypes {\r\n  Dark = 'dark',\r\n  Default = 'default',\r\n  Contrast = 'contrast',\r\n}\r\n\r\n// gets theme name from url params\r\nexport const getThemeFromURL = (iUrl: string): string => {\r\n  const url = queryString.parseUrl(iUrl);\r\n\r\n  const themeString: any = url.query.theme;\r\n\r\n  if (!themeString) {\r\n    return 'default';\r\n  }\r\n  return themeString;\r\n};\r\n\r\n// gets theme type from string\r\nexport const getTheme = (theme: string): ThemeInput => {\r\n  const newTheme: ThemeInput = themes.teams;\r\n\r\n  switch (theme) {\r\n    case themeTypes.Contrast:\r\n      return themes.teamsHighContrast;\r\n    case themeTypes.Dark:\r\n      return themes.teamsDark;\r\n  }\r\n\r\n  return newTheme;\r\n};\r\n","import { ICard, QueryResponse, ICommand } from '../api/api.interface';\r\nimport * as microsoftTeams from '@microsoft/teams-js';\r\n\r\nconst listOfSupportedCmds: ICommand[] = [\r\n  {\r\n    title: 'queryCards',\r\n    id: 'queryCards',\r\n  },\r\n  {\r\n    title: 'queryAdaptiveCards',\r\n    id: 'queryAdaptiveCards',\r\n  },\r\n  {\r\n    title: 'queryHeroCards',\r\n    id: 'queryAdaptiveCards',\r\n  },\r\n];\r\n\r\nexport const getResults = (\r\n  query: string,\r\n  // should be microsoftTeams.bot.QueryResponse\r\n  onResults: (response: QueryResponse) => void,\r\n  onError: (error: string) => {},\r\n) => {\r\n  microsoftTeams.bot.sendQuery({ query }, onResults, onError);\r\n};\r\n\r\nexport const getSupportedCommands = (\r\n  onBotGetCommandResponse: (data: ICommand[]) => void,\r\n  onError: (error: string) => {},\r\n): void => {\r\n  // Prod\r\n  // microsoftTeams.bot.getSupportedCommands(onBotGetCommandResponse, onError );\r\n\r\n  // TODO REMOVE : Dummy\r\n  onBotGetCommandResponse(listOfSupportedCmds);\r\n};\r\n","import * as React from 'react';\r\nimport { Text, Input, Dropdown } from '@stardust-ui/react';\r\nimport * as microsoftTeams from '@microsoft/teams-js';\r\nimport { getSupportedCommands } from '../api/api';\r\nimport { ICommand } from '../api/api.interface';\r\n\r\nexport const SettingsView = (props: {}) => {\r\n  // STATE HOOKS\r\n  const [Commands, setCommands] = React.useState([] as ICommand[]);\r\n  const [CommandSelected, setCommandSelected] = React.useState('');\r\n  const [TabName, setTabName] = React.useState('JSONTabDefault');\r\n\r\n  // HANDLERS\r\n  const onError = (error: string): any => {\r\n    alert(error);\r\n  };\r\n\r\n  const onResults = (response: ICommand[]): void => {\r\n    setCommands(response);\r\n  };\r\n\r\n  const handleNameChange = async (event: any) => {\r\n    await setTabName(event.target.value);\r\n  };\r\n\r\n  const handleCommandChange = async (event: any, res: any) => {\r\n    await setCommandSelected(res.value);\r\n    microsoftTeams.settings.setValidityState(true);\r\n  };\r\n\r\n  // EFFECT HOOKS\r\n  React.useEffect(() => {\r\n    microsoftTeams.initialize();\r\n    microsoftTeams.settings.registerOnSaveHandler(saveEvent => {\r\n      microsoftTeams.settings.setSettings({\r\n        entityId: 'JSONTab',\r\n        contentUrl: `https://microsoft-teams-json-tab.azurewebsites.net?theme={theme}&frameContext=content&commandId=${CommandSelected}`,\r\n        suggestedDisplayName: TabName,\r\n      });\r\n      saveEvent.notifySuccess();\r\n    });\r\n    getSupportedCommands(onResults, onError);\r\n  });\r\n\r\n  // CONSTANTS\r\n  const listOfCmds = Commands.map((command: ICommand) => {\r\n    return command.title;\r\n  });\r\n  return (\r\n    <div>\r\n      <Text size={'smaller'} content={'Name your tab'} />\r\n      <Input fluid placeholder=\"Tab name\" onChange={e => handleNameChange(e)} />\r\n      <br />\r\n      <Text size={'smaller'} content={\"Select the command you'd like query your bot with\"} />\r\n      <Dropdown\r\n        fluid\r\n        items={listOfCmds}\r\n        noResultsMessage=\"We couldn't find any matches.\"\r\n        onSelectedChange={handleCommandChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './css/App.css';\r\n\r\nimport { SearchBar } from './components/SearchBar';\r\nimport { Results } from './components/Results';\r\n\r\nimport { getResults } from './api/api';\r\n\r\nimport * as microsoftTeams from '@microsoft/teams-js';\r\nimport { ICard, QueryResponse } from './api/api.interface';\r\nimport { getFrameContext, parseQueryResponse } from './utils/utils';\r\nimport { SettingsView } from './components/SettingsView';\r\n\r\ninterface IAppState {\r\n  viewOption: string;\r\n  results: ICard[];\r\n}\r\n\r\ninterface IAppProps {\r\n  onThemeChange: any;\r\n}\r\n\r\nclass App extends React.Component<IAppProps, IAppState> {\r\n  constructor(props: IAppProps) {\r\n    super(props);\r\n    this.state = {\r\n      viewOption: 'List',\r\n      results: [],\r\n    };\r\n  }\r\n\r\n  // handles searchbar change\r\n  public handleSearch = (query: string, viewOption: string) => {\r\n    if (query !== undefined) {\r\n      getResults(query, this.onResults, this.onError);\r\n    }\r\n  };\r\n\r\n  // handles change of view\r\n  public handleViewChange = (viewOption: string) => {\r\n    if (viewOption) {\r\n      this.setState({ viewOption: viewOption });\r\n    }\r\n  };\r\n\r\n  public componentDidMount() {\r\n    microsoftTeams.initialize();\r\n    microsoftTeams.registerOnThemeChangeHandler(this.props.onThemeChange);\r\n    microsoftTeams.appInitialization.notifyAppLoaded();\r\n    getResults('', this.onResults, this.onError);\r\n  }\r\n\r\n  public onError(error: string): any {\r\n    microsoftTeams.appInitialization.notifyFailure({\r\n      reason: microsoftTeams.appInitialization.FailedReason.Other,\r\n      message: error,\r\n    });\r\n    alert(error);\r\n  }\r\n\r\n  // should be microsoftTeams.bot.QueryResponse\r\n  public onResults = (response: QueryResponse): void => {\r\n    this.setState({ results: parseQueryResponse(response) });\r\n    microsoftTeams.appInitialization.notifySuccess();\r\n  };\r\n\r\n  // calls api\r\n  render() {\r\n    const url: string = window.location.href;\r\n    const frameContext = getFrameContext(url);\r\n\r\n    if (frameContext === 'settings') {\r\n      return (\r\n        <div>\r\n          <SettingsView />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <SearchBar onSearch={this.handleSearch} onViewChange={this.handleViewChange} />\r\n          <Results results={this.state.results} viewOption={this.state.viewOption} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { Provider, ThemeInput } from '@stardust-ui/react';\r\nimport App from './App';\r\nimport * as themeUtils from './utils/themeUtils';\r\n\r\ninterface IProviderWrapperState {\r\n  currentTheme: ThemeInput;\r\n}\r\n\r\n// wraps provider component so that theme can be held in state\r\nexport class ProviderWrapper extends React.Component<{}, IProviderWrapperState> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n    // theme from params\r\n    const url: string = window.location.href;\r\n    const theme: string = themeUtils.getThemeFromURL(url);\r\n    this.state = {\r\n      currentTheme: themeUtils.getTheme(theme),\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Provider theme={this.state.currentTheme}>\r\n        <App onThemeChange={this.handleThemeChange} />\r\n      </Provider>\r\n    );\r\n  }\r\n\r\n  // handler for change in theme\r\n  public handleThemeChange = (theme: string) => {\r\n    this.setState({ currentTheme: themeUtils.getTheme(theme) });\r\n  };\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { ProviderWrapper } from './ProviderWrapper';\r\n\r\nReactDOM.render(<ProviderWrapper />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}