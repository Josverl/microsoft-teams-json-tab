{"version":3,"sources":["serviceWorker.ts","components/RadioIcons.tsx","components/SearchBar.tsx","components/Results.tsx","utils/utils.ts","components/ListView.tsx","components/FlexItem.tsx","components/CardView.tsx","utils/themeUtils.ts","api/api.ts","components/SettingsView.tsx","App.tsx","ProviderWrapper.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","viewType","RadioIcons","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","event","items","wrap","_context","prev","next","setState","highlighted","value","onChange","state","stop","_x","_x2","apply","arguments","List","inherits","createClass","key","_this2","styles","border","box-shadow","react_default","createElement","className","id","Button","icon","iconOnly","onClick","e","Grid","React","Component","viewOption","SearchBar","_React$useState","useState","_React$useState2","slicedToArray","Query","setQuery","handleOnChange","target","handleOnClick","_ref2","_callee2","_context2","onSearch","RadioIcons_RadioIcons","view","newView","onViewChange","Input","placeholder","Icon","name","color","primary","backgroundColor","border-radius","input","onKeyPress","submitHandler","err","result","console","log","concat","launchTaskModule","card","content","type","taskInfo","height","undefined","width","title","preview","heroImageSrc","url","completionBotId","microsoftTeams","startTask","alert","processQueryResponse","item","previewRawPayload","hasOwnProperty","images","contentType","subTitle","text","ListView","keyCount","outList","itemList","map","Flex","vAlign","Item","Image","src","Text","selectable","FlexItem","react","tabIndex","onKeyDown","document","getElementById","focus","Layout","vertical","start","circular","Header","as","main","gap","CardView","tempSubTitle","tempTitle","i","length","newTitle","substring","newSubTitle","newItem","Box","push","themeTypes","Results","ListView_ListView","results","CardView_CardView","getResults","query","onResults","onError","sendQuery","SettingsView","CommandList","setCommandList","_React$useState3","_React$useState4","CommandSelected","setCommandSelected","_React$useState5","_React$useState6","TabName","setTabName","error","onGetCommandResponse","response","handleNameChange","handleCommandChange","res","setValidityState","_x3","registerOnSaveHandler","saveEvent","setSettings","entityId","contentUrl","suggestedDisplayName","notifySuccess","onBotGetCommandResponse","getSupportedCommands","size","fluid","Dropdown","command","noResultsMessage","onSelectedChange","App","ViewOption","setViewOption","Result","setResult","attachments","parseQueryResponse","useEffect","onThemeChange","iUrl","href","queryString","frameContext","SettingsView_SettingsView","SearchBar_SearchBar","Results_Results","getThemeFromURL","themeString","theme","getTheme","newTheme","themes","teams","Contrast","teamsHighContrast","Dark","teamsDark","ProviderWrapper","handleThemeChange","currentTheme","themeUtils","Provider","src_App","ReactDOM","render","ProviderWrapper_ProviderWrapper","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.963d3383.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ninterface Config {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Button } from '@stardust-ui/react';\r\nimport '../css/SearchBar.css';\r\n\r\nenum viewType {\r\n  List = 'List',\r\n  Grid = 'Grid',\r\n}\r\n\r\ninterface IRadioIconsProps {\r\n  onChange: any;\r\n}\r\n\r\ninterface IRadioIconsState {\r\n  highlighted: viewType;\r\n}\r\n\r\nexport class RadioIcons extends React.Component<IRadioIconsProps, IRadioIconsState> {\r\n  constructor(props: IRadioIconsProps) {\r\n    super(props);\r\n    this.state = {\r\n      highlighted: viewType.List,\r\n    };\r\n  }\r\n\r\n  // broadcast state\r\n  public handleChange = async (event: any, items: any) => {\r\n    await this.setState({ highlighted: items.value });\r\n    this.props.onChange(this.state.highlighted);\r\n  };\r\n\r\n  public render() {\r\n    const styles = {\r\n      border: 'none',\r\n      'box-shadow': 'none',\r\n    };\r\n    return (\r\n      <div className=\"SearchBar\" id=\"buttons\">\r\n        <Button icon=\"bullets\" iconOnly onClick={e => this.handleChange(e, { value: viewType.List })} styles={styles} />\r\n        <Button\r\n          icon=\"calendar\"\r\n          iconOnly\r\n          onClick={e => this.handleChange(e, { value: viewType.Grid })}\r\n          styles={styles}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Input, Button, Icon } from '@stardust-ui/react';\r\nimport '../css/SearchBar.css';\r\nimport { RadioIcons } from './RadioIcons';\r\n\r\nenum viewType {\r\n  List = 'List',\r\n  Grid = 'Grid',\r\n}\r\n\r\ninterface ISearchBarProps {\r\n  onSearch: any;\r\n  onViewChange: any;\r\n}\r\n\r\nexport const SearchBar = (props: ISearchBarProps) => {\r\n  // HOOKS\r\n  const [Query, setQuery] = React.useState('');\r\n\r\n  // HANDLERS\r\n  const handleOnChange = async (event: any) => {\r\n    setQuery(event.target.value);\r\n  };\r\n\r\n  const handleOnClick = async (event: any) => {\r\n    props.onSearch(Query);\r\n  };\r\n\r\n  const handleRadioButtonChange = (view: string) => {\r\n    const newView = view === viewType.List ? viewType.List : viewType.Grid;\r\n    props.onViewChange(newView);\r\n  };\r\n\r\n  const handleKeyPress = (event: any) => {\r\n    if (event.key === 'Enter') {\r\n      props.onSearch(Query);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"SearchBar\">\r\n      <RadioIcons onChange={handleRadioButtonChange} />\r\n      <Input\r\n        placeholder=\"Search...\"\r\n        icon={() => (\r\n          <Button\r\n            iconOnly\r\n            icon={() => <Icon name=\"search\" styles={{ color: 'black' }} />}\r\n            primary\r\n            onClick={e => handleOnClick(e)}\r\n            styles={{ backgroundColor: 'none', border: 'none', 'box-shadow': 'none', 'border-radius': 'none' }}\r\n          />\r\n        )}\r\n        input={{\r\n          styles: { backgroundColor: 'white' },\r\n        }}\r\n        onChange={e => handleOnChange(e)}\r\n        onKeyPress={handleKeyPress}\r\n      />\r\n      <br />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { ListView } from './ListView';\r\nimport { CardView } from './CardView';\r\nimport { ICard } from '../api/api.interface';\r\n\r\nexport interface IResultState {\r\n  results: ICard[];\r\n  viewOption: string;\r\n}\r\nenum viewOption {\r\n  List = 'List',\r\n  Grid = 'Grid',\r\n}\r\nexport const Results = (props: IResultState) => {\r\n  return (\r\n    <div>\r\n      {props.viewOption === viewOption.List ? (\r\n        <ListView itemList={props.results} />\r\n      ) : (\r\n        <CardView itemList={props.results} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import * as microsoftTeams from '@microsoft/teams-js';\r\nimport { ICard } from '../api/api.interface';\r\nimport * as queryString from 'query-string';\r\n\r\n// gets frame context from url\r\nexport const submitHandler = (err: string, result: string) => {\r\n  console.log(`Err value: ${err}, result value : ${result}`);\r\n};\r\n\r\nexport const launchTaskModule = (card: ICard) => {\r\n  // Only open task module if card is an Adaptive Card\r\n  if (card.content.type && card.content.type === 'AdaptiveCard') {\r\n    const taskInfo: microsoftTeams.TaskInfo = {\r\n      height: undefined,\r\n      width: undefined,\r\n      title: card.preview.heroImageSrc,\r\n      url: undefined,\r\n      card: card.content,\r\n      completionBotId: '300639bf-2c0f-41a7-aa2e-7833664c4c76',\r\n    };\r\n    microsoftTeams.tasks.startTask(taskInfo, submitHandler);\r\n  } else {\r\n    alert(`Could not load data, ${card.content.type} is not supported.`);\r\n  }\r\n};\r\n\r\n// gets frame context from url\r\nexport const getFrameContext = (iUrl: string) => {\r\n  const url = queryString.parseUrl(iUrl);\r\n  return url.query.frameContext;\r\n};\r\n\r\nexport const processQueryResponse = (item: microsoftTeams.bot.IAttachment): ICard => {\r\n  let url = '';\r\n  if (item.previewRawPayload.content.hasOwnProperty('images')) {\r\n    const images = item.previewRawPayload.content.images[0];\r\n    url = images.url;\r\n  }\r\n  const out: ICard = {\r\n    contentType: 'AdaptiveCard',\r\n    content: item.card.content,\r\n    preview: {\r\n      title: item.previewRawPayload.content.title,\r\n      subTitle: item.previewRawPayload.content.text,\r\n      heroImageSrc: url,\r\n    },\r\n  };\r\n  return out;\r\n};\r\n\r\n// converts a bot response to ICard\r\nexport const parseQueryResponse = (response: microsoftTeams.bot.QueryResponse): ICard[] => {\r\n  return response && response.attachments ? response.attachments.map(processQueryResponse) : [];\r\n};\r\n","import React from 'react';\r\nimport { List, Image, Flex, Text } from '@stardust-ui/react';\r\nimport { ICard } from '../api/api.interface';\r\nimport { launchTaskModule } from '../utils/utils';\r\n\r\nexport interface IItemListProps {\r\n  itemList: ICard[];\r\n}\r\n\r\nexport const ListView = (props: IItemListProps) => {\r\n  // Key count to ensure unique keys for every item\r\n  let keyCount = 0;\r\n\r\n  // Function to translate items from IPreviewCard to List.Item format\r\n  const processItem = (item: ICard) => {\r\n    keyCount++;\r\n    const out = {\r\n      key: keyCount,\r\n      content: (\r\n        <Flex vAlign=\"center\">\r\n          <Flex.Item styles={{ width: '32px', height: '32px' }}>\r\n            <Image src={item.preview.heroImageSrc} className=\"listItemImage\" />\r\n          </Flex.Item>\r\n          <Flex.Item>\r\n            <Text content={item.preview.title} className=\"listItemTitle\" />\r\n          </Flex.Item>\r\n          {item.preview.subTitle ? (\r\n            <Flex.Item>\r\n              <Text content={item.preview.subTitle} className=\"listItemDescription\" />\r\n            </Flex.Item>\r\n          ) : null}\r\n        </Flex>\r\n      ),\r\n      className: 'listItem',\r\n      onClick: () => launchTaskModule(item),\r\n    };\r\n    return out;\r\n  };\r\n\r\n  // Output List for processed data\r\n  // Call processing function on all items\r\n  const outList = props.itemList.map(processItem);\r\n\r\n  // Render selectable list\r\n  return (\r\n    <div>\r\n      <List selectable items={outList} />\r\n    </div>\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport { Image, Text, Header, Layout } from '@stardust-ui/react';\r\nimport { launchTaskModule } from '../utils/utils';\r\nimport { ICard } from '../api/api.interface';\r\n\r\nexport const FlexItem = (props: ICard) => {\r\n  const item = props.preview;\r\n\r\n  const keyDown = (e: any) => {\r\n    // Use Enter key to launch task module\r\n    if (e.key === 'Enter') {\r\n      launchTaskModule(props);\r\n    }\r\n    // Use Escape key to exit Card View container and tab to Search Bar and toggle button\r\n    else if (e.key === 'Escape') {\r\n      const element = document.getElementById('CardsContainer')!;\r\n      element.focus();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div tabIndex={0} className=\"CardBox\" onClick={() => launchTaskModule(props)} onKeyDown={keyDown}>\r\n      <Layout\r\n        vertical\r\n        start={\r\n          <div id=\"parent\">\r\n            <Image className=\"heroImage\" src={item.heroImageSrc} circular styles={{ width: '75px', height: '75px' }} />\r\n            <Header className=\"Title\" as=\"h4\" content={item.title} />\r\n          </div>\r\n        }\r\n        main={\r\n          <span className=\"Subtitle\">\r\n            <Text content={item.subTitle} />\r\n          </span>\r\n        }\r\n        gap=\"2px\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Box } from '@stardust-ui/react';\r\nimport { FlexItem } from './FlexItem';\r\nimport '../css/CardView.css';\r\nimport { IItemListProps } from './ListView';\r\n\r\nexport const CardView = (props: IItemListProps) => {\r\n  const itemList = [];\r\n\r\n  let tempSubTitle: string | undefined;\r\n  let tempTitle: string;\r\n\r\n  const maxTitleLength = 21;\r\n  const maxSubtitleLength = 170;\r\n\r\n  for (let i = 0; i < props.itemList.length; i++) {\r\n    const item = props.itemList[i];\r\n\r\n    tempSubTitle = item.preview.subTitle;\r\n    tempTitle = item.preview.title;\r\n\r\n    // Limiting title length to maintain consistent box sizes\r\n    if (tempTitle.length > maxTitleLength) {\r\n      const newTitle = tempTitle.substring(0, maxTitleLength).concat('...');\r\n      item.preview.title = newTitle;\r\n    }\r\n    // Also limiting subtitle length to maintain box sizes, if length of subtitle is greater than a certain value, make a substring and concat \"...\"\r\n    if (tempSubTitle && tempSubTitle.length > maxSubtitleLength) {\r\n      const newSubTitle = tempSubTitle.substring(0, maxSubtitleLength).concat('...');\r\n      item.preview.subTitle = newSubTitle;\r\n    }\r\n\r\n    // Pass new Item to FlexItem function to handle format of each box, then push each item to itemList array, a unique key is needed\r\n    const newItem = <Box key={i} content={FlexItem(item)} />;\r\n    itemList.push(newItem);\r\n  }\r\n\r\n  return (\r\n    <div className=\"CardsContainer\" id=\"CardsContainer\" tabIndex={1}>\r\n      {itemList}\r\n    </div>\r\n  );\r\n};\r\n","import { themes, ThemeInput } from '@stardust-ui/react';\r\nimport * as queryString from 'query-string';\r\n\r\nenum themeTypes {\r\n  Dark = 'dark',\r\n  Default = 'default',\r\n  Contrast = 'contrast',\r\n}\r\n\r\n// gets theme name from url params\r\nexport const getThemeFromURL = (iUrl: string): string => {\r\n  const url = queryString.parseUrl(iUrl);\r\n\r\n  const themeString: any = url.query.theme;\r\n\r\n  if (!themeString) {\r\n    return 'default';\r\n  }\r\n  return themeString;\r\n};\r\n\r\n// gets theme type from string\r\nexport const getTheme = (theme: string): ThemeInput => {\r\n  const newTheme: ThemeInput = themes.teams;\r\n\r\n  switch (theme) {\r\n    case themeTypes.Contrast:\r\n      return themes.teamsHighContrast;\r\n    case themeTypes.Dark:\r\n      return themes.teamsDark;\r\n  }\r\n\r\n  return newTheme;\r\n};\r\n","import * as microsoftTeams from '@microsoft/teams-js';\r\n\r\nexport const getResults = (\r\n  query: string,\r\n  // should be microsoftTeams.bot.QueryResponse\r\n  onResults: (response: microsoftTeams.bot.QueryResponse) => void,\r\n  onError: (error: string) => {},\r\n): void => {\r\n  microsoftTeams.bot.sendQuery({ query }, onResults, onError);\r\n};\r\n\r\nexport const getSupportedCommands = (\r\n  onBotGetCommandResponse: (response: microsoftTeams.bot.ICommand[]) => void,\r\n  onError: (error: string) => {},\r\n): void => {\r\n  microsoftTeams.bot.getSupportedCommands(onBotGetCommandResponse, onError);\r\n};\r\n","import * as React from 'react';\r\nimport { Text, Input, Dropdown } from '@stardust-ui/react';\r\nimport * as microsoftTeams from '@microsoft/teams-js';\r\nimport { getSupportedCommands } from '../api/api';\r\n\r\nexport const SettingsView = (props: {}) => {\r\n  // STATE HOOKS\r\n  const [CommandList, setCommandList] = React.useState([] as microsoftTeams.bot.ICommand[]);\r\n  const [CommandSelected, setCommandSelected] = React.useState('');\r\n  const [TabName, setTabName] = React.useState('JSONTabDefault');\r\n\r\n  // HANDLERS\r\n  const onError = (error: string): any => {\r\n    alert(error);\r\n  };\r\n\r\n  const onGetCommandResponse = (response: microsoftTeams.bot.ICommand[]): void => {\r\n    setCommandList(response);\r\n  };\r\n\r\n  const handleNameChange = async (event: any) => {\r\n    await setTabName(event.target.value);\r\n  };\r\n\r\n  const handleCommandChange = async (event: any, res: any) => {\r\n    await setCommandSelected(res.value);\r\n    microsoftTeams.settings.setValidityState(true);\r\n  };\r\n\r\n  // EFFECT HOOKS\r\n  React.useEffect(() => {\r\n    microsoftTeams.initialize();\r\n    microsoftTeams.settings.registerOnSaveHandler(saveEvent => {\r\n      microsoftTeams.settings.setSettings({\r\n        entityId: 'JSONTab',\r\n        contentUrl: `https://microsoft-teams-json-tab.azurewebsites.net?theme={theme}&frameContext=content&commandId=${CommandSelected}`,\r\n        suggestedDisplayName: TabName,\r\n      });\r\n      saveEvent.notifySuccess();\r\n    });\r\n    getSupportedCommands(onGetCommandResponse, onError);\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Text size={'medium'} content={'Name your tab'} />\r\n      </div>\r\n      <Input fluid placeholder={'Tab name'} onChange={e => handleNameChange(e)} />\r\n      <div>\r\n        <Text size={'medium'} content={\"Select the command you'd like query your bot with\"} />\r\n      </div>\r\n      <Dropdown\r\n        fluid\r\n        items={CommandList.map((command: microsoftTeams.bot.ICommand): string => {\r\n          return command.title;\r\n        })}\r\n        noResultsMessage=\"We couldn't find any matches.\"\r\n        onSelectedChange={handleCommandChange}\r\n        placeholder=\"Select the command\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './css/App.css';\r\n\r\nimport { SearchBar } from './components/SearchBar';\r\nimport { Results } from './components/Results';\r\n\r\nimport { getResults } from './api/api';\r\n\r\nimport * as microsoftTeams from '@microsoft/teams-js';\r\nimport { ICard } from './api/api.interface';\r\nimport { getFrameContext, parseQueryResponse } from './utils/utils';\r\nimport { SettingsView } from './components/SettingsView';\r\n\r\ninterface IAppProps {\r\n  onThemeChange: any;\r\n}\r\n\r\nexport const App = (props: IAppProps) => {\r\n  // STATE HOOKS\r\n  const [ViewOption, setViewOption] = React.useState('List');\r\n  const [Result, setResult] = React.useState([] as ICard[]);\r\n\r\n  // HANDLERS\r\n\r\n  const onError = (error: string): any => {\r\n    alert(error);\r\n  };\r\n\r\n  const onResults = (response: microsoftTeams.bot.QueryResponse) => {\r\n    setResult(parseQueryResponse(response));\r\n  };\r\n\r\n  const handleSearch = (query: string, viewOption: string) => {\r\n    if (query !== undefined) {\r\n      getResults(query, onResults, onError);\r\n    }\r\n  };\r\n\r\n  const handleViewChange = (viewOption: string) => {\r\n    if (viewOption) {\r\n      setViewOption(viewOption);\r\n    }\r\n  };\r\n\r\n  // EFFECT HOOKS\r\n  React.useEffect(() => {\r\n    microsoftTeams.initialize();\r\n    microsoftTeams.registerOnThemeChangeHandler(props.onThemeChange);\r\n    getResults('', onResults, onError);\r\n  }, [props.onThemeChange]);\r\n\r\n  // CONSTANTS\r\n  const url: string = window.location.href;\r\n  const frameContext = getFrameContext(url);\r\n  if (frameContext === 'settings') {\r\n    return (\r\n      <div>\r\n        <SettingsView />\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <SearchBar onSearch={handleSearch} onViewChange={handleViewChange} />\r\n        <Results results={Result} viewOption={ViewOption} />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { Provider, ThemeInput } from '@stardust-ui/react';\r\nimport App from './App';\r\nimport * as themeUtils from './utils/themeUtils';\r\n\r\ninterface IProviderWrapperState {\r\n  currentTheme: ThemeInput;\r\n}\r\n\r\n// wraps provider component so that theme can be held in state\r\nexport class ProviderWrapper extends React.Component<{}, IProviderWrapperState> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n    // theme from params\r\n    const url: string = window.location.href;\r\n    const theme: string = themeUtils.getThemeFromURL(url);\r\n    this.state = {\r\n      currentTheme: themeUtils.getTheme(theme),\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Provider theme={this.state.currentTheme}>\r\n        <App onThemeChange={this.handleThemeChange} />\r\n      </Provider>\r\n    );\r\n  }\r\n\r\n  // handler for change in theme\r\n  public handleThemeChange = (theme: string) => {\r\n    this.setState({ currentTheme: themeUtils.getTheme(theme) });\r\n  };\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { ProviderWrapper } from './ProviderWrapper';\r\n\r\nReactDOM.render(<ProviderWrapper />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}