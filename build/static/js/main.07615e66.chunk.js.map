{"version":3,"sources":["serviceWorker.ts","components/RadioIcons.tsx","api/api.ts","utils/utils.ts","components/SettingsView.tsx","components/SearchBar.tsx","components/Results.tsx","components/Overflow.tsx","components/CustomImage.tsx","components/ListView.tsx","utils/themeContext.ts","components/GridItem.tsx","components/CardView.tsx","components/ContentView.tsx","components/LoadIcon.tsx","components/EmptyScreenView.tsx","components/ErrorView.tsx","components/AuthView.tsx","utils/themeUtils.ts","App.tsx","index.tsx","ProviderWrapper.tsx"],"names":["Boolean","window","location","hostname","match","viewType","getResults","request","onResults","onError","microsoftTeams","sendQuery","removeUnsupportedActions","card","SupportedActions","newCard","actions","filter","item","includes","type","launchTaskModule","event","content","taskInfo","height","undefined","width","title","preview","url","completionBotId","botId","elem","currentTarget","startTask","err","result","target","console","log","concat","focus","submitHandler","alert","getCommandId","iUrl","queryString","query","commandId","parseQueryResponse","response","attachments","map","botID","previewRawPayload","hasOwnProperty","images","contentType","subTitle","subtitle","text","heroImageSrc","processQueryResponse","stripHTML","html","div","document","createElement","innerHTML","textContent","innerText","processOverflowAction","action","id","enabled","SettingsView","_React$useState","React","_React$useState2","Object","slicedToArray","CommandList","setCommandList","_React$useState3","_React$useState4","ContentUrl","setContentUrl","_React$useState5","_React$useState6","TabName","setTabName","error","onGetCommandResponse","length","onCommandSelection","notifySuccess","command","initialRun","origin","setValidityState","saveHandler","saveEvent","setSettings","entityId","contentUrl","suggestedDisplayName","notifyAppLoaded","registerOnSaveHandler","onBotGetCommandResponse","getSupportedCommands","react","Text","size","Input","fluid","placeholder","onChange","value","style","marginTop","Dropdown","items","noResultsMessage","onSelectedChange","res","find","RadioIcons","props","handleChange","key","icon","name","outline","aria-label","onClick","e","List","Grid","react_default","a","Flex","styles","vAlign","Menu","defaultActiveIndex","accessibility","menuAsToolbarBehavior","iconOnly","viewOption","SearchBar","useState","Query","setQuery","onChangeHelperDebounced","debounce","onSearch","leading","trailing","gap","className","customClass","Item","push","RadioIcons_RadioIcons","view","newView","onViewChange","margin","input","newQuery","onKeyPress","onEnter","onFocus","aria-controls","SearchBarWrapper","createComponent","displayName","render","_ref","stardust","classes","SearchBar_SearchBar","root","Overflow","menuOpen","setMenuOpen","useEffect","openMenu","active","indicator","menu","disabled","open","onMenuOpenChange","CustomImage","src","ImageSrc","setImageSrc","borderRadius","ListView","innerHeight","Height","setHeight","updateHeight","addEventListener","removeEventListener","keyCount","listRef","createRef","focusFirst","firstElem","current","firstChild","handleContextMenu","preventDefault","focusedElem","getElementsByTagName","click","onBlur","outList","itemList","fill","CustomImage_CustomImage","shrink","grow","truncated","weight","Overflow_Overflow","es","innerRef","selectable","overflow","ThemeContext","createContext","theme","GridItem","currentTheme","useContext","Segment","data-is-focusable","padding","boxShadow","position","border","right","top","column","textAlign","display","WebkitBoxOrient","WebkitLineClamp","CardView","calculateColumns","Math","floor","innerWidth","Columns","setColumns","updateColumn","gridRef","columns","gridBehavior","GridItem_GridItem","AppStateEnum","Results","ListView_ListView","results","CardView_CardView","LoadIcon","isLoading","Loader","EmptyScreenView","button","buttonText","Button","primary","message","imageSrc","Image","ErrorView","EmptyScreenView_EmptyScreenView","AuthView","ErrorMessage","setErrorMessage","onAuthSuccess","onAuthenticated","data","ResponseType","onAuthFailure","authParams","currentQuery","authenticate","themeTypes","ContentView","ViewOption","setViewOption","Result","setResult","Render","AppState","setAppState","_React$useState7","_React$useState8","_React$useState9","_React$useState10","AuthData","setAuthData","_React$useState11","href","_React$useState12","_React$useState13","_React$useState14","FocusFirstResult","setFocusFirstResult","Error","Auth","authResponse","resultsResponse","handleIfNoResults","NoResults","onThemeChange","isInitialRun","Results_Results","LoadIcon_LoadIcon","ErrorView_ErrorView","AuthView_AuthView","queryInfo","Loading","ContentViewWrapper","ContentView_ContentView","App","frameContext","SettingsView_SettingsView","getTheme","customTheme","Contrast","componentVariables","backgroundColor","colorScheme","default","background2","_ref2","ListItem","_ref3","background","hoverBackgroundColor","backgroundHover1","hoverTextColor","foregroundFocus","activeBackgroundColor","borderActive","activeTextColor","_ref4","_ref5","inputBackgroundColor","componentStyles","_ref6","variables","_ref7","zIndex","_ref8",":hover","color","& .ui-menu",":active",":focus","_ref9","_ref10","mergeThemes","themes","teamsHighContrast","Dark","teamsDark","teams","ReactDOM","initialTheme","themeUtils","themeString","Theme","setTheme","themeVariables","siteVariables","Provider","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,+DCd9BC,6CCCQC,EAAa,SACxBC,EACAC,EACAC,GAEAC,MAAmBC,UAAUJ,EAASC,EAAWC,IAUtCG,EAA2B,SAACC,GACvC,IAAMC,EAA6B,CAAC,iBAAkB,gBAAiB,kBAAmB,SAAU,UAChGC,EAAUF,EAMd,OALIA,EAAKG,UACPD,EAAQC,QAAUH,EAAKG,QAAQC,OAAO,SAACC,GACrC,OAAOJ,EAAiBK,SAASD,EAAKE,SAGnCL,GCdIM,EAAmB,SAACC,EAAuBT,GAEtD,GAAIA,EAAKU,QAAQH,MAA8B,iBAAtBP,EAAKU,QAAQH,KAAyB,CAC7D,IAAMI,EAAoC,CACxCC,YAAQC,EACRC,MAAO,IACPC,MAAOf,EAAKgB,QAAQD,MACpBE,SAAKJ,EACLb,KAAMA,EAAKU,QACXQ,gBAAiBlB,EAAKmB,OAElBC,EAAOX,EAAMY,cACnBxB,QAAqByB,UAAUX,EAAU,SAACY,EAAaC,GAAd,OAjBhB,SAACD,EAAaC,EAAgBC,GACzDC,QAAQC,IAAR,cAAAC,OAA0BL,EAA1B,qBAAAK,OAAiDJ,IACjDC,EAAOI,QAeqEC,CAAcP,EAAKC,EAAQJ,UAErGW,MAAK,qDAIIC,EAAe,SAACC,GAE3B,OADYC,WAAqBD,GACtBE,MAAMC,WAuCNC,EAAqB,SAACC,GACjC,OAAIA,GAAYA,EAASC,YAChBD,EAASC,YAAYC,IAC1B,SAACnC,GAAD,OA5B8B,SAACA,EAAqCoC,GACxE,IAAIxB,EAAM,GAoBV,OAnBIZ,EAAKqC,kBAAkBhC,QAAQiC,eAAe,WAE9CtC,EAAKqC,kBAAkBhC,QAAQkC,QAC/BvC,EAAKqC,kBAAkBhC,QAAQkC,OAAO,IACtCvC,EAAKqC,kBAAkBhC,QAAQkC,OAAO,GAAG3B,MAEzCA,EAAMZ,EAAKqC,kBAAkBhC,QAAQkC,OAAO,GAAG3B,KAEhC,CACjB4B,YAAa,eACbnC,QAASX,EAAyBM,EAAKL,KAAKU,SAC5CM,QAAS,CACPD,MAAOV,EAAKqC,kBAAkBhC,QAAQK,MACtC+B,SAAUzC,EAAKqC,kBAAkBhC,QAAQqC,SACzCC,KAAM3C,EAAKqC,kBAAkBhC,QAAQsC,KACrCC,aAAchC,GAEhBE,MAAOsB,GAS2CS,CAAqB7C,EAAMiC,EAASnB,SAG/E,IAKEgC,EAAY,SAACC,GACxB,IAAIC,EAAMC,SAASC,cAAc,OAEjC,OADAF,EAAIG,UAAYJ,EACTC,EAAII,aAAeJ,EAAIK,WAAa,IAGhCC,EAAwB,SAACC,GAEpC,MAAO,CACLC,GAAID,EAAOC,GACXtD,KAAMqD,EAAOrD,KACbQ,MAAO6C,EAAO7C,MACd+C,QALyC,CAAC,kBAKRxD,SAASsD,EAAOrD,MAClDU,IAAqB,mBAAhB2C,EAAOrD,KAA4BqD,EAAO3C,SAAMJ,6BC3F5CkD,EAAyB,WAAmB,IAAAC,EAEjBC,WAAe,IAFEC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEhDK,EAFgDH,EAAA,GAEnCI,EAFmCJ,EAAA,GAAAK,EAGnBN,WAAe,IAHIO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGhDE,EAHgDD,EAAA,GAGpCE,EAHoCF,EAAA,GAAAG,EAIzBV,WAAe,kBAJUW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAIhDE,EAJgDD,EAAA,GAIvCE,EAJuCF,EAAA,GAMjDhF,EAAU,SAACmF,GACfhD,MAAMgD,IAGFC,EAAuB,SAAC1C,GAC5BgC,EAAehC,GACY,IAAvB+B,EAAYY,QACdC,EAAmBb,EAAY,IAEjCxE,oBAAiCsF,iBAgB7BD,EAAqB,SAACE,GACtBA,EAAQC,WACVX,EAAa,GAAA9C,OACRxC,OAAOC,SAASiG,OADR,kDAAA1D,OAC+DwD,EAAQvB,GADvE,gBAAAjC,OACwFwD,EAAQC,aAG7GX,EAAa,GAAA9C,OAAIxC,OAAOC,SAASiG,OAApB,kDAAA1D,OAA2EwD,EAAQvB,KAElGhE,WAAwB0F,kBAAiB,IAGrCC,EAAc,SAACC,GACnB5F,WAAwB6F,YAAY,CAClCC,SAAU,UACVC,WAAYnB,EACZoB,qBAAsBhB,IAExBY,EAAUN,iBAWZ,OAPAlB,YAAgB,WACdpE,eACAA,oBAAiCiG,kBACjCjG,WAAwBkG,sBAAsBP,GFhDd,SAClCQ,EACApG,GAEAC,MAAmBoG,qBAAqBD,EAAyBpG,GE6C/DqG,CAAqBjB,EAAsBpF,KAI3CsG,EAAA,yBACEA,EAAA,yBACEA,EAAA,cAACC,EAAA,EAAD,CAAMC,KAAM,SAAU1F,QAAS,mBAEjCwF,EAAA,cAACG,EAAA,EAAD,CAAOC,OAAK,EAACC,YAAa,WAAYC,SA9CjB,SAAC/F,GACxBqE,EAAWrE,EAAMgB,OAAOgF,UA8CtBP,EAAA,qBAAKQ,MAAO,CAAEC,UAAW,SACvBT,EAAA,cAACC,EAAA,EAAD,CAAMC,KAAM,SAAU1F,QAAS,uDAEjCwF,EAAA,cAACU,EAAA,EAAD,CACEN,OAAK,EACLO,MAAOxC,EAAY7B,IAAI,SAAC4C,GACtB,OAAOA,EAAQrE,QAEjB+F,iBAAiB,gCACjBC,iBApDsB,SAACtG,EAAYuG,GACvC,IAAM5B,EAAUf,EAAY4C,KAC1B,SAAC5G,GAAD,OAA+CA,EAAKU,QAAUiG,EAAIP,QAEhErB,GACFF,EAAmBE,IAgDjBmB,YAAoC,IAAvBlC,EAAYY,OAAeZ,EAAY,GAAGtD,MAAQ,oEH7ElEvB,2CAUE,IIRFA,EJQQ0H,EAAyC,SAACC,GAErD,IAAMC,EAAe,SAAC3G,EAA6BoG,GACjDM,EAAMX,SAASK,EAAMJ,QAGjBI,EAAQ,CACZ,CACEQ,IAAK,OACLC,KAAM,CACJC,KAAM,OACNC,SAAS,GAEXC,aAAc,YACdC,QAAS,SAACC,GAAD,OAAmCP,EAAaO,EAAG,CAAElB,MAAOjH,EAASoI,SAEhF,CACEP,IAAK,OACLC,KAAM,CACJC,KAAM,UACNC,SAAS,GAEXC,aAAc,YACdC,QAAS,SAACC,GAAD,OAAmCP,EAAaO,EAAG,CAAElB,MAAOjH,EAASqI,UAIlF,OACEC,EAAAC,EAAAxE,cAACyE,EAAA,EAAD,CAAMC,OAAQd,EAAMc,OAAQC,OAAO,UACjCJ,EAAAC,EAAAxE,cAAC4E,EAAA,EAAD,CAAMtB,MAAOA,EAAOuB,mBAAoB,EAAGC,cAAeC,IAAuBC,UAAQ,yBIrC1F/I,2CAaE,ICRFgJ,EDQQC,EAAuC,SAACtB,GAAwC,IAAAnD,EAEjEC,IAAMyE,SAAS,IAFkDxE,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEpF2E,EAFoFzE,EAAA,GAE7E0E,EAF6E1E,EAAA,GAYrF2E,EAA0BC,mBAPT,SAAC3G,GAClBA,IAAUwG,IACZxB,EAAM4B,SAAS5G,GACfyG,EAASzG,KAI4C,IAAK,CAAE6G,SAAS,EAAOC,UAAU,IAuB1F,OACEnB,EAAAC,EAAAxE,cAACyE,EAAA,EAAD,CAAMkB,IAAI,YAAYhB,OAAO,SAASiB,UAAWhC,EAAMiC,aACrDtB,EAAAC,EAAAxE,cAACyE,EAAA,EAAKqB,KAAN,CAAWC,MAAI,GACbxB,EAAAC,EAAAxE,cAACyE,EAAA,EAAD,KACEF,EAAAC,EAAAxE,cAACgG,EAAD,CAAY/C,SAnBY,SAACgD,GAC/B,IAAMC,EAAUD,IAAShK,EAASoI,KAAOpI,EAASoI,KAAOpI,EAASqI,KAClEV,EAAMuC,aAAaD,IAiBkCxB,OAAQ,CAAE0B,OAAQ,kBAGrE7B,EAAAC,EAAAxE,cAAC8C,EAAA,EAAD,CACEE,YAAY,SACZe,KAAM,CACJC,KAAM,SACNC,SAAS,GAEXoC,MAAO,CACL3B,OAAQ,CAAEnH,MAAO,UAEnBmH,OAAQ,CAAE0B,OAAQ,oBAClBnD,SArCiB,SAAC/F,GACtB,IAAMoJ,EAAYpJ,EAAiDY,cAAcoF,MACjFoC,EAAwBgB,IAoCpBC,WA5BiB,SAACrJ,GACJ,UAAdA,EAAM4G,KACRF,EAAM4C,WA2BJC,QAvBgB,WACpB7C,EAAM6C,WAuBFvC,aAAW,iBACXwC,gBAAc,0BAMTC,EAAmBC,0BAAgB,CAC9CC,YAAa,mBACbC,OAAQ,SAAAC,GAA4D,IAAzDC,EAAyDD,EAAzDC,SAAUxB,EAA+CuB,EAA/CvB,SAAUW,EAAqCY,EAArCZ,aAAcM,EAAuBM,EAAvBN,QAASD,EAAcO,EAAdP,QAC5CS,EAAYD,EAAZC,QACR,OACE1C,EAAAC,EAAAxE,cAACkH,EAAD,CACErB,YAAaoB,EAAQE,KACrBhB,aAAcA,EACdX,SAAUA,EACVgB,QAASA,EACTC,QAASA,eE9EJW,EAAoC,SAACxD,GAAsC,IAAAnD,EACtDC,IAAMyE,UAAS,GADuCxE,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC/E4G,EAD+E1G,EAAA,GACrE2G,EADqE3G,EAAA,GAGtFD,IAAM6G,UAAU,WACV3D,EAAM4D,UACRF,GAAY,KAIhB,IASMhE,EAAQ,CACZ,CACEQ,IAAK,OACLC,KAAM,CACJC,KAAM,OACNC,SAAS,GAEXoD,WACAI,OAAQJ,EACRK,WAAW,EACXC,KAAM,CACJrE,MAb6BM,EAAMnH,KJyE7BU,QAAQP,QAAQqC,IAAImB,GI5DXnB,IApBE,SAACoB,GAAD,MAA6B,CAClDyD,IAAKzD,EAAOC,GACZnD,QAASkD,EAAO7C,MAChBoK,UAAWvH,EAAOE,QAClB4D,QAAS9D,EAAO3C,IAAM,kBAAM7B,OAAOgM,KAAKxH,EAAO3C,WAAOJ,MAkBpDwK,iBAAkB,SAAC1D,EAAD2C,GAA+B,IAApBM,EAAoBN,EAApBM,SAC3BC,EAAYD,MAKlB,OAAO9C,EAAAC,EAAAxE,cAAC4E,EAAA,EAAD,CAAMI,UAAQ,EAAC1B,MAAOA,EAAOoB,OAAQd,EAAMc,OAAQlH,MAAOoG,EAAMpG,SCxC5DuK,EAA0C,SAACnE,GAAyC,IAAAnD,EAC/DC,IAAMyE,SAASvB,EAAMoE,KAD0CrH,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACxFwH,EADwFtH,EAAA,GAC9EuH,EAD8EvH,EAAA,GAM/F,OACE4D,EAAAC,EAAAxE,cAAA,OACEmD,MAAO,CAAE5F,MAAK,GAAAc,OAAKuF,EAAMrG,OAASF,OAAQ,OAAQ8K,aAAc,OAChEvC,UAAWhC,EAAMgC,UACjBoC,IAAKC,EACL5L,QARgB,WAClB6L,EAAY,oFCMHE,EAAqC,SAACxE,GAAuC,IAAAnD,EAC5DC,IAAMyE,SAAStJ,OAAOwM,aADsC1H,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACjF6H,EADiF3H,EAAA,GACzE4H,EADyE5H,EAAA,GAElF6H,EAAe,WACnBD,EAAU1M,OAAOwM,cAInB3H,IAAM6G,UAAU,WAEd,OADA1L,OAAO4M,iBAAiB,SAAUD,GAC3B,WACL3M,OAAO6M,oBAAoB,SAAUF,KAEtC,CAACF,IAGJ,IAAIK,EAAW,EAGTC,EAAUlI,IAAMmI,YAEtBnI,IAAM6G,UAAU,WAEd,GAAI3D,EAAMkF,WAAY,CACpB,IAAMC,EAAYH,EAAQI,SAAYJ,EAAQI,QAAwBC,WAElEF,GACDA,EAA0BzK,WAKjC,IAAM4K,EAAoB,SAApBA,EAAqB9E,GACzBA,EAAE+E,iBACF,IAAMC,EAAchF,EAAEtG,cACtBsL,EAAYV,oBAAoB,cAAeQ,GAE/CE,EAAYC,qBAAqB,KAAK,GAAGC,SAGrCC,EAAS,SAATA,EAAUnF,GACbA,EAAEtG,cAA8B4K,oBAAoB,cAAeQ,GACnE9E,EAAEtG,cAA8B4K,oBAAoB,OAAQa,IAiEzDC,EAAU5F,EAAM6F,SAASxK,IAxDX,SAACnC,GAmDnB,MAjDY,CACVgH,MAFF6E,EAGExL,QACEoH,EAAAC,EAAAxE,cAACyE,EAAA,EAAD,CAAME,OAAO,SAAS+E,MAAI,EAAC/D,IAAI,aAC7BpB,EAAAC,EAAAxE,cAACyE,EAAA,EAAKqB,KAAN,KACEvB,EAAAC,EAAAxE,cAAC2J,EAAD,CAAapM,MAAM,OAAOqI,UAAU,gBAAgBoC,IAAKlL,EAAKW,QAAQiC,gBAExE6E,EAAAC,EAAAxE,cAACyE,EAAA,EAAKqB,KAAN,CAAWjD,KAAK,aAAa+G,OAAQ,EAAGC,KAAM,GAC5CtF,EAAAC,EAAAxE,cAAC4C,EAAA,EAAD,CACEkH,WAAS,EACTjH,KAAK,SACLkH,OAAO,WACP5M,QAASyC,EAAU9C,EAAKW,QAAQD,OAChCA,MAAOoC,EAAU9C,EAAKW,QAAQD,UAGjCV,EAAKW,QAAQ8B,SACZgF,EAAAC,EAAAxE,cAACyE,EAAA,EAAKqB,KAAN,CAAWjD,KAAK,cAAc+G,OAAQ,EAAGC,KAAM,GAC7CtF,EAAAC,EAAAxE,cAAC4C,EAAA,EAAD,CACEkH,WAAS,EACTjH,KAAK,SACLkH,OAAO,UACP5M,QAASyC,EAAU9C,EAAKW,QAAQ8B,UAChC/B,MAAOoC,EAAU9C,EAAKW,QAAQ8B,aAGhC,KACHzC,EAAKW,QAAQgC,KACZ8E,EAAAC,EAAAxE,cAACyE,EAAA,EAAKqB,KAAN,CAAWjD,KAAK,YAAY+G,OAAQ,EAAGC,KAAM,EAAG3F,aAAYtE,EAAU9C,EAAKW,QAAQD,QACjF+G,EAAAC,EAAAxE,cAAC4C,EAAA,EAAD,CACEkH,WAAS,EACTjH,KAAK,SACLkH,OAAO,UACP5M,QAASyC,EAAU9C,EAAKW,QAAQgC,MAChCjC,MAAOoC,EAAU9C,EAAKW,QAAQgC,SAGhC,KACH3C,EAAKK,QAAQP,QACZ2H,EAAAC,EAAAxE,cAACyE,EAAA,EAAKqB,KAAN,CAAW8D,OAAQ,GACjBrF,EAAAC,EAAAxE,cAACgK,EAAD,CAAUvN,KAAMK,EAAMU,MAAM,eAAegK,UAAU,KAErD,MAGR9C,OAAQ,CAAE0B,OAAQ,eAClBjC,QAAS,SAACjH,GAAD,OAAmCD,EAAiBC,EAAOJ,IACpE2J,QAAS,SAACvJ,GAAD,OAvDIkH,EAuDgDlH,GAtD5DY,cAA8B2K,iBAAiB,cAAeS,QAChE9E,EAAEtG,cAA8B2K,iBAAiB,OAAQc,GAF5C,IAACnF,MAiEjB,OACEG,EAAAC,EAAAxE,cAACiK,EAAA,IAAD,CAAKC,SAAUtB,GACbrE,EAAAC,EAAAxE,cAACqE,EAAA,EAAD,CAAM/D,GAAG,YAAY6J,YAAU,EAAC7G,MAAOkG,EAAS9E,OAAQ,CAAErH,OAAM,GAAAgB,OAAKiK,EAAS,GAAd,MAAsB8B,SAAU,yCChIzFC,EAAe3J,IAAM4J,cAAmB,CAAEC,MAAO,KCWjDC,EAAqC,SAAC5G,GACjD,IAAM6G,EAAe/J,IAAMgK,WAAWL,GADkD5J,EAGxDC,IAAMyE,UAAS,GAHyCxE,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAGjF4G,EAHiF1G,EAAA,GAGvE2G,EAHuE3G,EAAA,GAKlFuI,EAAoB,SAApBA,EAAqB9E,GACzBA,EAAE+E,iBACD/E,EAAEtG,cAA8B4K,oBAAoB,cAAeQ,GACpE5B,GAAY,IAYd,OACE/C,EAAAC,EAAAxE,cAAC2K,EAAA,EAAD,CACEC,oBAAkB,OAClBlG,OAAQ,CACN0B,OAAQ,gBACR/I,OAAQ,QACRwN,QAAS,sBACT1C,aAAc,MACd2C,UAAW,sCACXC,SAAU,WACVC,OAAM,aAAA3M,OAAeoM,EAAaO,SAEpC7G,QAAS,SAACC,GAAD,OAA+BnH,EAAiBmH,EAAGR,EAAM9G,OAClEyJ,WAAY,SAACnC,GACG,UAAVA,EAAEN,KACJ7G,EAAiBmH,EAAGR,EAAM9G,OAG9B2J,QAAS,SAAAvJ,GAAiBA,EArBzBY,cAA8B2K,iBAAiB,cAAeS,IAsB/DK,OAAQ,SAAArM,GAAK,OAAWA,EA3BvBY,cAA8B4K,oBAAoB,cAAeQ,QACpE5B,GAAY,KA4BT1D,EAAM9G,KAAKK,QAAQP,QAClB2H,EAAAC,EAAAxE,cAACgK,EAAD,CACExC,SAAUH,EACV5K,KAAMmH,EAAM9G,KACZ4H,OAAQ,CAAEqG,SAAU,WAAYE,MAAO,IAAKC,IAAK,IAAK9E,OAAQ,mBAE9D,KACJ7B,EAAAC,EAAAxE,cAACyE,EAAA,EAAD,CAAMkB,IAAI,aACRpB,EAAAC,EAAAxE,cAACyE,EAAA,EAAKqB,KAAN,KACEvB,EAAAC,EAAAxE,cAAC2J,EAAD,CAAapM,MAAM,OAAOqI,UAAU,gBAAgBoC,IAAKpE,EAAM9G,KAAKW,QAAQiC,gBAE9E6E,EAAAC,EAAAxE,cAACyE,EAAA,EAAKqB,KAAN,CAAWjD,KAAK,YAAYgH,MAAI,GAC9BtF,EAAAC,EAAAxE,cAACyE,EAAA,EAAD,CAAM0G,QAAM,EAACzG,OAAQ,CAAE0G,UAAW,SAChC7G,EAAAC,EAAAxE,cAACyE,EAAA,EAAKqB,KAAN,CACEpB,OAAQ,CAAE2G,QAAS,cAAeC,gBAAiB,WAAYC,gBAAiB,EAAGnB,SAAU,WAE7F7F,EAAAC,EAAAxE,cAAC4C,EAAA,EAAD,CACEzF,QAASyC,EAAUgE,EAAM9G,KAAKW,QAAQD,OACtCkH,OAAQ,CAAE0B,OAAQ,aAClBvD,KAAK,SACLkH,OAAO,WACPvM,MAAOoC,EAAUgE,EAAM9G,KAAKW,QAAQD,UAGvCoG,EAAM9G,KAAKW,QAAQ8B,SAClBgF,EAAAC,EAAAxE,cAACyE,EAAA,EAAKqB,KAAN,CACEpB,OAAQ,CACN2G,QAAS,cACTC,gBAAiB,WACjBC,gBAAiB,EACjBnB,SAAU,WAGZ7F,EAAAC,EAAAxE,cAAC4C,EAAA,EAAD,CACEzF,QAASyC,EAAUgE,EAAM9G,KAAKW,QAAQ8B,UACtCmF,OAAQ,CAAE0B,OAAQ,aAClB2D,OAAO,UACPlH,KAAK,SACLrF,MAAOoC,EAAUgE,EAAM9G,KAAKW,QAAQ8B,aAGtC,KACHqE,EAAM9G,KAAKW,QAAQgC,KAClB8E,EAAAC,EAAAxE,cAACyE,EAAA,EAAKqB,KAAN,CACE+D,MAAI,EACJhH,KAAK,YACL6B,OAAQ,CACN2G,QAAS,cACTC,gBAAiB,WACjBC,gBAAiB,EACjBnB,SAAU,WAGZ7F,EAAAC,EAAAxE,cAAC4C,EAAA,EAAD,CACEzF,QAASyC,EAAUgE,EAAM9G,KAAKW,QAAQgC,MACtCsK,OAAO,UACPlH,KAAK,SACLrF,MAAOoC,EAAUgE,EAAM9G,KAAKW,QAAQgC,SAGtC,UC3GH+L,EAAqC,SAAC5H,GAEjD,IAGM6H,EAAmB,SAAClO,GACxB,OAAOmO,KAAKC,MAAMpO,EAJK,MAF+DkD,EAS5DC,IAAMyE,SAAStJ,OAAOwM,aATsC1H,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GASjF6H,EATiF3H,EAAA,GASzE4H,EATyE5H,EAAA,GAUlF6H,EAAe,WACnBD,EAAU1M,OAAOwM,cAInB3H,IAAM6G,UAAU,WAEd,OADA1L,OAAO4M,iBAAiB,SAAUD,GAC3B,WACL3M,OAAO6M,oBAAoB,SAAUF,KAEtC,CAACF,IApBoF,IAAAtH,EAuB1DN,IAAMyE,SAASsG,EAAiB5P,OAAO+P,aAvBmB3K,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAuBjF6K,EAvBiF5K,EAAA,GAuBxE6K,EAvBwE7K,EAAA,GA0BlF8K,EAAe,WACnBD,EAAWL,EAAiB5P,OAAO+P,cAIrClL,IAAM6G,UAAU,WAEd,OADA1L,OAAO4M,iBAAiB,SAAUsD,GAC3B,WACLlQ,OAAO6M,oBAAoB,SAAUqD,KAEtC,CAACF,IAGJ,IAAMG,EAAUtL,IAAMmI,YAEtBnI,IAAM6G,UAAU,WAEd,GAAI3D,EAAMkF,WAAY,CACpB,IAAMC,EAAYiD,EAAQhD,SAAYgD,EAAQhD,QAAwBC,WAElEF,GACDA,EAA0BzK,WAWjC,OACEiG,EAAAC,EAAAxE,cAAA,OAAKmD,MAAO,CAAEiD,OAAQ,YAAa/I,OAAM,GAAAgB,OAAKiK,EAAS,GAAd,MAAsB8B,SAAU,WACvE7F,EAAAC,EAAAxE,cAACiK,EAAA,IAAD,CAAKC,SAAU8B,GACbzH,EAAAC,EAAAxE,cAACsE,EAAA,EAAD,CAAMhE,GAAG,YAAY2L,QAASJ,EAAS/G,cAAeoH,IAAc/O,QAASyG,EAAM6F,SAASxK,IAR9E,SAACnC,GACnB,OAAOyH,EAAAC,EAAAxE,cAACmM,EAAD,CAAUrP,KAAMA,qBNnDtBmI,2CAKE,IOOFmH,EPPQC,EAAkC,SAACzI,GAC9C,OACEW,EAAAC,EAAAxE,cAAA,WACG4D,EAAMqB,aAAeA,EAAWZ,KAC/BE,EAAAC,EAAAxE,cAACsM,EAAD,CAAU7C,SAAU7F,EAAM2I,QAASzD,WAAYlF,EAAMkF,aAErDvE,EAAAC,EAAAxE,cAACwM,EAAD,CAAU/C,SAAU7F,EAAM2I,QAASzD,WAAYlF,EAAMkF,wBQbhD2D,UAAoC,SAAC7I,GAChD,OAAOW,EAAAC,EAAAxE,cAAA,OAAK4F,UAAU,YAAf,IAA4BhC,EAAM8I,UAAYnI,EAAAC,EAAAxE,cAAC2M,EAAA,EAAD,MAAa,KAA3D,uBCIIC,UAA8C,SAAChJ,GAC1D,IAAIiJ,EAAc,GACdjJ,EAAMkJ,YAAclJ,EAAMO,UAC5B0I,EAAStI,EAAAC,EAAAxE,cAAC+M,EAAA,EAAD,CAAQzM,GAAG,SAASnD,QAASyG,EAAMkJ,WAAY3I,QAASP,EAAMO,QAAS6I,SAAO,KAEzF,IAAIC,EAAU,GACVrJ,EAAMqJ,UACRA,EAAUrJ,EAAMqJ,SAElB,IAAIC,EAAW,YAKf,OAJItJ,EAAMsJ,WACRA,EAAWtJ,EAAMsJ,UAIjB3I,EAAAC,EAAAxE,cAAA,OAAK4F,UAAU,mBACbrB,EAAAC,EAAAxE,cAACmN,EAAA,EAAD,CAAO7M,GAAG,QAAQ0H,IAAKkF,IACvB3I,EAAAC,EAAAxE,cAAA,OAAKM,GAAG,aACNiE,EAAAC,EAAAxE,cAAC4C,EAAA,EAAD,CAAMtC,GAAG,QAAQuC,KAAM,QAASkH,OAAO,OAAO5M,QAASyG,EAAMpG,QAC7D+G,EAAAC,EAAAxE,cAAC4C,EAAA,EAAD,CAAM8B,OAAQ,CAAEtB,UAAW,OAASP,KAAM,SAAU1F,QAASoH,EAAAC,EAAAxE,cAAA,SAAI4D,EAAMrE,YACvEgF,EAAAC,EAAAxE,cAAC4C,EAAA,EAAD,CAAMtC,GAAG,QAAQuC,KAAK,QAAQ1F,QAAS8P,KAExCJ,KC7BMO,EAAuC,SAACxJ,GACnD,OACEW,EAAAC,EAAAxE,cAACqN,EAAD,CACE7P,MAAM,iDACN+B,SAAS,0CACT0N,QAASrJ,EAAMqJ,WCARK,EAAqC,SAAC1J,GAAuC,IAAAnD,EAChDC,IAAMyE,SAAS,IADiCxE,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACjF8M,EADiF5M,EAAA,GACnE6M,EADmE7M,EAAA,GAGlF8M,EAAgB,SAAClB,GACrB3I,EAAM8J,gBAAgB,CAAEC,KAAMpB,EAASvP,KAAMV,MAAmBsR,aAAavB,WAGzEwB,EAAgB,SAACrM,GACrBgM,EAAgB,2CAalB,OACEjJ,EAAAC,EAAAxE,cAACqN,EAAD,CACEP,WAAW,UACXtP,MAAOoG,EAAMpG,MACb+B,SAAU,0CACV0N,QAASM,EACTpJ,QAhByB,WAC3B,IAAM2J,EAAkD,CACtDlP,MAAOgF,EAAMmK,aAAanP,MAC1BC,UAAW+E,EAAMmK,aAAalP,UAC9BnB,IAAKkG,EAAMlG,KAGbpB,MAAmB0R,aAAaF,EAAYL,EAAeI,iBJP1DzB,2GAQE,IK3BF6B,EL2BQC,EAA2C,SAACtK,GAA0C,IAAAnD,EAE7DC,IAAMyE,SAAS,QAF8CxE,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAE1F0N,EAF0FxN,EAAA,GAE9EyN,EAF8EzN,EAAA,GAAAK,EAGrEN,IAAMyE,SAAS,IAHsDlE,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAG1FqN,EAH0FpN,EAAA,GAGlFqN,EAHkFrN,EAAA,GAAAG,EAIjEV,IAAMyE,SAASiH,EAAamC,QAJqClN,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAI1FoN,EAJ0FnN,EAAA,GAIhFoN,EAJgFpN,EAAA,GAAAqN,EAKzDhO,IAAMyE,SAAS,IAL0CwJ,EAAA/N,OAAAC,EAAA,EAAAD,CAAA8N,EAAA,GAK1FnB,EAL0FoB,EAAA,GAK5EnB,EAL4EmB,EAAA,GAAAC,EAMjElO,IAAMyE,SAAS,CAAEzH,IAAK,GAAIF,MAAO,YANgCqR,EAAAjO,OAAAC,EAAA,EAAAD,CAAAgO,EAAA,GAM1FE,EAN0FD,EAAA,GAMhFE,EANgFF,EAAA,GAAAG,EAOvEtO,IAAMyE,SAAS,CAAEvG,MAAO,GAAIC,UAAWJ,EAAa5C,OAAOC,SAASmT,QAPGC,EAAAtO,OAAAC,EAAA,EAAAD,CAAAoO,EAAA,GAO1F5J,EAP0F8J,EAAA,GAOnF7J,EAPmF6J,EAAA,GAAAC,EAQjDzO,IAAMyE,UAAS,GARkCiK,EAAAxO,OAAAC,EAAA,EAAAD,CAAAuO,EAAA,GAQ1FE,EAR0FD,EAAA,GAQxEE,EARwEF,EAAA,GAU3F/S,EAAU,SAACmF,GACfiN,EAAYrC,EAAamD,OACzB/B,EAAgBhM,IAGZpF,EAAY,SAAC2C,GACjB,GAAIA,EAAS/B,OAASV,MAAmBsR,aAAa4B,KAAM,CAC1D,IAAMC,EAAwC1Q,EAAS4O,KACvDoB,EAAY,CAAErR,IAAK+R,EAAa/R,IAAKF,MAAOiS,EAAajS,QACzDiR,EAAYrC,EAAaoD,UACpB,CACL,IAAME,EAA8C3Q,EAAS4O,KAC7DW,EAAUxP,EAAmB4Q,IAC7BC,EAAkBD,EAAgB1Q,aAClC1C,oBAAiCsF,kBA4B/B+N,EAAoB,SAAC5Q,GACD,IAApBA,EAAS2C,OACX+M,EAAYrC,EAAawD,WAEzBnB,EAAYrC,EAAamC,SAK7B7N,IAAM6G,UAAU,WAId,GAHAjL,eACAA,oBAAiCiG,kBACjCjG,+BAA4CsH,EAAMiM,eV1D1B,WAC1B,IAAMnS,EAAMiB,WAAqB9C,OAAOC,SAASmT,MACjD,OAA+B,MAAxBvR,EAAIkB,MAAMkD,YAA8C,QAAxBpE,EAAIkB,MAAMkD,WUyD3CgO,GAAgB,CAClB,IAAM3T,EAA2C,CAC/CyC,MAAO,GACPC,UAAWJ,EAAa5C,OAAOC,SAASmT,OAE1C/S,EAAWC,EAASC,EAAWC,KAEhC,CAACuH,EAAMiM,gBAEV,IAAI5J,EAAO1B,EAAAC,EAAAxE,cAAC+P,EAAD,CAASxD,QAAS8B,EAAQpJ,WAAYkJ,EAAYrF,WAAYuG,IACzE,OAAQb,GACN,IAAK,UACHvI,EAAO1B,EAAAC,EAAAxE,cAACgQ,EAAD,CAAUtD,WAAW,IAC5B,MACF,IAAK,QACHzG,EAAO1B,EAAAC,EAAAxE,cAACiQ,EAAD,CAAWhD,QAASM,IAC3B,MACF,IAAK,OACHtH,EAAO1B,EAAAC,EAAAxE,cAACkQ,EAAD,CAAU1S,MAAOsR,EAAStR,MAAOE,IAAKoR,EAASpR,IAAKqQ,aAAc3I,EAAOsI,gBAAiBtR,IACjG,MACF,IAAK,YACH6J,EAAO1B,EAAAC,EAAAxE,cAACqN,EAAD,CAAiB7P,MAAM,+BAA+B+B,SAAS,wCAG1E,OACEgF,EAAAC,EAAAxE,cAAA,OAAK4F,UAAWhC,EAAMiC,aACpBtB,EAAAC,EAAAxE,cAAC2G,EAAD,CACEnB,SAhEe,SAAC5G,GACpB,QAActB,IAAVsB,EAAqB,CACvB,IAAMuR,EAAY,CAAEvR,MAAOA,EAAOC,UAAWJ,EAAa5C,OAAOC,SAASmT,OAC1E/S,EAAWiU,EAAW/T,EAAWC,GACjCoS,EAAYrC,EAAagE,SACzB/K,EAAS8K,KA4DPhK,aAhDmB,SAAClB,GACpBA,IACFmJ,EAAcnJ,GACdqK,GAAoB,KA8ClB9I,QAzD4B,WAChC8I,GAAoB,IAyDhB7I,QAtDmB,WACvB6I,GAAoB,MAuDjBrJ,IAKMoK,GAAqBzJ,0BAAgB,CAChDC,YAAa,qBACbC,OAAQ,SAAAC,GAAiC,IAA9BC,EAA8BD,EAA9BC,SAAU6I,EAAoB9I,EAApB8I,cACX5I,EAAYD,EAAZC,QACR,OAAO1C,EAAAC,EAAAxE,cAACsQ,EAAD,CAAazK,YAAaoB,EAAQE,KAAM0I,cAAeA,OM/GnDU,GAdyB,SAAC3M,GAEvC,IhB6B8BlF,EgB7BxBhB,EAAc7B,OAAOC,SAASmT,KAEpC,MAAqB,chB2BSvQ,EgB5BOhB,EhB6BzBiB,WAAqBD,GACtBE,MAAM4R,cgB3BbjM,EAAAC,EAAAxE,cAAA,WACEuE,EAAAC,EAAAxE,cAACyQ,EAAD,OAIGlM,EAAAC,EAAAxE,cAACqQ,GAAD,CAAoBR,cAAejM,EAAMiM,oCDnB/C5B,uEAOE,IAgGMyC,GAAW,SAACnG,GACvB,IAAIoG,EACJ,OAAQpG,GACN,KAAK0D,EAAW2C,SAEd,OADAD,EAzFwB,CAC5BE,mBAAoB,CAClBR,mBAAoB,SAAAtJ,GAAA,MAA2B,CAC7C+J,gBADkB/J,EAAGgK,YACQC,QAAQC,cAEvCtK,iBAAkB,SAAAuK,GAAA,MAA2B,CAC3CJ,gBADgBI,EAAGH,YACUC,QAAQC,cAEvCE,SAAU,SAAAC,GAAA,IAAGL,EAAHK,EAAGL,YAAH,MAA2B,CACnCD,gBAAiBC,EAAYC,QAAQK,WACrCC,qBAAsBP,EAAYC,QAAQO,iBAC1CC,eAAgBT,EAAYC,QAAQS,gBACpCC,sBAAuBX,EAAYC,QAAQW,aAC3CC,gBAAiBb,EAAYC,QAAQS,kBAEvC9G,QAAS,SAAAkH,GAAA,IAAGd,EAAHc,EAAGd,YAAH,MAA2B,CAClCD,gBAAiBC,EAAYC,QAAQK,WACrCC,qBAAsBP,EAAYC,QAAQO,iBAC1CC,eAAgBT,EAAYC,QAAQS,gBACpCC,sBAAuBX,EAAYC,QAAQW,aAC3CC,gBAAiBb,EAAYC,QAAQS,kBAEvC3O,MAAO,SAAAgP,GAAA,MAA2B,CAChCC,qBADKD,EAAGf,YAC0BC,QAAQK,cAG9CW,gBAAiB,CACf3B,mBAAoB,CAClBlJ,KAAM,SAAA8K,GAAA,MAAyB,CAC7BnB,gBADImB,EAAGC,UACoBpB,mBAG/BnK,iBAAkB,CAChBQ,KAAM,SAAAgL,GAAA,MAAyB,CAC7BrB,gBADIqB,EAAGD,UACoBpB,gBAC3B/F,SAAU,SACVG,IAAK,MACLkH,OAAQ,KAGZjB,SAAU,CACRhK,KAAM,SAAAkL,GAAA,IAAGH,EAAHG,EAAGH,UAAH,MAAyB,CAC7BI,SAAU,CACRxB,gBAAiBoB,EAAUZ,qBAC3BiB,MAAOL,EAAUV,eACjBgB,aAAc,CAAED,MAAOL,EAAUV,iBAEnCiB,UAAW,CACT3B,gBAAiBoB,EAAUR,sBAC3Ba,MAAOL,EAAUN,iBAEnBc,SAAU,CACR5B,gBAAiBoB,EAAUZ,qBAC3BiB,MAAOL,EAAUV,eACjBgB,aAAc,CAAED,MAAOL,EAAUV,oBAIvC1O,MAAO,CACLuD,MAAO,SAAAsM,GAAA,MAAyB,CAC9B7B,gBADK6B,EAAGT,UACmBH,wBAG/BpH,QAAS,CACPxD,KAAM,SAAAyL,GAAA,IAAGV,EAAHU,EAAGV,UAAH,MAAyB,CAC7BI,SAAU,CACRxB,gBAAiBoB,EAAUZ,qBAC3BiB,MAAOL,EAAUV,eACjBgB,aAAc,CAAED,MAAOL,EAAUV,iBAEnCiB,UAAW,CACT3B,gBAAiBoB,EAAUR,sBAC3Ba,MAAOL,EAAUN,iBAEnBc,SAAU,CACR5B,gBAAiBoB,EAAUZ,qBAC3BiB,MAAOL,EAAUV,eACjBgB,aAAc,CAAED,MAAOL,EAAUV,sBAa9BqB,aAAYC,SAAOC,kBAAmBpC,GAC/C,KAAK1C,EAAW+E,KAEd,OADArC,EA5FwB,CAC5BE,mBAAoB,CAClBR,mBAAoB,SAAAtJ,GAAA,MAA2B,CAC7C+J,gBADkB/J,EAAGgK,YACQC,QAAQC,cAEvCtK,iBAAkB,SAAAuK,GAAA,MAA2B,CAC3CJ,gBADgBI,EAAGH,YACUC,QAAQC,cAEvCE,SAAU,SAAAC,GAAA,IAAGL,EAAHK,EAAGL,YAAH,MAA2B,CACnCD,gBAAiBC,EAAYC,QAAQK,WACrCC,qBAAsBP,EAAYC,QAAQO,iBAC1CC,eAAgBT,EAAYC,QAAQS,gBACpCC,sBAAuBX,EAAYC,QAAQW,aAC3CC,gBAAiBb,EAAYC,QAAQS,kBAEvC9G,QAAS,SAAAkH,GAAA,IAAGd,EAAHc,EAAGd,YAAH,MAA2B,CAClCD,gBAAiBC,EAAYC,QAAQK,WACrCC,qBAAsBP,EAAYC,QAAQO,iBAC1CC,eAAgBT,EAAYC,QAAQS,gBACpCC,sBAAuBX,EAAYC,QAAQW,aAC3CC,gBAAiBb,EAAYC,QAAQS,kBAEvC3O,MAAO,SAAAgP,GAAA,MAA2B,CAChCC,qBADKD,EAAGf,YAC0BC,QAAQK,cAG9CW,gBAAiB,CACf3B,mBAAoB,CAClBlJ,KAAM,SAAA8K,GAAA,MAAyB,CAC7BnB,gBADImB,EAAGC,UACoBpB,mBAG/BnK,iBAAkB,CAChBQ,KAAM,SAAAgL,GAAA,MAAyB,CAC7BrB,gBADIqB,EAAGD,UACoBpB,gBAC3B/F,SAAU,SACVG,IAAK,MACLkH,OAAQ,KAGZjB,SAAU,CACRhK,KAAM,SAAAkL,GAAA,IAAGH,EAAHG,EAAGH,UAAH,MAAyB,CAC7BI,SAAU,CACRxB,gBAAiBoB,EAAUZ,qBAC3BiB,MAAOL,EAAUV,eACjBgB,aAAc,CAAED,MAAOL,EAAUV,iBAEnCiB,UAAW,CACT3B,gBAAiBoB,EAAUR,sBAC3Ba,MAAOL,EAAUN,iBAEnBc,SAAU,CACR5B,gBAAiBoB,EAAUZ,qBAC3BiB,MAAOL,EAAUV,eACjBgB,aAAc,CAAED,MAAOL,EAAUV,oBAIvC1O,MAAO,CACLuD,MAAO,SAAAsM,GAAA,MAAyB,CAC9B7B,gBADK6B,EAAGT,UACmBH,wBAG/BpH,QAAS,CACPxD,KAAM,SAAAyL,GAAA,IAAGV,EAAHU,EAAGV,UAAH,MAAyB,CAC7BI,SAAU,CACRxB,gBAAiBoB,EAAUZ,qBAC3BiB,MAAOL,EAAUV,eACjBgB,aAAc,CAAED,MAAOL,EAAUV,iBAEnCiB,UAAW,CACT3B,gBAAiBoB,EAAUR,sBAC3Ba,MAAOL,EAAUN,iBAEnBc,SAAU,CACR5B,gBAAiBoB,EAAUZ,qBAC3BiB,MAAOL,EAAUV,eACjBgB,aAAc,CAAED,MAAOL,EAAUV,sBAgB9BqB,aAAYC,SAAOG,UAAWtC,GACvC,QAEE,OADAA,EA/FwB,CAC5BE,mBAAoB,CAClBR,mBAAoB,SAAAtJ,GAAA,MAA2B,CAC7C+J,gBADkB/J,EAAGgK,YACQC,QAAQC,cAEvCtK,iBAAkB,SAAAuK,GAAA,MAA2B,CAC3CJ,gBADgBI,EAAGH,YACUC,QAAQC,cAEvCE,SAAU,SAAAC,GAAA,IAAGL,EAAHK,EAAGL,YAAH,MAA2B,CACnCD,gBAAiBC,EAAYC,QAAQK,WACrCC,qBAAsBP,EAAYC,QAAQO,iBAC1CC,eAAgBT,EAAYC,QAAQS,gBACpCC,sBAAuBX,EAAYC,QAAQW,aAC3CC,gBAAiBb,EAAYC,QAAQS,kBAEvC9G,QAAS,SAAAkH,GAAA,IAAGd,EAAHc,EAAGd,YAAH,MAA2B,CAClCD,gBAAiBC,EAAYC,QAAQK,WACrCC,qBAAsBP,EAAYC,QAAQO,iBAC1CC,eAAgBT,EAAYC,QAAQS,gBACpCC,sBAAuBX,EAAYC,QAAQW,aAC3CC,gBAAiBb,EAAYC,QAAQS,kBAEvC3O,MAAO,SAAAgP,GAAA,MAA2B,CAChCC,qBADKD,EAAGf,YAC0BC,QAAQK,cAG9CW,gBAAiB,CACf3B,mBAAoB,CAClBlJ,KAAM,SAAA8K,GAAA,MAAyB,CAC7BnB,gBADImB,EAAGC,UACoBpB,mBAG/BnK,iBAAkB,CAChBQ,KAAM,SAAAgL,GAAA,MAAyB,CAC7BrB,gBADIqB,EAAGD,UACoBpB,gBAC3B/F,SAAU,SACVG,IAAK,MACLkH,OAAQ,KAGZjB,SAAU,CACRhK,KAAM,SAAAkL,GAAA,IAAGH,EAAHG,EAAGH,UAAH,MAAyB,CAC7BI,SAAU,CACRxB,gBAAiBoB,EAAUZ,qBAC3BiB,MAAOL,EAAUV,eACjBgB,aAAc,CAAED,MAAOL,EAAUV,iBAEnCiB,UAAW,CACT3B,gBAAiBoB,EAAUR,sBAC3Ba,MAAOL,EAAUN,iBAEnBc,SAAU,CACR5B,gBAAiBoB,EAAUZ,qBAC3BiB,MAAOL,EAAUV,eACjBgB,aAAc,CAAED,MAAOL,EAAUV,oBAIvC1O,MAAO,CACLuD,MAAO,SAAAsM,GAAA,MAAyB,CAC9B7B,gBADK6B,EAAGT,UACmBH,wBAG/BpH,QAAS,CACPxD,KAAM,SAAAyL,GAAA,IAAGV,EAAHU,EAAGV,UAAH,MAAyB,CAC7BI,SAAU,CACRxB,gBAAiBoB,EAAUZ,qBAC3BiB,MAAOL,EAAUV,eACjBgB,aAAc,CAAED,MAAOL,EAAUV,iBAEnCiB,UAAW,CACT3B,gBAAiBoB,EAAUR,sBAC3Ba,MAAOL,EAAUN,iBAEnBc,SAAU,CACR5B,gBAAiBoB,EAAUZ,qBAC3BiB,MAAOL,EAAUV,eACjBgB,aAAc,CAAED,MAAOL,EAAUV,sBAmB9BqB,aAAYC,SAAOI,MAAOvC,KE/GvCwC,IAASrM,OAAOvC,EAAAC,EAAAxE,cCAyB,WAEvC,IAAMoT,EAAeC,GHEQ,SAAC3U,GAC9B,IAEM4U,EAFM3U,WAAqBD,GAEDE,MAAM2L,MAEtC,OAAK+I,GACI,UGRgCD,CAA2BxX,OAAOC,SAASmT,OAF1BxO,EAIhCC,IAAMyE,SAASiO,GAJiBzS,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAInD8S,EAJmD5S,EAAA,GAI5C6S,EAJ4C7S,EAAA,GAKpD8S,EACJF,GAASA,EAAMG,eAAiBH,EAAMG,cAAc3C,YAAcwC,EAAMG,cAAc3C,YAAYC,QAAU,GAO9G,OACEzM,EAAAC,EAAAxE,cAACqK,EAAasJ,SAAd,CAAuBzQ,MAAOuQ,GAC5BlP,EAAAC,EAAAxE,cAAC2T,EAAA,EAAD,CAAUpJ,MAAOgJ,GACfhP,EAAAC,EAAAxE,cAAC4T,GAAD,CAAK/D,cAPe,SAACtF,GACzBiJ,EAASH,GAAoB9I,UDVjB,MAAqBxK,SAAS8T,eAAe,SpByHvD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.07615e66.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ninterface Config {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Button, Flex, Menu, menuAsToolbarBehavior } from '@stardust-ui/react';\r\n\r\nenum viewType {\r\n  List = 'List',\r\n  Grid = 'Grid',\r\n}\r\n\r\ninterface IRadioIconsProps {\r\n  onChange: (view: string) => void;\r\n  styles?: object;\r\n}\r\n\r\nexport const RadioIcons: React.FC<IRadioIconsProps> = (props: IRadioIconsProps): JSX.Element => {\r\n  // HANDLERS\r\n  const handleChange = (event: React.SyntheticEvent, items: { value: viewType }): void => {\r\n    props.onChange(items.value);\r\n  };\r\n\r\n  const items = [\r\n    {\r\n      key: 'list',\r\n      icon: {\r\n        name: 'menu',\r\n        outline: true,\r\n      },\r\n      'aria-label': 'List View',\r\n      onClick: (e: React.SyntheticEvent): void => handleChange(e, { value: viewType.List }),\r\n    },\r\n    {\r\n      key: 'card',\r\n      icon: {\r\n        name: 'gallery',\r\n        outline: true,\r\n      },\r\n      'aria-label': 'Card View',\r\n      onClick: (e: React.SyntheticEvent): void => handleChange(e, { value: viewType.Grid }),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Flex styles={props.styles} vAlign=\"center\">\r\n      <Menu items={items} defaultActiveIndex={0} accessibility={menuAsToolbarBehavior} iconOnly />\r\n    </Flex>\r\n  );\r\n};\r\n","import * as microsoftTeams from '@microsoft/teams-js';\r\nimport * as adaptiveCards from 'adaptivecards';\r\nimport { ISubmitAction, IOpenUrlAction, IShowCardAction } from 'adaptivecards/lib/schema';\r\n\r\nexport const getResults = (\r\n  request: microsoftTeams.bot.QueryRequest,\r\n  onResults: (response: microsoftTeams.bot.QueryResponse) => void,\r\n  onError: (error: string) => void,\r\n): void => {\r\n  microsoftTeams.bot.sendQuery(request, onResults, onError);\r\n};\r\n\r\nexport const getSupportedCommands = (\r\n  onBotGetCommandResponse: (response: microsoftTeams.bot.Command[]) => void,\r\n  onError: (error: string) => void,\r\n): void => {\r\n  microsoftTeams.bot.getSupportedCommands(onBotGetCommandResponse, onError);\r\n};\r\n\r\nexport const removeUnsupportedActions = (card: adaptiveCards.IAdaptiveCard): adaptiveCards.IAdaptiveCard => {\r\n  const SupportedActions: string[] = ['Action.OpenUrl', 'Action.Submit', 'Action.ShowCard', 'invoke', 'signin'];\r\n  let newCard = card;\r\n  if (card.actions) {\r\n    newCard.actions = card.actions.filter((item: ISubmitAction | IOpenUrlAction | IShowCardAction): boolean => {\r\n      return SupportedActions.includes(item.type);\r\n    });\r\n  }\r\n  return newCard;\r\n};\r\n","import * as microsoftTeams from '@microsoft/teams-js';\r\nimport { ICard, OverflowAction } from '../api/api.interface';\r\nimport * as queryString from 'query-string';\r\nimport { ISubmitAction, IOpenUrlAction, IShowCardAction } from 'adaptivecards/lib/schema';\r\nimport { removeUnsupportedActions } from '../api/api';\r\nimport { SyntheticEvent } from 'react';\r\n\r\n// gets frame context from url\r\nexport const submitHandler = (err: string, result: string, target: HTMLElement): void => {\r\n  console.log(`Err value: ${err}, result value : ${result}`);\r\n  target.focus();\r\n};\r\n\r\nexport const launchTaskModule = (event: SyntheticEvent, card: ICard): void => {\r\n  // Only open task module if card is an Adaptive Card\r\n  if (card.content.type && card.content.type === 'AdaptiveCard') {\r\n    const taskInfo: microsoftTeams.TaskInfo = {\r\n      height: undefined,\r\n      width: 600,\r\n      title: card.preview.title,\r\n      url: undefined,\r\n      card: card.content,\r\n      completionBotId: card.botId,\r\n    };\r\n    const elem = event.currentTarget as HTMLElement;\r\n    microsoftTeams.tasks.startTask(taskInfo, (err: string, result: string) => submitHandler(err, result, elem));\r\n  } else {\r\n    alert(`Could not load data, card type is not supported.`);\r\n  }\r\n};\r\n\r\nexport const getCommandId = (iUrl: string): string => {\r\n  const url = queryString.parseUrl(iUrl);\r\n  return url.query.commandId as string;\r\n};\r\n\r\nexport const isInitialRun = (): boolean => {\r\n  const url = queryString.parseUrl(window.location.href);\r\n  return url.query.initialRun != null && url.query.initialRun == 'true';\r\n};\r\n\r\n// gets frame context from url\r\nexport const getFrameContext = (iUrl: string): string => {\r\n  const url = queryString.parseUrl(iUrl);\r\n  return url.query.frameContext as string;\r\n};\r\n\r\nexport const processQueryResponse = (item: microsoftTeams.bot.Attachment, botID: string): ICard => {\r\n  let url = '';\r\n  if (item.previewRawPayload.content.hasOwnProperty('images')) {\r\n    if (\r\n      item.previewRawPayload.content.images &&\r\n      item.previewRawPayload.content.images[0] &&\r\n      item.previewRawPayload.content.images[0].url\r\n    )\r\n      url = item.previewRawPayload.content.images[0].url;\r\n  }\r\n  const out: ICard = {\r\n    contentType: 'AdaptiveCard',\r\n    content: removeUnsupportedActions(item.card.content),\r\n    preview: {\r\n      title: item.previewRawPayload.content.title,\r\n      subTitle: item.previewRawPayload.content.subtitle,\r\n      text: item.previewRawPayload.content.text,\r\n      heroImageSrc: url,\r\n    },\r\n    botId: botID,\r\n  };\r\n  return out;\r\n};\r\n\r\n// converts a bot response to ICard\r\nexport const parseQueryResponse = (response: microsoftTeams.bot.Results): ICard[] => {\r\n  if (response && response.attachments) {\r\n    return response.attachments.map(\r\n      (item: microsoftTeams.bot.Attachment): ICard => processQueryResponse(item, response.botId),\r\n    );\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\n// Function to strip HTML tags from data\r\nexport const stripHTML = (html: string): string => {\r\n  let div = document.createElement('div');\r\n  div.innerHTML = html;\r\n  return div.textContent || div.innerText || '';\r\n};\r\n\r\nexport const processOverflowAction = (action: ISubmitAction | IOpenUrlAction | IShowCardAction): OverflowAction => {\r\n  const supportedOverflowActions: string[] = ['Action.OpenUrl'];\r\n  return {\r\n    id: action.id,\r\n    type: action.type,\r\n    title: action.title,\r\n    enabled: supportedOverflowActions.includes(action.type),\r\n    url: action.type === 'Action.OpenUrl' ? action.url : undefined,\r\n  };\r\n};\r\n\r\nexport const getOverflowActions = (card: ICard): OverflowAction[] => {\r\n  return card.content.actions.map(processOverflowAction);\r\n};\r\n","import * as React from 'react';\r\nimport { Text, Input, Dropdown } from '@stardust-ui/react';\r\nimport * as microsoftTeams from '@microsoft/teams-js';\r\nimport { getSupportedCommands } from '../api/api';\r\n\r\nexport const SettingsView: React.FC = (): JSX.Element => {\r\n  // STATE HOOKS\r\n  const [CommandList, setCommandList] = React.useState([] as microsoftTeams.bot.Command[]);\r\n  const [ContentUrl, setContentUrl] = React.useState('');\r\n  const [TabName, setTabName] = React.useState('JSONTabDefault');\r\n  // HANDLERS\r\n  const onError = (error: string): void => {\r\n    alert(error);\r\n  };\r\n\r\n  const onGetCommandResponse = (response: microsoftTeams.bot.Command[]): void => {\r\n    setCommandList(response);\r\n    if (CommandList.length === 1) {\r\n      onCommandSelection(CommandList[0]);\r\n    }\r\n    microsoftTeams.appInitialization.notifySuccess();\r\n  };\r\n\r\n  const handleNameChange = (event: any): void => {\r\n    setTabName(event.target.value);\r\n  };\r\n\r\n  const handleCommandChange = (event: any, res: any): void => {\r\n    const command = CommandList.find(\r\n      (item: microsoftTeams.bot.Command): boolean => item.title === res.value,\r\n    ) as microsoftTeams.bot.Command;\r\n    if (command) {\r\n      onCommandSelection(command);\r\n    }\r\n  };\r\n\r\n  const onCommandSelection = (command: microsoftTeams.bot.Command): void => {\r\n    if (command.initialRun) {\r\n      setContentUrl(\r\n        `${window.location.origin}?theme={theme}&frameContext=content&commandId=${command.id}&initialRun=${command.initialRun}`,\r\n      );\r\n    } else {\r\n      setContentUrl(`${window.location.origin}?theme={theme}&frameContext=content&commandId=${command.id}`);\r\n    }\r\n    microsoftTeams.settings.setValidityState(true);\r\n  };\r\n\r\n  const saveHandler = (saveEvent: microsoftTeams.settings.SaveEvent): void => {\r\n    microsoftTeams.settings.setSettings({\r\n      entityId: 'JSONTab',\r\n      contentUrl: ContentUrl,\r\n      suggestedDisplayName: TabName,\r\n    });\r\n    saveEvent.notifySuccess();\r\n  };\r\n\r\n  // EFFECT HOOKS\r\n  React.useEffect((): void => {\r\n    microsoftTeams.initialize();\r\n    microsoftTeams.appInitialization.notifyAppLoaded();\r\n    microsoftTeams.settings.registerOnSaveHandler(saveHandler);\r\n    getSupportedCommands(onGetCommandResponse, onError);\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Text size={'medium'} content={'Name your tab'} />\r\n      </div>\r\n      <Input fluid placeholder={'Tab name'} onChange={handleNameChange} />\r\n      <div style={{ marginTop: '16px' }}>\r\n        <Text size={'medium'} content={\"Select the command you'd like query your bot with\"} />\r\n      </div>\r\n      <Dropdown\r\n        fluid\r\n        items={CommandList.map((command: microsoftTeams.bot.Command): string => {\r\n          return command.title;\r\n        })}\r\n        noResultsMessage=\"We couldn't find any matches.\"\r\n        onSelectedChange={handleCommandChange}\r\n        placeholder={CommandList.length === 1 ? CommandList[0].title : 'Select the command'}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Input, Button, Icon, Image, Flex, Header, createComponent } from '@stardust-ui/react';\r\nimport { RadioIcons } from './RadioIcons';\r\nimport { debounce } from 'lodash';\r\n\r\nenum viewType {\r\n  List = 'List',\r\n  Grid = 'Grid',\r\n}\r\n\r\ninterface ISearchBarProps {\r\n  onSearch: (query: string) => void;\r\n  onViewChange: (view: viewType) => void;\r\n  onEnter: () => void;\r\n  onFocus: () => void;\r\n  customClass?: string;\r\n}\r\n\r\nexport const SearchBar: React.FC<ISearchBarProps> = (props: ISearchBarProps): JSX.Element => {\r\n  // STATE HOOKS\r\n  const [Query, setQuery] = React.useState('');\r\n\r\n  // HELPER\r\n  const onChangeHelper = (query: string) => {\r\n    if (query !== Query) {\r\n      props.onSearch(query);\r\n      setQuery(query);\r\n    }\r\n  };\r\n  // DEBOUNCED HELPER\r\n  const onChangeHelperDebounced = debounce(onChangeHelper, 400, { leading: false, trailing: true });\r\n\r\n  // HANDLERS\r\n  const handleOnChange = (event: React.SyntheticEvent<HTMLElement>): void => {\r\n    const newQuery = (event as React.SyntheticEvent<HTMLInputElement>).currentTarget.value;\r\n    onChangeHelperDebounced(newQuery);\r\n  };\r\n\r\n  const handleRadioButtonChange = (view: string): void => {\r\n    const newView = view === viewType.List ? viewType.List : viewType.Grid;\r\n    props.onViewChange(newView);\r\n  };\r\n\r\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>): void => {\r\n    if (event.key === 'Enter') {\r\n      props.onEnter();\r\n    }\r\n  };\r\n\r\n  const handleOnFocus = () => {\r\n    props.onFocus();\r\n  };\r\n\r\n  return (\r\n    <Flex gap=\"gap.small\" vAlign=\"center\" className={props.customClass}>\r\n      <Flex.Item push>\r\n        <Flex>\r\n          <RadioIcons onChange={handleRadioButtonChange} styles={{ margin: '0 0 16px 0' }} />\r\n        </Flex>\r\n      </Flex.Item>\r\n      <Input\r\n        placeholder=\"Search\"\r\n        icon={{\r\n          name: 'search',\r\n          outline: true,\r\n        }}\r\n        input={{\r\n          styles: { width: '250px' },\r\n        }}\r\n        styles={{ margin: '0px 0px 16px 0px' }}\r\n        onChange={handleOnChange}\r\n        onKeyPress={handleKeyPress}\r\n        onFocus={handleOnFocus}\r\n        aria-label=\"search results\"\r\n        aria-controls=\"list-view grid-view\"\r\n      />\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport const SearchBarWrapper = createComponent({\r\n  displayName: 'SearchBarWrapper',\r\n  render: ({ stardust, onSearch, onViewChange, onFocus, onEnter }) => {\r\n    const { classes } = stardust;\r\n    return (\r\n      <SearchBar\r\n        customClass={classes.root}\r\n        onViewChange={onViewChange}\r\n        onSearch={onSearch}\r\n        onEnter={onEnter}\r\n        onFocus={onFocus}\r\n      />\r\n    );\r\n  },\r\n});\r\n","import React from 'react';\r\nimport { ListView } from './ListView';\r\nimport { CardView } from './CardView';\r\nimport { ICard } from '../api/api.interface';\r\n\r\nexport interface IResultState {\r\n  results: ICard[];\r\n  viewOption: string;\r\n  focusFirst: boolean;\r\n}\r\nenum viewOption {\r\n  List = 'List',\r\n  Grid = 'Grid',\r\n}\r\n\r\nexport const Results: React.FC<IResultState> = (props: IResultState): JSX.Element => {\r\n  return (\r\n    <div>\r\n      {props.viewOption === viewOption.List ? (\r\n        <ListView itemList={props.results} focusFirst={props.focusFirst} />\r\n      ) : (\r\n        <CardView itemList={props.results} focusFirst={props.focusFirst} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Menu } from '@stardust-ui/react';\r\nimport { ICard, OverflowAction } from '../api/api.interface';\r\nimport { getOverflowActions } from '../utils/utils';\r\n\r\nexport interface OverflowProps {\r\n  card: ICard;\r\n  styles?: object;\r\n  title?: string;\r\n  openMenu: boolean;\r\n}\r\n\r\nexport const Overflow: React.FC<OverflowProps> = (props: OverflowProps): JSX.Element => {\r\n  const [menuOpen, setMenuOpen] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    if (props.openMenu) {\r\n      setMenuOpen(true);\r\n    }\r\n  });\r\n\r\n  const displayActions = (action: OverflowAction) => ({\r\n    key: action.id,\r\n    content: action.title,\r\n    disabled: !action.enabled,\r\n    onClick: action.url ? () => window.open(action.url) : undefined,\r\n  });\r\n\r\n  const actions = getOverflowActions(props.card);\r\n\r\n  const items = [\r\n    {\r\n      key: 'more',\r\n      icon: {\r\n        name: 'more',\r\n        outline: true,\r\n      },\r\n      menuOpen,\r\n      active: menuOpen,\r\n      indicator: false,\r\n      menu: {\r\n        items: actions.map(displayActions),\r\n      },\r\n      onMenuOpenChange: (e: any, { menuOpen }: any) => {\r\n        setMenuOpen(menuOpen);\r\n      },\r\n    },\r\n  ];\r\n\r\n  return <Menu iconOnly items={items} styles={props.styles} title={props.title} />;\r\n};\r\n","import React from 'react';\r\nimport '../css/App.css';\r\n\r\nexport interface CustomImageProps {\r\n  src?: string;\r\n  className?: string;\r\n  width?: string;\r\n}\r\n\r\nexport const CustomImage: React.FC<CustomImageProps> = (props: CustomImageProps): JSX.Element => {\r\n  const [ImageSrc, setImageSrc] = React.useState(props.src);\r\n\r\n  const handleError = () => {\r\n    setImageSrc('https://stardust-ui.github.io/react/public/images/wireframe/square-image.png');\r\n  };\r\n  return (\r\n    <img\r\n      style={{ width: `${props.width}`, height: '100%', borderRadius: '3px' }}\r\n      className={props.className}\r\n      src={ImageSrc}\r\n      onError={handleError}\r\n    />\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { List, Flex, Text, Ref } from '@stardust-ui/react';\r\nimport { ICard } from '../api/api.interface';\r\nimport { launchTaskModule, stripHTML } from '../utils/utils';\r\nimport { Overflow } from './Overflow';\r\nimport { CustomImage } from './CustomImage';\r\n\r\nexport interface IItemListProps {\r\n  itemList: ICard[];\r\n  focusFirst: boolean;\r\n}\r\n\r\nexport interface IProcessedItem {\r\n  key: number;\r\n  content: JSX.Element;\r\n  onClick: (event: React.MouseEvent) => void;\r\n  onFocus: (event: React.FocusEvent<Element>) => void;\r\n}\r\n\r\nexport const ListView: React.FC<IItemListProps> = (props: IItemListProps): JSX.Element => {\r\n  const [Height, setHeight] = React.useState(window.innerHeight);\r\n  const updateHeight = () => {\r\n    setHeight(window.innerHeight);\r\n  };\r\n\r\n  // EFFECT HOOKS\r\n  React.useEffect(() => {\r\n    window.addEventListener('resize', updateHeight);\r\n    return () => {\r\n      window.removeEventListener('resize', updateHeight);\r\n    };\r\n  }, [Height]);\r\n\r\n  // Key count to ensure unique keys for every item\r\n  let keyCount = 0;\r\n\r\n  // Ref for first list item\r\n  const listRef = React.createRef<any>();\r\n\r\n  React.useEffect(() => {\r\n    // If focus is true set focus to first element. Ignore otherwise\r\n    if (props.focusFirst) {\r\n      const firstElem = listRef.current && (listRef.current as HTMLElement).firstChild;\r\n\r\n      if (firstElem) {\r\n        (firstElem as HTMLElement).focus();\r\n      }\r\n    }\r\n  });\r\n\r\n  const handleContextMenu = (e: MouseEvent) => {\r\n    e.preventDefault();\r\n    const focusedElem = e.currentTarget as HTMLElement;\r\n    focusedElem.removeEventListener('contextmenu', handleContextMenu);\r\n    // Menu button contains the only a tag on a listitem\r\n    focusedElem.getElementsByTagName('a')[0].click();\r\n  };\r\n\r\n  const onBlur = (e: FocusEvent) => {\r\n    (e.currentTarget as HTMLElement).removeEventListener('contextmenu', handleContextMenu);\r\n    (e.currentTarget as HTMLElement).removeEventListener('blur', onBlur);\r\n  };\r\n\r\n  const onFocus = (e: React.FocusEvent) => {\r\n    (e.currentTarget as HTMLElement).addEventListener('contextmenu', handleContextMenu);\r\n    (e.currentTarget as HTMLElement).addEventListener('blur', onBlur);\r\n  };\r\n\r\n  // Function to translate items from IPreviewCard to List.Item format\r\n  const processItem = (item: ICard): IProcessedItem => {\r\n    keyCount++;\r\n    const out = {\r\n      key: keyCount,\r\n      content: (\r\n        <Flex vAlign=\"center\" fill gap=\"gap.small\">\r\n          <Flex.Item>\r\n            <CustomImage width=\"32px\" className=\"listItemImage\" src={item.preview.heroImageSrc} />\r\n          </Flex.Item>\r\n          <Flex.Item size=\"size.small\" shrink={0} grow={1}>\r\n            <Text\r\n              truncated\r\n              size=\"medium\"\r\n              weight=\"semibold\"\r\n              content={stripHTML(item.preview.title)}\r\n              title={stripHTML(item.preview.title)}\r\n            />\r\n          </Flex.Item>\r\n          {item.preview.subTitle ? (\r\n            <Flex.Item size=\"size.medium\" shrink={1} grow={0}>\r\n              <Text\r\n                truncated\r\n                size=\"medium\"\r\n                weight=\"regular\"\r\n                content={stripHTML(item.preview.subTitle)}\r\n                title={stripHTML(item.preview.subTitle)}\r\n              />\r\n            </Flex.Item>\r\n          ) : null}\r\n          {item.preview.text ? (\r\n            <Flex.Item size=\"size.half\" shrink={3} grow={0} aria-label={stripHTML(item.preview.title)}>\r\n              <Text\r\n                truncated\r\n                size=\"medium\"\r\n                weight=\"regular\"\r\n                content={stripHTML(item.preview.text)}\r\n                title={stripHTML(item.preview.text)}\r\n              />\r\n            </Flex.Item>\r\n          ) : null}\r\n          {item.content.actions ? (\r\n            <Flex.Item shrink={0}>\r\n              <Overflow card={item} title=\"More Options\" openMenu={false} />\r\n            </Flex.Item>\r\n          ) : null}\r\n        </Flex>\r\n      ),\r\n      styles: { margin: '2px 2px 0 0' },\r\n      onClick: (event: React.MouseEvent): void => launchTaskModule(event, item),\r\n      onFocus: (event: React.FocusEvent<Element>): void => onFocus(event),\r\n    };\r\n    return out;\r\n  };\r\n\r\n  // Output List for processed data\r\n  // Call processing function on all items\r\n  const outList = props.itemList.map(processItem);\r\n\r\n  // Render selectable list\r\n  return (\r\n    <Ref innerRef={listRef}>\r\n      <List id=\"list-view\" selectable items={outList} styles={{ height: `${Height - 48}px`, overflow: 'scroll' }} />\r\n    </Ref>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nexport const ThemeContext = React.createContext<any>({ theme: {} });\r\n","import React from 'react';\r\nimport { Flex, Segment, Text, Ref } from '@stardust-ui/react';\r\nimport { ICard } from '../api/api.interface';\r\nimport { stripHTML, launchTaskModule } from '../utils/utils';\r\nimport '../css/App.css';\r\nimport { Overflow } from './Overflow';\r\nimport { CustomImage } from './CustomImage';\r\nimport { ThemeContext } from '../utils/themeContext';\r\n\r\nexport interface IGridItemProps {\r\n  item: ICard;\r\n}\r\n\r\nexport const GridItem: React.FC<IGridItemProps> = (props: IGridItemProps): JSX.Element => {\r\n  const currentTheme = React.useContext(ThemeContext);\r\n\r\n  const [menuOpen, setMenuOpen] = React.useState(false);\r\n\r\n  const handleContextMenu = (e: MouseEvent) => {\r\n    e.preventDefault();\r\n    (e.currentTarget as HTMLElement).removeEventListener('contextmenu', handleContextMenu);\r\n    setMenuOpen(true);\r\n  };\r\n\r\n  const onBlur = (e: React.FocusEvent) => {\r\n    (e.currentTarget as HTMLElement).removeEventListener('contextmenu', handleContextMenu);\r\n    setMenuOpen(false);\r\n  };\r\n\r\n  const onFocus = (e: React.FocusEvent) => {\r\n    (e.currentTarget as HTMLElement).addEventListener('contextmenu', handleContextMenu);\r\n  };\r\n\r\n  return (\r\n    <Segment\r\n      data-is-focusable=\"true\"\r\n      styles={{\r\n        margin: '0 0 16px 12px',\r\n        height: '146px',\r\n        padding: '20px 20px 20px 20px',\r\n        borderRadius: '3px',\r\n        boxShadow: '0px 2px 4px -0.75px rgba(0,0,0,0.1)',\r\n        position: 'relative',\r\n        border: `2px solid ${currentTheme.border}`,\r\n      }}\r\n      onClick={(e: React.MouseEvent): void => launchTaskModule(e, props.item)}\r\n      onKeyPress={(e: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter') {\r\n          launchTaskModule(e, props.item);\r\n        }\r\n      }}\r\n      onFocus={event => onFocus(event)}\r\n      onBlur={event => onBlur(event)}\r\n    >\r\n      {props.item.content.actions ? (\r\n        <Overflow\r\n          openMenu={menuOpen}\r\n          card={props.item}\r\n          styles={{ position: 'absolute', right: '0', top: '0', margin: '0 8px 0px 0px' }}\r\n        />\r\n      ) : null}\r\n      <Flex gap=\"gap.small\">\r\n        <Flex.Item>\r\n          <CustomImage width=\"48px\" className=\"listItemImage\" src={props.item.preview.heroImageSrc} />\r\n        </Flex.Item>\r\n        <Flex.Item size=\"size.half\" grow>\r\n          <Flex column styles={{ textAlign: 'left' }}>\r\n            <Flex.Item\r\n              styles={{ display: '-webkit-box', WebkitBoxOrient: 'vertical', WebkitLineClamp: 1, overflow: 'hidden' }}\r\n            >\r\n              <Text\r\n                content={stripHTML(props.item.preview.title)}\r\n                styles={{ margin: '0 0 2px 0' }}\r\n                size=\"medium\"\r\n                weight=\"semibold\"\r\n                title={stripHTML(props.item.preview.title)}\r\n              />\r\n            </Flex.Item>\r\n            {props.item.preview.subTitle ? (\r\n              <Flex.Item\r\n                styles={{\r\n                  display: '-webkit-box',\r\n                  WebkitBoxOrient: 'vertical',\r\n                  WebkitLineClamp: 1,\r\n                  overflow: 'hidden',\r\n                }}\r\n              >\r\n                <Text\r\n                  content={stripHTML(props.item.preview.subTitle)}\r\n                  styles={{ margin: '0 0 2px 0' }}\r\n                  weight=\"regular\"\r\n                  size=\"medium\"\r\n                  title={stripHTML(props.item.preview.subTitle)}\r\n                />\r\n              </Flex.Item>\r\n            ) : null}\r\n            {props.item.preview.text ? (\r\n              <Flex.Item\r\n                grow\r\n                size=\"size.half\"\r\n                styles={{\r\n                  display: '-webkit-box',\r\n                  WebkitBoxOrient: 'vertical',\r\n                  WebkitLineClamp: 3,\r\n                  overflow: 'hidden',\r\n                }}\r\n              >\r\n                <Text\r\n                  content={stripHTML(props.item.preview.text)}\r\n                  weight=\"regular\"\r\n                  size=\"medium\"\r\n                  title={stripHTML(props.item.preview.text)}\r\n                />\r\n              </Flex.Item>\r\n            ) : null}\r\n          </Flex>\r\n        </Flex.Item>\r\n      </Flex>\r\n    </Segment>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Grid, gridBehavior, Ref } from '@stardust-ui/react';\r\nimport { IItemListProps } from './ListView';\r\nimport { ICard } from '../api/api.interface';\r\nimport '../css/App.css';\r\nimport { GridItem } from './GridItem';\r\n\r\nexport const CardView: React.FC<IItemListProps> = (props: IItemListProps): JSX.Element => {\r\n  // CONSTANTS\r\n  const minimumCardWidth = 278; //px\r\n\r\n  // HELPER FUNCTION\r\n  const calculateColumns = (width: number) => {\r\n    return Math.floor(width / minimumCardWidth);\r\n  };\r\n\r\n  const [Height, setHeight] = React.useState(window.innerHeight);\r\n  const updateHeight = () => {\r\n    setHeight(window.innerHeight);\r\n  };\r\n\r\n  // EFFECT HOOKS\r\n  React.useEffect(() => {\r\n    window.addEventListener('resize', updateHeight);\r\n    return () => {\r\n      window.removeEventListener('resize', updateHeight);\r\n    };\r\n  }, [Height]);\r\n\r\n  // STATE HOOKS\r\n  const [Columns, setColumns] = React.useState(calculateColumns(window.innerWidth));\r\n\r\n  // HANDLERS\r\n  const updateColumn = () => {\r\n    setColumns(calculateColumns(window.innerWidth));\r\n  };\r\n\r\n  // EFFECT HOOKS\r\n  React.useEffect(() => {\r\n    window.addEventListener('resize', updateColumn);\r\n    return () => {\r\n      window.removeEventListener('resize', updateColumn);\r\n    };\r\n  }, [Columns]);\r\n\r\n  // Ref for first grid item\r\n  const gridRef = React.createRef<any>();\r\n\r\n  React.useEffect(() => {\r\n    // If focus is true set focus to first element. Ignore otherwise\r\n    if (props.focusFirst) {\r\n      const firstElem = gridRef.current && (gridRef.current as HTMLElement).firstChild;\r\n\r\n      if (firstElem) {\r\n        (firstElem as HTMLElement).focus();\r\n      }\r\n    }\r\n  });\r\n\r\n  // ICARD PROCESSOR\r\n  const processItem = (item: ICard): JSX.Element => {\r\n    return <GridItem item={item}></GridItem>;\r\n  };\r\n\r\n  // RENDER\r\n  return (\r\n    <div style={{ margin: '0 0 0 8px', height: `${Height - 50}px`, overflow: 'scroll' }}>\r\n      <Ref innerRef={gridRef}>\r\n        <Grid id=\"grid-view\" columns={Columns} accessibility={gridBehavior} content={props.itemList.map(processItem)} />\r\n      </Ref>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { SearchBarWrapper } from './SearchBar';\r\nimport { Results } from './Results';\r\nimport { LoadIcon } from './LoadIcon';\r\nimport { ErrorView } from './ErrorView';\r\nimport { AuthView } from './AuthView';\r\n\r\nimport { getResults } from '../api/api';\r\n\r\nimport * as microsoftTeams from '@microsoft/teams-js';\r\nimport { ICard } from '../api/api.interface';\r\nimport { isInitialRun, parseQueryResponse, getCommandId } from '../utils/utils';\r\nimport { createComponent } from '@stardust-ui/react';\r\nimport { EmptyScreenView } from './EmptyScreenView';\r\n\r\n// handlers\r\nexport interface IContentViewProps {\r\n  onThemeChange: (theme: string) => void;\r\n  customClass: string;\r\n}\r\n\r\nenum AppStateEnum {\r\n  Loading = 'Loading',\r\n  Error = 'Error',\r\n  Render = 'Render',\r\n  Auth = 'Auth',\r\n  NoResults = 'NoResults',\r\n}\r\n\r\nexport const ContentView: React.FC<IContentViewProps> = (props: IContentViewProps): JSX.Element => {\r\n  // state hooks\r\n  const [ViewOption, setViewOption] = React.useState('List');\r\n  const [Result, setResult] = React.useState([] as ICard[]);\r\n  const [AppState, setAppState] = React.useState(AppStateEnum.Render);\r\n  const [ErrorMessage, setErrorMessage] = React.useState('');\r\n  const [AuthData, setAuthData] = React.useState({ url: '', title: 'Sign in' });\r\n  const [Query, setQuery] = React.useState({ query: '', commandId: getCommandId(window.location.href) });\r\n  const [FocusFirstResult, setFocusFirstResult] = React.useState(false);\r\n\r\n  const onError = (error: string): void => {\r\n    setAppState(AppStateEnum.Error);\r\n    setErrorMessage(error);\r\n  };\r\n\r\n  const onResults = (response: microsoftTeams.bot.QueryResponse): void => {\r\n    if (response.type === microsoftTeams.bot.ResponseType.Auth) {\r\n      const authResponse: microsoftTeams.bot.Auth = response.data as microsoftTeams.bot.Auth;\r\n      setAuthData({ url: authResponse.url, title: authResponse.title });\r\n      setAppState(AppStateEnum.Auth);\r\n    } else {\r\n      const resultsResponse: microsoftTeams.bot.Results = response.data as microsoftTeams.bot.Results;\r\n      setResult(parseQueryResponse(resultsResponse));\r\n      handleIfNoResults(resultsResponse.attachments);\r\n      microsoftTeams.appInitialization.notifySuccess();\r\n    }\r\n  };\r\n\r\n  const handleSearch = (query: string): void => {\r\n    if (query !== undefined) {\r\n      const queryInfo = { query: query, commandId: getCommandId(window.location.href) };\r\n      getResults(queryInfo, onResults, onError);\r\n      setAppState(AppStateEnum.Loading);\r\n      setQuery(queryInfo); // keep query in state for auth\r\n    }\r\n  };\r\n\r\n  const handleFocusOnFirstElement = (): void => {\r\n    setFocusFirstResult(true);\r\n  };\r\n\r\n  const handleResetFocus = (): void => {\r\n    setFocusFirstResult(false);\r\n  };\r\n\r\n  const handleViewChange = (viewOption: string): void => {\r\n    if (viewOption) {\r\n      setViewOption(viewOption);\r\n      setFocusFirstResult(false);\r\n    }\r\n  };\r\n\r\n  const handleIfNoResults = (response: microsoftTeams.bot.Attachment[]): void => {\r\n    if (response.length === 0) {\r\n      setAppState(AppStateEnum.NoResults);\r\n    } else {\r\n      setAppState(AppStateEnum.Render);\r\n    }\r\n  };\r\n\r\n  // EFFECT HOOKS\r\n  React.useEffect((): void => {\r\n    microsoftTeams.initialize();\r\n    microsoftTeams.appInitialization.notifyAppLoaded();\r\n    microsoftTeams.registerOnThemeChangeHandler(props.onThemeChange);\r\n    if (isInitialRun()) {\r\n      const request: microsoftTeams.bot.QueryRequest = {\r\n        query: '',\r\n        commandId: getCommandId(window.location.href),\r\n      };\r\n      getResults(request, onResults, onError);\r\n    }\r\n  }, [props.onThemeChange]);\r\n\r\n  let view = <Results results={Result} viewOption={ViewOption} focusFirst={FocusFirstResult} />;\r\n  switch (AppState) {\r\n    case 'Loading':\r\n      view = <LoadIcon isLoading={true} />;\r\n      break;\r\n    case 'Error':\r\n      view = <ErrorView message={ErrorMessage} />;\r\n      break;\r\n    case 'Auth':\r\n      view = <AuthView title={AuthData.title} url={AuthData.url} currentQuery={Query} onAuthenticated={onResults} />;\r\n      break;\r\n    case 'NoResults':\r\n      view = <EmptyScreenView title=\"We couldn't find any results\" subTitle=\"Search, or try refining your query!\" />;\r\n      break;\r\n  }\r\n  return (\r\n    <div className={props.customClass}>\r\n      <SearchBarWrapper\r\n        onSearch={handleSearch}\r\n        onViewChange={handleViewChange}\r\n        onEnter={handleFocusOnFirstElement}\r\n        onFocus={handleResetFocus}\r\n      />\r\n      {view}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const ContentViewWrapper = createComponent({\r\n  displayName: 'ContentViewWrapper',\r\n  render: ({ stardust, onThemeChange }) => {\r\n    const { classes } = stardust;\r\n    return <ContentView customClass={classes.root} onThemeChange={onThemeChange} />;\r\n  },\r\n});\r\n","import React from 'react';\r\nimport { Loader } from '@stardust-ui/react';\r\nimport '../css/LoadIcon.css';\r\n\r\nexport interface LoadIconProps {\r\n  isLoading: boolean;\r\n}\r\n\r\nexport const LoadIcon: React.FC<LoadIconProps> = (props: LoadIconProps): JSX.Element => {\r\n  return <div className=\"loadIcon\"> {props.isLoading ? <Loader /> : null} </div>;\r\n};\r\n","import React from 'react';\r\nimport { Text, Image, Button } from '@stardust-ui/react';\r\nimport '../css/EmptyScreenView.css';\r\n\r\ninterface IEmptyScreenView {\r\n  title: string;\r\n  subTitle: string;\r\n  imageSrc?: string;\r\n  message?: string;\r\n  buttonText?: string;\r\n  onClick?: any;\r\n}\r\n\r\nexport const EmptyScreenView: React.FC<IEmptyScreenView> = (props: IEmptyScreenView): JSX.Element => {\r\n  let button: any = '';\r\n  if (props.buttonText && props.onClick) {\r\n    button = <Button id=\"button\" content={props.buttonText} onClick={props.onClick} primary />;\r\n  }\r\n  let message = '';\r\n  if (props.message) {\r\n    message = props.message;\r\n  }\r\n  let imageSrc = 'error.svg';\r\n  if (props.imageSrc) {\r\n    imageSrc = props.imageSrc;\r\n  }\r\n\r\n  return (\r\n    <div className=\"EmptyScreenView\">\r\n      <Image id=\"image\" src={imageSrc} />\r\n      <div id=\"textblock\">\r\n        <Text id=\"title\" size={'large'} weight=\"bold\" content={props.title} />\r\n        <Text styles={{ marginTop: '8px' }} size={'medium'} content={<p>{props.subTitle}</p>} />\r\n        <Text id=\"error\" size=\"small\" content={message} />\r\n      </div>\r\n      {button}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { EmptyScreenView } from './EmptyScreenView';\r\ninterface IErrorViewProps {\r\n  message: string;\r\n}\r\n\r\nexport const ErrorView: React.FC<IErrorViewProps> = (props: IErrorViewProps): JSX.Element => {\r\n  return (\r\n    <EmptyScreenView\r\n      title=\"There was a problem communicating with the bot\"\r\n      subTitle=\"You may not be able to use this feature\"\r\n      message={props.message}\r\n    />\r\n  );\r\n};\r\n","import React from 'react';\r\nimport * as microsoftTeams from '@microsoft/teams-js';\r\nimport { EmptyScreenView } from './EmptyScreenView';\r\n\r\ninterface IAuthViewProps {\r\n  title: string;\r\n  url: string;\r\n  currentQuery: microsoftTeams.bot.QueryRequest;\r\n  onAuthenticated: (results: microsoftTeams.bot.QueryResponse) => void;\r\n}\r\n\r\nexport const AuthView: React.FC<IAuthViewProps> = (props: IAuthViewProps): JSX.Element => {\r\n  const [ErrorMessage, setErrorMessage] = React.useState('');\r\n\r\n  const onAuthSuccess = (results: microsoftTeams.bot.Results): void => {\r\n    props.onAuthenticated({ data: results, type: microsoftTeams.bot.ResponseType.Results });\r\n  };\r\n\r\n  const onAuthFailure = (error: string): void => {\r\n    setErrorMessage('Something went wrong, please try again');\r\n  };\r\n\r\n  const handleAuthentication = () => {\r\n    const authParams: microsoftTeams.bot.AuthQueryRequest = {\r\n      query: props.currentQuery.query,\r\n      commandId: props.currentQuery.commandId,\r\n      url: props.url,\r\n    };\r\n\r\n    microsoftTeams.bot.authenticate(authParams, onAuthSuccess, onAuthFailure);\r\n  };\r\n\r\n  return (\r\n    <EmptyScreenView\r\n      buttonText=\"Sign In\"\r\n      title={props.title}\r\n      subTitle={\"You'll need to sign in to use this app.\"}\r\n      message={ErrorMessage}\r\n      onClick={handleAuthentication}\r\n    />\r\n  );\r\n};\r\n","import { themes, ThemeInput, mergeThemes } from '@stardust-ui/react';\r\nimport * as queryString from 'query-string';\r\n\r\nenum themeTypes {\r\n  Dark = 'dark',\r\n  Default = 'default',\r\n  Contrast = 'contrast',\r\n}\r\n\r\n// gets theme name from url params\r\nexport const getThemeFromURL = (iUrl: string): string => {\r\n  const url = queryString.parseUrl(iUrl);\r\n\r\n  const themeString: string = url.query.theme as string;\r\n\r\n  if (!themeString) {\r\n    return 'default';\r\n  }\r\n  return themeString;\r\n};\r\n\r\nconst getCustomTheme = () => ({\r\n  componentVariables: {\r\n    ContentViewWrapper: ({ colorScheme }: any) => ({\r\n      backgroundColor: colorScheme.default.background2,\r\n    }),\r\n    SearchBarWrapper: ({ colorScheme }: any) => ({\r\n      backgroundColor: colorScheme.default.background2,\r\n    }),\r\n    ListItem: ({ colorScheme }: any) => ({\r\n      backgroundColor: colorScheme.default.background,\r\n      hoverBackgroundColor: colorScheme.default.backgroundHover1,\r\n      hoverTextColor: colorScheme.default.foregroundFocus,\r\n      activeBackgroundColor: colorScheme.default.borderActive,\r\n      activeTextColor: colorScheme.default.foregroundFocus,\r\n    }),\r\n    Segment: ({ colorScheme }: any) => ({\r\n      backgroundColor: colorScheme.default.background,\r\n      hoverBackgroundColor: colorScheme.default.backgroundHover1,\r\n      hoverTextColor: colorScheme.default.foregroundFocus,\r\n      activeBackgroundColor: colorScheme.default.borderActive,\r\n      activeTextColor: colorScheme.default.foregroundFocus,\r\n    }),\r\n    Input: ({ colorScheme }: any) => ({\r\n      inputBackgroundColor: colorScheme.default.background,\r\n    }),\r\n  },\r\n  componentStyles: {\r\n    ContentViewWrapper: {\r\n      root: ({ variables }: any) => ({\r\n        backgroundColor: variables.backgroundColor,\r\n      }),\r\n    },\r\n    SearchBarWrapper: {\r\n      root: ({ variables }: any) => ({\r\n        backgroundColor: variables.backgroundColor,\r\n        position: 'sticky',\r\n        top: '0px',\r\n        zIndex: 1,\r\n      }),\r\n    },\r\n    ListItem: {\r\n      root: ({ variables }: any) => ({\r\n        ':hover': {\r\n          backgroundColor: variables.hoverBackgroundColor,\r\n          color: variables.hoverTextColor,\r\n          '& .ui-menu': { color: variables.hoverTextColor },\r\n        },\r\n        ':active': {\r\n          backgroundColor: variables.activeBackgroundColor,\r\n          color: variables.activeTextColor,\r\n        },\r\n        ':focus': {\r\n          backgroundColor: variables.hoverBackgroundColor,\r\n          color: variables.hoverTextColor,\r\n          '& .ui-menu': { color: variables.hoverTextColor },\r\n        },\r\n      }),\r\n    },\r\n    Input: {\r\n      input: ({ variables }: any) => ({\r\n        backgroundColor: variables.inputBackgroundColor,\r\n      }),\r\n    },\r\n    Segment: {\r\n      root: ({ variables }: any) => ({\r\n        ':hover': {\r\n          backgroundColor: variables.hoverBackgroundColor,\r\n          color: variables.hoverTextColor,\r\n          '& .ui-menu': { color: variables.hoverTextColor },\r\n        },\r\n        ':active': {\r\n          backgroundColor: variables.activeBackgroundColor,\r\n          color: variables.activeTextColor,\r\n        },\r\n        ':focus': {\r\n          backgroundColor: variables.hoverBackgroundColor,\r\n          color: variables.hoverTextColor,\r\n          '& .ui-menu': { color: variables.hoverTextColor },\r\n        },\r\n      }),\r\n    },\r\n  },\r\n});\r\n\r\n// gets theme type from string\r\nexport const getTheme = (theme: string): ThemeInput => {\r\n  let customTheme: ThemeInput;\r\n  switch (theme) {\r\n    case themeTypes.Contrast:\r\n      customTheme = getCustomTheme();\r\n      return mergeThemes(themes.teamsHighContrast, customTheme);\r\n    case themeTypes.Dark:\r\n      customTheme = getCustomTheme();\r\n      return mergeThemes(themes.teamsDark, customTheme);\r\n    default:\r\n      customTheme = getCustomTheme();\r\n      return mergeThemes(themes.teams, customTheme);\r\n  }\r\n};\r\n","import React from 'react';\r\nimport './css/App.css';\r\n\r\nimport { getFrameContext } from './utils/utils';\r\nimport { SettingsView } from './components/SettingsView';\r\nimport { ContentViewWrapper } from './components/ContentView';\r\n\r\ninterface IAppProps {\r\n  onThemeChange: (theme: string) => void;\r\n}\r\n\r\nexport const App: React.FC<IAppProps> = (props: IAppProps): JSX.Element => {\r\n  // CONSTANTS\r\n  const url: string = window.location.href;\r\n  const frameContext = getFrameContext(url);\r\n  if (frameContext === 'settings') {\r\n    return (\r\n      <div>\r\n        <SettingsView />\r\n      </div>\r\n    );\r\n  } else {\r\n    return <ContentViewWrapper onThemeChange={props.onThemeChange} />;\r\n  }\r\n};\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { ProviderWrapper } from './ProviderWrapper';\r\n\r\nReactDOM.render(<ProviderWrapper />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport { Provider } from '@stardust-ui/react';\r\nimport App from './App';\r\nimport * as themeUtils from './utils/themeUtils';\r\nimport { ThemeContext } from './utils/themeContext';\r\n\r\nexport const ProviderWrapper: React.FC = (): JSX.Element => {\r\n  // CONSTANT\r\n  const initialTheme = themeUtils.getTheme(themeUtils.getThemeFromURL(window.location.href));\r\n  // HOOKS\r\n  const [Theme, setTheme] = React.useState(initialTheme);\r\n  const themeVariables =\r\n    Theme && Theme.siteVariables && Theme.siteVariables.colorScheme ? Theme.siteVariables.colorScheme.default : {};\r\n\r\n  // HANDLERS\r\n  const handleThemeChange = (theme: string): void => {\r\n    setTheme(themeUtils.getTheme(theme));\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={themeVariables}>\r\n      <Provider theme={Theme}>\r\n        <App onThemeChange={handleThemeChange} />\r\n      </Provider>\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n"],"sourceRoot":""}